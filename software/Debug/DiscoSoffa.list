
DiscoSoffa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042ac  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004444  08004444  00014444  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004464  08004464  00014464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800446c  0800446c  0001446c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004470  08004470  00014470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08004474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002f8  2000000c  08004480  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000304  08004480  00020304  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015879  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002cda  00000000  00000000  000358b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a36a  00000000  00000000  0003858f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ca8  00000000  00000000  00042900  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000011d8  00000000  00000000  000435a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007228  00000000  00000000  00044780  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004f50  00000000  00000000  0004b9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000508f8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000280c  00000000  00000000  00050974  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800442c 	.word	0x0800442c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	0800442c 	.word	0x0800442c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf14      	ite	ne
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e720      	b.n	800031c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aedc 	beq.w	80002ca <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6c1      	b.n	80002ca <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <__aeabi_uldivmod>:
 80009ac:	b953      	cbnz	r3, 80009c4 <__aeabi_uldivmod+0x18>
 80009ae:	b94a      	cbnz	r2, 80009c4 <__aeabi_uldivmod+0x18>
 80009b0:	2900      	cmp	r1, #0
 80009b2:	bf08      	it	eq
 80009b4:	2800      	cmpeq	r0, #0
 80009b6:	bf1c      	itt	ne
 80009b8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009bc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009c0:	f000 b97a 	b.w	8000cb8 <__aeabi_idiv0>
 80009c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009cc:	f000 f806 	bl	80009dc <__udivmoddi4>
 80009d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d8:	b004      	add	sp, #16
 80009da:	4770      	bx	lr

080009dc <__udivmoddi4>:
 80009dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e0:	468c      	mov	ip, r1
 80009e2:	460d      	mov	r5, r1
 80009e4:	4604      	mov	r4, r0
 80009e6:	9e08      	ldr	r6, [sp, #32]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d151      	bne.n	8000a90 <__udivmoddi4+0xb4>
 80009ec:	428a      	cmp	r2, r1
 80009ee:	4617      	mov	r7, r2
 80009f0:	d96d      	bls.n	8000ace <__udivmoddi4+0xf2>
 80009f2:	fab2 fe82 	clz	lr, r2
 80009f6:	f1be 0f00 	cmp.w	lr, #0
 80009fa:	d00b      	beq.n	8000a14 <__udivmoddi4+0x38>
 80009fc:	f1ce 0c20 	rsb	ip, lr, #32
 8000a00:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a04:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a08:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a0c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a10:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a14:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a18:	0c25      	lsrs	r5, r4, #16
 8000a1a:	fbbc f8fa 	udiv	r8, ip, sl
 8000a1e:	fa1f f987 	uxth.w	r9, r7
 8000a22:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a26:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a2a:	fb08 f309 	mul.w	r3, r8, r9
 8000a2e:	42ab      	cmp	r3, r5
 8000a30:	d90a      	bls.n	8000a48 <__udivmoddi4+0x6c>
 8000a32:	19ed      	adds	r5, r5, r7
 8000a34:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000a38:	f080 8123 	bcs.w	8000c82 <__udivmoddi4+0x2a6>
 8000a3c:	42ab      	cmp	r3, r5
 8000a3e:	f240 8120 	bls.w	8000c82 <__udivmoddi4+0x2a6>
 8000a42:	f1a8 0802 	sub.w	r8, r8, #2
 8000a46:	443d      	add	r5, r7
 8000a48:	1aed      	subs	r5, r5, r3
 8000a4a:	b2a4      	uxth	r4, r4
 8000a4c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000a50:	fb0a 5510 	mls	r5, sl, r0, r5
 8000a54:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a58:	fb00 f909 	mul.w	r9, r0, r9
 8000a5c:	45a1      	cmp	r9, r4
 8000a5e:	d909      	bls.n	8000a74 <__udivmoddi4+0x98>
 8000a60:	19e4      	adds	r4, r4, r7
 8000a62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a66:	f080 810a 	bcs.w	8000c7e <__udivmoddi4+0x2a2>
 8000a6a:	45a1      	cmp	r9, r4
 8000a6c:	f240 8107 	bls.w	8000c7e <__udivmoddi4+0x2a2>
 8000a70:	3802      	subs	r0, #2
 8000a72:	443c      	add	r4, r7
 8000a74:	eba4 0409 	sub.w	r4, r4, r9
 8000a78:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	d061      	beq.n	8000b46 <__udivmoddi4+0x16a>
 8000a82:	fa24 f40e 	lsr.w	r4, r4, lr
 8000a86:	2300      	movs	r3, #0
 8000a88:	6034      	str	r4, [r6, #0]
 8000a8a:	6073      	str	r3, [r6, #4]
 8000a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a90:	428b      	cmp	r3, r1
 8000a92:	d907      	bls.n	8000aa4 <__udivmoddi4+0xc8>
 8000a94:	2e00      	cmp	r6, #0
 8000a96:	d054      	beq.n	8000b42 <__udivmoddi4+0x166>
 8000a98:	2100      	movs	r1, #0
 8000a9a:	e886 0021 	stmia.w	r6, {r0, r5}
 8000a9e:	4608      	mov	r0, r1
 8000aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa4:	fab3 f183 	clz	r1, r3
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	f040 808e 	bne.w	8000bca <__udivmoddi4+0x1ee>
 8000aae:	42ab      	cmp	r3, r5
 8000ab0:	d302      	bcc.n	8000ab8 <__udivmoddi4+0xdc>
 8000ab2:	4282      	cmp	r2, r0
 8000ab4:	f200 80fa 	bhi.w	8000cac <__udivmoddi4+0x2d0>
 8000ab8:	1a84      	subs	r4, r0, r2
 8000aba:	eb65 0503 	sbc.w	r5, r5, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	46ac      	mov	ip, r5
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d03f      	beq.n	8000b46 <__udivmoddi4+0x16a>
 8000ac6:	e886 1010 	stmia.w	r6, {r4, ip}
 8000aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ace:	b912      	cbnz	r2, 8000ad6 <__udivmoddi4+0xfa>
 8000ad0:	2701      	movs	r7, #1
 8000ad2:	fbb7 f7f2 	udiv	r7, r7, r2
 8000ad6:	fab7 fe87 	clz	lr, r7
 8000ada:	f1be 0f00 	cmp.w	lr, #0
 8000ade:	d134      	bne.n	8000b4a <__udivmoddi4+0x16e>
 8000ae0:	1beb      	subs	r3, r5, r7
 8000ae2:	0c3a      	lsrs	r2, r7, #16
 8000ae4:	fa1f fc87 	uxth.w	ip, r7
 8000ae8:	2101      	movs	r1, #1
 8000aea:	fbb3 f8f2 	udiv	r8, r3, r2
 8000aee:	0c25      	lsrs	r5, r4, #16
 8000af0:	fb02 3318 	mls	r3, r2, r8, r3
 8000af4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000af8:	fb0c f308 	mul.w	r3, ip, r8
 8000afc:	42ab      	cmp	r3, r5
 8000afe:	d907      	bls.n	8000b10 <__udivmoddi4+0x134>
 8000b00:	19ed      	adds	r5, r5, r7
 8000b02:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x132>
 8000b08:	42ab      	cmp	r3, r5
 8000b0a:	f200 80d1 	bhi.w	8000cb0 <__udivmoddi4+0x2d4>
 8000b0e:	4680      	mov	r8, r0
 8000b10:	1aed      	subs	r5, r5, r3
 8000b12:	b2a3      	uxth	r3, r4
 8000b14:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b18:	fb02 5510 	mls	r5, r2, r0, r5
 8000b1c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b20:	fb0c fc00 	mul.w	ip, ip, r0
 8000b24:	45a4      	cmp	ip, r4
 8000b26:	d907      	bls.n	8000b38 <__udivmoddi4+0x15c>
 8000b28:	19e4      	adds	r4, r4, r7
 8000b2a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b2e:	d202      	bcs.n	8000b36 <__udivmoddi4+0x15a>
 8000b30:	45a4      	cmp	ip, r4
 8000b32:	f200 80b8 	bhi.w	8000ca6 <__udivmoddi4+0x2ca>
 8000b36:	4618      	mov	r0, r3
 8000b38:	eba4 040c 	sub.w	r4, r4, ip
 8000b3c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b40:	e79d      	b.n	8000a7e <__udivmoddi4+0xa2>
 8000b42:	4631      	mov	r1, r6
 8000b44:	4630      	mov	r0, r6
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	f1ce 0420 	rsb	r4, lr, #32
 8000b4e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000b52:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b56:	fa20 f804 	lsr.w	r8, r0, r4
 8000b5a:	0c3a      	lsrs	r2, r7, #16
 8000b5c:	fa25 f404 	lsr.w	r4, r5, r4
 8000b60:	ea48 0803 	orr.w	r8, r8, r3
 8000b64:	fbb4 f1f2 	udiv	r1, r4, r2
 8000b68:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000b6c:	fb02 4411 	mls	r4, r2, r1, r4
 8000b70:	fa1f fc87 	uxth.w	ip, r7
 8000b74:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000b78:	fb01 f30c 	mul.w	r3, r1, ip
 8000b7c:	42ab      	cmp	r3, r5
 8000b7e:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b82:	d909      	bls.n	8000b98 <__udivmoddi4+0x1bc>
 8000b84:	19ed      	adds	r5, r5, r7
 8000b86:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000b8a:	f080 808a 	bcs.w	8000ca2 <__udivmoddi4+0x2c6>
 8000b8e:	42ab      	cmp	r3, r5
 8000b90:	f240 8087 	bls.w	8000ca2 <__udivmoddi4+0x2c6>
 8000b94:	3902      	subs	r1, #2
 8000b96:	443d      	add	r5, r7
 8000b98:	1aeb      	subs	r3, r5, r3
 8000b9a:	fa1f f588 	uxth.w	r5, r8
 8000b9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000ba2:	fb02 3310 	mls	r3, r2, r0, r3
 8000ba6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000baa:	fb00 f30c 	mul.w	r3, r0, ip
 8000bae:	42ab      	cmp	r3, r5
 8000bb0:	d907      	bls.n	8000bc2 <__udivmoddi4+0x1e6>
 8000bb2:	19ed      	adds	r5, r5, r7
 8000bb4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bb8:	d26f      	bcs.n	8000c9a <__udivmoddi4+0x2be>
 8000bba:	42ab      	cmp	r3, r5
 8000bbc:	d96d      	bls.n	8000c9a <__udivmoddi4+0x2be>
 8000bbe:	3802      	subs	r0, #2
 8000bc0:	443d      	add	r5, r7
 8000bc2:	1aeb      	subs	r3, r5, r3
 8000bc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc8:	e78f      	b.n	8000aea <__udivmoddi4+0x10e>
 8000bca:	f1c1 0720 	rsb	r7, r1, #32
 8000bce:	fa22 f807 	lsr.w	r8, r2, r7
 8000bd2:	408b      	lsls	r3, r1
 8000bd4:	fa05 f401 	lsl.w	r4, r5, r1
 8000bd8:	ea48 0303 	orr.w	r3, r8, r3
 8000bdc:	fa20 fe07 	lsr.w	lr, r0, r7
 8000be0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000be4:	40fd      	lsrs	r5, r7
 8000be6:	ea4e 0e04 	orr.w	lr, lr, r4
 8000bea:	fbb5 f9fc 	udiv	r9, r5, ip
 8000bee:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000bf2:	fb0c 5519 	mls	r5, ip, r9, r5
 8000bf6:	fa1f f883 	uxth.w	r8, r3
 8000bfa:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000bfe:	fb09 f408 	mul.w	r4, r9, r8
 8000c02:	42ac      	cmp	r4, r5
 8000c04:	fa02 f201 	lsl.w	r2, r2, r1
 8000c08:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x244>
 8000c0e:	18ed      	adds	r5, r5, r3
 8000c10:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c14:	d243      	bcs.n	8000c9e <__udivmoddi4+0x2c2>
 8000c16:	42ac      	cmp	r4, r5
 8000c18:	d941      	bls.n	8000c9e <__udivmoddi4+0x2c2>
 8000c1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c1e:	441d      	add	r5, r3
 8000c20:	1b2d      	subs	r5, r5, r4
 8000c22:	fa1f fe8e 	uxth.w	lr, lr
 8000c26:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c2a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c2e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c32:	fb00 f808 	mul.w	r8, r0, r8
 8000c36:	45a0      	cmp	r8, r4
 8000c38:	d907      	bls.n	8000c4a <__udivmoddi4+0x26e>
 8000c3a:	18e4      	adds	r4, r4, r3
 8000c3c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000c40:	d229      	bcs.n	8000c96 <__udivmoddi4+0x2ba>
 8000c42:	45a0      	cmp	r8, r4
 8000c44:	d927      	bls.n	8000c96 <__udivmoddi4+0x2ba>
 8000c46:	3802      	subs	r0, #2
 8000c48:	441c      	add	r4, r3
 8000c4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c4e:	eba4 0408 	sub.w	r4, r4, r8
 8000c52:	fba0 8902 	umull	r8, r9, r0, r2
 8000c56:	454c      	cmp	r4, r9
 8000c58:	46c6      	mov	lr, r8
 8000c5a:	464d      	mov	r5, r9
 8000c5c:	d315      	bcc.n	8000c8a <__udivmoddi4+0x2ae>
 8000c5e:	d012      	beq.n	8000c86 <__udivmoddi4+0x2aa>
 8000c60:	b156      	cbz	r6, 8000c78 <__udivmoddi4+0x29c>
 8000c62:	ebba 030e 	subs.w	r3, sl, lr
 8000c66:	eb64 0405 	sbc.w	r4, r4, r5
 8000c6a:	fa04 f707 	lsl.w	r7, r4, r7
 8000c6e:	40cb      	lsrs	r3, r1
 8000c70:	431f      	orrs	r7, r3
 8000c72:	40cc      	lsrs	r4, r1
 8000c74:	6037      	str	r7, [r6, #0]
 8000c76:	6074      	str	r4, [r6, #4]
 8000c78:	2100      	movs	r1, #0
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	e6f8      	b.n	8000a74 <__udivmoddi4+0x98>
 8000c82:	4690      	mov	r8, r2
 8000c84:	e6e0      	b.n	8000a48 <__udivmoddi4+0x6c>
 8000c86:	45c2      	cmp	sl, r8
 8000c88:	d2ea      	bcs.n	8000c60 <__udivmoddi4+0x284>
 8000c8a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c8e:	eb69 0503 	sbc.w	r5, r9, r3
 8000c92:	3801      	subs	r0, #1
 8000c94:	e7e4      	b.n	8000c60 <__udivmoddi4+0x284>
 8000c96:	4628      	mov	r0, r5
 8000c98:	e7d7      	b.n	8000c4a <__udivmoddi4+0x26e>
 8000c9a:	4640      	mov	r0, r8
 8000c9c:	e791      	b.n	8000bc2 <__udivmoddi4+0x1e6>
 8000c9e:	4681      	mov	r9, r0
 8000ca0:	e7be      	b.n	8000c20 <__udivmoddi4+0x244>
 8000ca2:	4601      	mov	r1, r0
 8000ca4:	e778      	b.n	8000b98 <__udivmoddi4+0x1bc>
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	443c      	add	r4, r7
 8000caa:	e745      	b.n	8000b38 <__udivmoddi4+0x15c>
 8000cac:	4608      	mov	r0, r1
 8000cae:	e708      	b.n	8000ac2 <__udivmoddi4+0xe6>
 8000cb0:	f1a8 0802 	sub.w	r8, r8, #2
 8000cb4:	443d      	add	r5, r7
 8000cb6:	e72b      	b.n	8000b10 <__udivmoddi4+0x134>

08000cb8 <__aeabi_idiv0>:
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cbc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <HAL_InitTick+0x3c>)
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_InitTick+0x40>)
{
 8000cc2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc4:	7818      	ldrb	r0, [r3, #0]
 8000cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cca:	fbb3 f3f0 	udiv	r3, r3, r0
 8000cce:	6810      	ldr	r0, [r2, #0]
 8000cd0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cd4:	f000 fb46 	bl	8001364 <HAL_SYSTICK_Config>
 8000cd8:	4604      	mov	r4, r0
 8000cda:	b958      	cbnz	r0, 8000cf4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cdc:	2d0f      	cmp	r5, #15
 8000cde:	d809      	bhi.n	8000cf4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	4629      	mov	r1, r5
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ce8:	f000 fafa 	bl	80012e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <HAL_InitTick+0x44>)
 8000cee:	4620      	mov	r0, r4
 8000cf0:	601d      	str	r5, [r3, #0]
 8000cf2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000cf4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000cf6:	bd38      	pop	{r3, r4, r5, pc}
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	20000004 	.word	0x20000004

08000d04 <HAL_Init>:
{
 8000d04:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_Init+0x30>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d0e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d16:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d1e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f000 facb 	bl	80012bc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d26:	2000      	movs	r0, #0
 8000d28:	f7ff ffc8 	bl	8000cbc <HAL_InitTick>
  HAL_MspInit();
 8000d2c:	f003 f90c 	bl	8003f48 <HAL_MspInit>
}
 8000d30:	2000      	movs	r0, #0
 8000d32:	bd08      	pop	{r3, pc}
 8000d34:	40023c00 	.word	0x40023c00

08000d38 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d38:	4a03      	ldr	r2, [pc, #12]	; (8000d48 <HAL_IncTick+0x10>)
 8000d3a:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <HAL_IncTick+0x14>)
 8000d3c:	6811      	ldr	r1, [r2, #0]
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	440b      	add	r3, r1
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000028 	.word	0x20000028
 8000d4c:	20000000 	.word	0x20000000

08000d50 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d50:	4b01      	ldr	r3, [pc, #4]	; (8000d58 <HAL_GetTick+0x8>)
 8000d52:	6818      	ldr	r0, [r3, #0]
}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000028 	.word	0x20000028

08000d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d5c:	b538      	push	{r3, r4, r5, lr}
 8000d5e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff fff6 	bl	8000d50 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d64:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000d66:	bf1c      	itt	ne
 8000d68:	4b05      	ldrne	r3, [pc, #20]	; (8000d80 <HAL_Delay+0x24>)
 8000d6a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000d6c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000d6e:	bf18      	it	ne
 8000d70:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d72:	f7ff ffed 	bl	8000d50 <HAL_GetTick>
 8000d76:	1b40      	subs	r0, r0, r5
 8000d78:	4284      	cmp	r4, r0
 8000d7a:	d8fa      	bhi.n	8000d72 <HAL_Delay+0x16>
  {
  }
}
 8000d7c:	bd38      	pop	{r3, r4, r5, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000000 	.word	0x20000000

08000d84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d84:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d86:	4604      	mov	r4, r0
 8000d88:	2800      	cmp	r0, #0
 8000d8a:	f000 809b 	beq.w	8000ec4 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d8e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000d90:	b925      	cbnz	r5, 8000d9c <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d92:	f003 f8f5 	bl	8003f80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d96:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d98:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d9e:	06db      	lsls	r3, r3, #27
 8000da0:	f100 808e 	bmi.w	8000ec0 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000da4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000da6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000daa:	f023 0302 	bic.w	r3, r3, #2
 8000dae:	f043 0302 	orr.w	r3, r3, #2
 8000db2:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000db4:	4b44      	ldr	r3, [pc, #272]	; (8000ec8 <HAL_ADC_Init+0x144>)
 8000db6:	685a      	ldr	r2, [r3, #4]
 8000db8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000dbc:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000dbe:	685a      	ldr	r2, [r3, #4]
 8000dc0:	6861      	ldr	r1, [r4, #4]
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000dc6:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000dc8:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000dd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000dd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000dda:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000ddc:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000dde:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000de2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000de4:	685a      	ldr	r2, [r3, #4]
 8000de6:	430a      	orrs	r2, r1
 8000de8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000dea:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000dec:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000dee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000df2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	430a      	orrs	r2, r1
 8000df8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dfa:	4934      	ldr	r1, [pc, #208]	; (8000ecc <HAL_ADC_Init+0x148>)
 8000dfc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000dfe:	428a      	cmp	r2, r1
 8000e00:	d052      	beq.n	8000ea8 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e02:	6899      	ldr	r1, [r3, #8]
 8000e04:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000e08:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000e0a:	6899      	ldr	r1, [r3, #8]
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e10:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e12:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e1e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000e20:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000e22:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000e24:	f022 0202 	bic.w	r2, r2, #2
 8000e28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000e30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000e32:	f894 2020 	ldrb.w	r2, [r4, #32]
 8000e36:	2a00      	cmp	r2, #0
 8000e38:	d03e      	beq.n	8000eb8 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000e3a:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000e3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000e3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000e4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	3901      	subs	r1, #1
 8000e50:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000e54:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e58:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000e5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e62:	3901      	subs	r1, #1
 8000e64:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000e68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000e6a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000e6c:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000e70:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000e76:	689a      	ldr	r2, [r3, #8]
 8000e78:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000e7c:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000e7e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e80:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e88:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000e8a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e8c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000e90:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000e92:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000e94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e96:	f023 0303 	bic.w	r3, r3, #3
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000ea6:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000eae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000eb6:	e7b2      	b.n	8000e1e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ebe:	e7c9      	b.n	8000e54 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	e7ed      	b.n	8000ea0 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8000ec4:	2001      	movs	r0, #1
}
 8000ec6:	bd38      	pop	{r3, r4, r5, pc}
 8000ec8:	40012300 	.word	0x40012300
 8000ecc:	0f000001 	.word	0x0f000001

08000ed0 <HAL_ADC_Start_DMA>:
{
 8000ed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000ed2:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8000ed8:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8000edc:	2a01      	cmp	r2, #1
{
 8000ede:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000ee0:	d065      	beq.n	8000fae <HAL_ADC_Start_DMA+0xde>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000ee2:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hadc);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000eea:	68aa      	ldr	r2, [r5, #8]
 8000eec:	07d2      	lsls	r2, r2, #31
 8000eee:	d505      	bpl.n	8000efc <HAL_ADC_Start_DMA+0x2c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000ef0:	68aa      	ldr	r2, [r5, #8]
 8000ef2:	07d0      	lsls	r0, r2, #31
 8000ef4:	d415      	bmi.n	8000f22 <HAL_ADC_Start_DMA+0x52>
  return HAL_OK;
 8000ef6:	2000      	movs	r0, #0
}
 8000ef8:	b003      	add	sp, #12
 8000efa:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8000efc:	68aa      	ldr	r2, [r5, #8]
 8000efe:	f042 0201 	orr.w	r2, r2, #1
 8000f02:	60aa      	str	r2, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f04:	4a2b      	ldr	r2, [pc, #172]	; (8000fb4 <HAL_ADC_Start_DMA+0xe4>)
 8000f06:	6810      	ldr	r0, [r2, #0]
 8000f08:	4a2b      	ldr	r2, [pc, #172]	; (8000fb8 <HAL_ADC_Start_DMA+0xe8>)
 8000f0a:	fbb0 f0f2 	udiv	r0, r0, r2
 8000f0e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000f12:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8000f14:	9a01      	ldr	r2, [sp, #4]
 8000f16:	2a00      	cmp	r2, #0
 8000f18:	d0ea      	beq.n	8000ef0 <HAL_ADC_Start_DMA+0x20>
      counter--;
 8000f1a:	9a01      	ldr	r2, [sp, #4]
 8000f1c:	3a01      	subs	r2, #1
 8000f1e:	9201      	str	r2, [sp, #4]
 8000f20:	e7f8      	b.n	8000f14 <HAL_ADC_Start_DMA+0x44>
    ADC_STATE_CLR_SET(hadc->State,
 8000f22:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000f24:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000f28:	f020 0001 	bic.w	r0, r0, #1
 8000f2c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8000f30:	6420      	str	r0, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f32:	686a      	ldr	r2, [r5, #4]
 8000f34:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f36:	bf41      	itttt	mi
 8000f38:	6c20      	ldrmi	r0, [r4, #64]	; 0x40
 8000f3a:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8000f3e:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8000f42:	6420      	strmi	r0, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f44:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f46:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f4c:	bf1c      	itt	ne
 8000f4e:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 8000f50:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000f54:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 8000f56:	2200      	movs	r2, #0
 8000f58:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f5c:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <HAL_ADC_Start_DMA+0xec>)
 8000f5e:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f60:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <HAL_ADC_Start_DMA+0xf0>)
 8000f62:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f64:	4a17      	ldr	r2, [pc, #92]	; (8000fc4 <HAL_ADC_Start_DMA+0xf4>)
 8000f66:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f68:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000f6c:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000f6e:	686a      	ldr	r2, [r5, #4]
 8000f70:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000f74:	606a      	str	r2, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000f76:	68aa      	ldr	r2, [r5, #8]
 8000f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f7c:	60aa      	str	r2, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f7e:	460a      	mov	r2, r1
 8000f80:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8000f84:	f000 fa98 	bl	80014b8 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <HAL_ADC_Start_DMA+0xf8>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f013 0f1f 	tst.w	r3, #31
 8000f90:	6823      	ldr	r3, [r4, #0]
 8000f92:	d108      	bne.n	8000fa6 <HAL_ADC_Start_DMA+0xd6>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f94:	6898      	ldr	r0, [r3, #8]
 8000f96:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000f9a:	d1ac      	bne.n	8000ef6 <HAL_ADC_Start_DMA+0x26>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	e7a8      	b.n	8000ef8 <HAL_ADC_Start_DMA+0x28>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000fa6:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <HAL_ADC_Start_DMA+0xfc>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d1a4      	bne.n	8000ef6 <HAL_ADC_Start_DMA+0x26>
 8000fac:	e7f2      	b.n	8000f94 <HAL_ADC_Start_DMA+0xc4>
  __HAL_LOCK(hadc);
 8000fae:	2002      	movs	r0, #2
 8000fb0:	e7a2      	b.n	8000ef8 <HAL_ADC_Start_DMA+0x28>
 8000fb2:	bf00      	nop
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	000f4240 	.word	0x000f4240
 8000fbc:	08001121 	.word	0x08001121
 8000fc0:	08000fd5 	.word	0x08000fd5
 8000fc4:	0800110b 	.word	0x0800110b
 8000fc8:	40012300 	.word	0x40012300
 8000fcc:	40012000 	.word	0x40012000

08000fd0 <HAL_ADC_ConvCpltCallback>:
 8000fd0:	4770      	bx	lr

08000fd2 <HAL_ADC_ConvHalfCpltCallback>:
 8000fd2:	4770      	bx	lr

08000fd4 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000fd4:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000fd6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000fd8:	f7ff fffb 	bl	8000fd2 <HAL_ADC_ConvHalfCpltCallback>
 8000fdc:	bd08      	pop	{r3, pc}

08000fde <HAL_ADC_LevelOutOfWindowCallback>:
 8000fde:	4770      	bx	lr

08000fe0 <HAL_ADC_ErrorCallback>:
{
 8000fe0:	4770      	bx	lr

08000fe2 <HAL_ADC_IRQHandler>:
{
 8000fe2:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000fe4:	6803      	ldr	r3, [r0, #0]
 8000fe6:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000fe8:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000fea:	078d      	lsls	r5, r1, #30
{
 8000fec:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 8000fee:	d52b      	bpl.n	8001048 <HAL_ADC_IRQHandler+0x66>
 8000ff0:	0690      	lsls	r0, r2, #26
 8000ff2:	d529      	bpl.n	8001048 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ff4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000ff6:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ff8:	bf5e      	ittt	pl
 8000ffa:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8000ffc:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8001000:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001008:	d117      	bne.n	800103a <HAL_ADC_IRQHandler+0x58>
 800100a:	7e22      	ldrb	r2, [r4, #24]
 800100c:	b9aa      	cbnz	r2, 800103a <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800100e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001010:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8001014:	d002      	beq.n	800101c <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001016:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001018:	0552      	lsls	r2, r2, #21
 800101a:	d40e      	bmi.n	800103a <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	f022 0220 	bic.w	r2, r2, #32
 8001022:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001024:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001026:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800102a:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800102c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800102e:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001030:	bf5e      	ittt	pl
 8001032:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8001034:	f043 0301 	orrpl.w	r3, r3, #1
 8001038:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800103a:	4620      	mov	r0, r4
 800103c:	f7ff ffc8 	bl	8000fd0 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001040:	6823      	ldr	r3, [r4, #0]
 8001042:	f06f 0212 	mvn.w	r2, #18
 8001046:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001048:	6823      	ldr	r3, [r4, #0]
 800104a:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800104c:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800104e:	074d      	lsls	r5, r1, #29
 8001050:	d532      	bpl.n	80010b8 <HAL_ADC_IRQHandler+0xd6>
 8001052:	0610      	lsls	r0, r2, #24
 8001054:	d530      	bpl.n	80010b8 <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001056:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001058:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800105a:	bf5e      	ittt	pl
 800105c:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 800105e:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8001062:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800106a:	d11e      	bne.n	80010aa <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800106c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800106e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001072:	d002      	beq.n	800107a <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001074:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001076:	0552      	lsls	r2, r2, #21
 8001078:	d417      	bmi.n	80010aa <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800107a:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800107c:	0555      	lsls	r5, r2, #21
 800107e:	d414      	bmi.n	80010aa <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001080:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001082:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001086:	d110      	bne.n	80010aa <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001088:	7e22      	ldrb	r2, [r4, #24]
 800108a:	b972      	cbnz	r2, 80010aa <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001092:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001094:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001096:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800109a:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800109c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800109e:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010a0:	bf5e      	ittt	pl
 80010a2:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 80010a4:	f043 0301 	orrpl.w	r3, r3, #1
 80010a8:	6423      	strpl	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80010aa:	4620      	mov	r0, r4
 80010ac:	f000 f904 	bl	80012b8 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80010b0:	6823      	ldr	r3, [r4, #0]
 80010b2:	f06f 020c 	mvn.w	r2, #12
 80010b6:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80010b8:	6823      	ldr	r3, [r4, #0]
 80010ba:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80010bc:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80010be:	07c9      	lsls	r1, r1, #31
 80010c0:	d50f      	bpl.n	80010e2 <HAL_ADC_IRQHandler+0x100>
 80010c2:	0655      	lsls	r5, r2, #25
 80010c4:	d50d      	bpl.n	80010e2 <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	07d8      	lsls	r0, r3, #31
 80010ca:	d50a      	bpl.n	80010e2 <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80010cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d2:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80010d4:	4620      	mov	r0, r4
 80010d6:	f7ff ff82 	bl	8000fde <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80010da:	6823      	ldr	r3, [r4, #0]
 80010dc:	f06f 0201 	mvn.w	r2, #1
 80010e0:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80010e2:	6823      	ldr	r3, [r4, #0]
 80010e4:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80010e6:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80010e8:	0689      	lsls	r1, r1, #26
 80010ea:	d50d      	bpl.n	8001108 <HAL_ADC_IRQHandler+0x126>
 80010ec:	0152      	lsls	r2, r2, #5
 80010ee:	d50b      	bpl.n	8001108 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80010f0:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010f2:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80010f6:	f042 0202 	orr.w	r2, r2, #2
 80010fa:	6462      	str	r2, [r4, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 80010fc:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010fe:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8001100:	f7ff ff6e 	bl	8000fe0 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001104:	6823      	ldr	r3, [r4, #0]
 8001106:	601d      	str	r5, [r3, #0]
 8001108:	bd38      	pop	{r3, r4, r5, pc}

0800110a <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800110a:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800110c:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800110e:	2340      	movs	r3, #64	; 0x40
 8001110:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001112:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800111a:	f7ff ff61 	bl	8000fe0 <HAL_ADC_ErrorCallback>
 800111e:	bd08      	pop	{r3, pc}

08001120 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001120:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001122:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001124:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8001128:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800112a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800112c:	d123      	bne.n	8001176 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800112e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001132:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	6891      	ldr	r1, [r2, #8]
 8001138:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 800113c:	d117      	bne.n	800116e <ADC_DMAConvCplt+0x4e>
 800113e:	7e19      	ldrb	r1, [r3, #24]
 8001140:	b9a9      	cbnz	r1, 800116e <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001142:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001144:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8001148:	d002      	beq.n	8001150 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800114a:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800114c:	0548      	lsls	r0, r1, #21
 800114e:	d40e      	bmi.n	800116e <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001150:	6851      	ldr	r1, [r2, #4]
 8001152:	f021 0120 	bic.w	r1, r1, #32
 8001156:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001158:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800115a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800115e:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001160:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001162:	04d1      	lsls	r1, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001164:	bf5e      	ittt	pl
 8001166:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 8001168:	f042 0201 	orrpl.w	r2, r2, #1
 800116c:	641a      	strpl	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff2e 	bl	8000fd0 <HAL_ADC_ConvCpltCallback>
 8001174:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001176:	06d2      	lsls	r2, r2, #27
 8001178:	d503      	bpl.n	8001182 <ADC_DMAConvCplt+0x62>
      HAL_ADC_ErrorCallback(hadc);
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff30 	bl	8000fe0 <HAL_ADC_ErrorCallback>
 8001180:	bd10      	pop	{r4, pc}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	4718      	bx	r3

0800118c <HAL_ADC_ConfigChannel>:
{
 800118c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800118e:	2300      	movs	r3, #0
 8001190:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001192:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001196:	2b01      	cmp	r3, #1
 8001198:	f000 8083 	beq.w	80012a2 <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 800119c:	680d      	ldr	r5, [r1, #0]
 800119e:	6804      	ldr	r4, [r0, #0]
 80011a0:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 80011a2:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011a4:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80011a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80011aa:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011ac:	d92a      	bls.n	8001204 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011ae:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80011b2:	68e7      	ldr	r7, [r4, #12]
 80011b4:	3b1e      	subs	r3, #30
 80011b6:	f04f 0e07 	mov.w	lr, #7
 80011ba:	fa0e fe03 	lsl.w	lr, lr, r3
 80011be:	ea27 070e 	bic.w	r7, r7, lr
 80011c2:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011c4:	68e7      	ldr	r7, [r4, #12]
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	433b      	orrs	r3, r7
 80011cc:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 80011ce:	684a      	ldr	r2, [r1, #4]
 80011d0:	2a06      	cmp	r2, #6
 80011d2:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80011d6:	d825      	bhi.n	8001224 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011d8:	4413      	add	r3, r2
 80011da:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80011dc:	1f59      	subs	r1, r3, #5
 80011de:	231f      	movs	r3, #31
 80011e0:	408b      	lsls	r3, r1
 80011e2:	ea27 0303 	bic.w	r3, r7, r3
 80011e6:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011e8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80011ea:	fa06 f101 	lsl.w	r1, r6, r1
 80011ee:	4311      	orrs	r1, r2
 80011f0:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011f2:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <HAL_ADC_ConfigChannel+0x11c>)
 80011f4:	429c      	cmp	r4, r3
 80011f6:	d034      	beq.n	8001262 <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 80011f8:	2300      	movs	r3, #0
 80011fa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80011fe:	4618      	mov	r0, r3
}
 8001200:	b003      	add	sp, #12
 8001202:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001204:	6927      	ldr	r7, [r4, #16]
 8001206:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800120a:	f04f 0e07 	mov.w	lr, #7
 800120e:	fa0e fe03 	lsl.w	lr, lr, r3
 8001212:	ea27 070e 	bic.w	r7, r7, lr
 8001216:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001218:	6927      	ldr	r7, [r4, #16]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	433b      	orrs	r3, r7
 8001220:	6123      	str	r3, [r4, #16]
 8001222:	e7d4      	b.n	80011ce <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8001224:	2a0c      	cmp	r2, #12
 8001226:	d80e      	bhi.n	8001246 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001228:	4413      	add	r3, r2
 800122a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800122c:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8001230:	231f      	movs	r3, #31
 8001232:	4093      	lsls	r3, r2
 8001234:	ea21 0303 	bic.w	r3, r1, r3
 8001238:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800123a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800123c:	fa06 f202 	lsl.w	r2, r6, r2
 8001240:	431a      	orrs	r2, r3
 8001242:	6322      	str	r2, [r4, #48]	; 0x30
 8001244:	e7d5      	b.n	80011f2 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001246:	4413      	add	r3, r2
 8001248:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800124a:	3b41      	subs	r3, #65	; 0x41
 800124c:	221f      	movs	r2, #31
 800124e:	409a      	lsls	r2, r3
 8001250:	ea21 0202 	bic.w	r2, r1, r2
 8001254:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001256:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001258:	fa06 f103 	lsl.w	r1, r6, r3
 800125c:	4311      	orrs	r1, r2
 800125e:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001260:	e7c7      	b.n	80011f2 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001262:	2d12      	cmp	r5, #18
 8001264:	d104      	bne.n	8001270 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001266:	4a11      	ldr	r2, [pc, #68]	; (80012ac <HAL_ADC_ConfigChannel+0x120>)
 8001268:	6853      	ldr	r3, [r2, #4]
 800126a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800126e:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001270:	f1a5 0310 	sub.w	r3, r5, #16
 8001274:	2b01      	cmp	r3, #1
 8001276:	d8bf      	bhi.n	80011f8 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001278:	4a0c      	ldr	r2, [pc, #48]	; (80012ac <HAL_ADC_ConfigChannel+0x120>)
 800127a:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800127c:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800127e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001282:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001284:	d1b8      	bne.n	80011f8 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <HAL_ADC_ConfigChannel+0x124>)
 8001288:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <HAL_ADC_ConfigChannel+0x128>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001290:	230a      	movs	r3, #10
 8001292:	4353      	muls	r3, r2
        counter--;
 8001294:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001296:	9b01      	ldr	r3, [sp, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0ad      	beq.n	80011f8 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 800129c:	9b01      	ldr	r3, [sp, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	e7f8      	b.n	8001294 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 80012a2:	2002      	movs	r0, #2
 80012a4:	e7ac      	b.n	8001200 <HAL_ADC_ConfigChannel+0x74>
 80012a6:	bf00      	nop
 80012a8:	40012000 	.word	0x40012000
 80012ac:	40012300 	.word	0x40012300
 80012b0:	20000008 	.word	0x20000008
 80012b4:	000f4240 	.word	0x000f4240

080012b8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012b8:	4770      	bx	lr
	...

080012bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012bc:	4a07      	ldr	r2, [pc, #28]	; (80012dc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80012be:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012c4:	041b      	lsls	r3, r3, #16
 80012c6:	0c1b      	lsrs	r3, r3, #16
 80012c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012cc:	0200      	lsls	r0, r0, #8
 80012ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80012d6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80012d8:	60d3      	str	r3, [r2, #12]
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e0:	4b17      	ldr	r3, [pc, #92]	; (8001340 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012e2:	b530      	push	{r4, r5, lr}
 80012e4:	68dc      	ldr	r4, [r3, #12]
 80012e6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ea:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ee:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	bf28      	it	cs
 80012f4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	f04f 0501 	mov.w	r5, #1
 80012fc:	fa05 f303 	lsl.w	r3, r5, r3
 8001300:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001304:	bf8c      	ite	hi
 8001306:	3c03      	subhi	r4, #3
 8001308:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130a:	4019      	ands	r1, r3
 800130c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800130e:	fa05 f404 	lsl.w	r4, r5, r4
 8001312:	3c01      	subs	r4, #1
 8001314:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001316:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	ea42 0201 	orr.w	r2, r2, r1
 800131c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001320:	bfad      	iteet	ge
 8001322:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001326:	f000 000f 	andlt.w	r0, r0, #15
 800132a:	4b06      	ldrlt	r3, [pc, #24]	; (8001344 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001330:	bfb5      	itete	lt
 8001332:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001336:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800133c:	bd30      	pop	{r4, r5, pc}
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00
 8001344:	e000ed14 	.word	0xe000ed14

08001348 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001348:	2800      	cmp	r0, #0
 800134a:	db08      	blt.n	800135e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134c:	0942      	lsrs	r2, r0, #5
 800134e:	2301      	movs	r3, #1
 8001350:	f000 001f 	and.w	r0, r0, #31
 8001354:	fa03 f000 	lsl.w	r0, r3, r0
 8001358:	4b01      	ldr	r3, [pc, #4]	; (8001360 <HAL_NVIC_EnableIRQ+0x18>)
 800135a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800135e:	4770      	bx	lr
 8001360:	e000e100 	.word	0xe000e100

08001364 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001364:	3801      	subs	r0, #1
 8001366:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800136a:	d20a      	bcs.n	8001382 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136e:	4a07      	ldr	r2, [pc, #28]	; (800138c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001370:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001372:	21f0      	movs	r1, #240	; 0xf0
 8001374:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001378:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800137c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001382:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000e010 	.word	0xe000e010
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001390:	6803      	ldr	r3, [r0, #0]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001398:	f023 0303 	bic.w	r3, r3, #3
 800139c:	2118      	movs	r1, #24
 800139e:	3a10      	subs	r2, #16
 80013a0:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013a4:	4904      	ldr	r1, [pc, #16]	; (80013b8 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80013a6:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013a8:	bf88      	it	hi
 80013aa:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013ac:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013ae:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013b0:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 80013b2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	08004444 	.word	0x08004444

080013bc <HAL_DMA_Init>:
{
 80013bc:	b570      	push	{r4, r5, r6, lr}
 80013be:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80013c0:	f7ff fcc6 	bl	8000d50 <HAL_GetTick>
 80013c4:	4605      	mov	r5, r0
  if(hdma == NULL)
 80013c6:	2c00      	cmp	r4, #0
 80013c8:	d071      	beq.n	80014ae <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80013ca:	2300      	movs	r3, #0
 80013cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80013d0:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80013d2:	2302      	movs	r3, #2
 80013d4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80013d8:	6813      	ldr	r3, [r2, #0]
 80013da:	f023 0301 	bic.w	r3, r3, #1
 80013de:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e0:	6821      	ldr	r1, [r4, #0]
 80013e2:	680b      	ldr	r3, [r1, #0]
 80013e4:	07d8      	lsls	r0, r3, #31
 80013e6:	d43c      	bmi.n	8001462 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80013e8:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013ea:	4d32      	ldr	r5, [pc, #200]	; (80014b4 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013ec:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ee:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013f0:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013f2:	68a3      	ldr	r3, [r4, #8]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	68e2      	ldr	r2, [r4, #12]
 80013f8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013fa:	6922      	ldr	r2, [r4, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	6962      	ldr	r2, [r4, #20]
 8001400:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001402:	69e2      	ldr	r2, [r4, #28]
 8001404:	4303      	orrs	r3, r0
 8001406:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001408:	6a22      	ldr	r2, [r4, #32]
 800140a:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800140c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800140e:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001410:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001414:	bf01      	itttt	eq
 8001416:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8001418:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 800141a:	4335      	orreq	r5, r6
 800141c:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 800141e:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001420:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001422:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001424:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001428:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800142c:	d10b      	bne.n	8001446 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 800142e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001430:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001432:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001434:	b13d      	cbz	r5, 8001446 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001436:	b9f8      	cbnz	r0, 8001478 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001438:	2a01      	cmp	r2, #1
 800143a:	d02d      	beq.n	8001498 <HAL_DMA_Init+0xdc>
 800143c:	d301      	bcc.n	8001442 <HAL_DMA_Init+0x86>
 800143e:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001440:	d101      	bne.n	8001446 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001442:	01ea      	lsls	r2, r5, #7
 8001444:	d42b      	bmi.n	800149e <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8001446:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001448:	4620      	mov	r0, r4
 800144a:	f7ff ffa1 	bl	8001390 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800144e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001450:	233f      	movs	r3, #63	; 0x3f
 8001452:	4093      	lsls	r3, r2
 8001454:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001456:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001458:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800145a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800145c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001460:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001462:	f7ff fc75 	bl	8000d50 <HAL_GetTick>
 8001466:	1b40      	subs	r0, r0, r5
 8001468:	2805      	cmp	r0, #5
 800146a:	d9b9      	bls.n	80013e0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800146c:	2320      	movs	r3, #32
 800146e:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001470:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8001472:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001476:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001478:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800147c:	d113      	bne.n	80014a6 <HAL_DMA_Init+0xea>
    switch (tmp)
 800147e:	2a03      	cmp	r2, #3
 8001480:	d8e1      	bhi.n	8001446 <HAL_DMA_Init+0x8a>
 8001482:	a001      	add	r0, pc, #4	; (adr r0, 8001488 <HAL_DMA_Init+0xcc>)
 8001484:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001488:	0800149f 	.word	0x0800149f
 800148c:	08001443 	.word	0x08001443
 8001490:	0800149f 	.word	0x0800149f
 8001494:	08001499 	.word	0x08001499
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001498:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800149c:	d1d3      	bne.n	8001446 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800149e:	2340      	movs	r3, #64	; 0x40
 80014a0:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80014a2:	2001      	movs	r0, #1
 80014a4:	e7e5      	b.n	8001472 <HAL_DMA_Init+0xb6>
    switch (tmp)
 80014a6:	2a02      	cmp	r2, #2
 80014a8:	d9f9      	bls.n	800149e <HAL_DMA_Init+0xe2>
 80014aa:	2a03      	cmp	r2, #3
 80014ac:	e7c8      	b.n	8001440 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80014ae:	2001      	movs	r0, #1
 80014b0:	bd70      	pop	{r4, r5, r6, pc}
 80014b2:	bf00      	nop
 80014b4:	f010803f 	.word	0xf010803f

080014b8 <HAL_DMA_Start_IT>:
{
 80014b8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80014ba:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80014be:	2c01      	cmp	r4, #1
 80014c0:	d036      	beq.n	8001530 <HAL_DMA_Start_IT+0x78>
 80014c2:	2401      	movs	r4, #1
 80014c4:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80014c8:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014cc:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 80014ce:	2c01      	cmp	r4, #1
 80014d0:	f04f 0500 	mov.w	r5, #0
 80014d4:	f04f 0402 	mov.w	r4, #2
 80014d8:	d128      	bne.n	800152c <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 80014da:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80014de:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014e0:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80014e2:	6825      	ldr	r5, [r4, #0]
 80014e4:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80014e8:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80014ea:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014ec:	6883      	ldr	r3, [r0, #8]
 80014ee:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80014f0:	bf0e      	itee	eq
 80014f2:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80014f4:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80014f6:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014f8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80014fa:	bf08      	it	eq
 80014fc:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014fe:	233f      	movs	r3, #63	; 0x3f
 8001500:	4093      	lsls	r3, r2
 8001502:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001504:	6823      	ldr	r3, [r4, #0]
 8001506:	f043 0316 	orr.w	r3, r3, #22
 800150a:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800150c:	6963      	ldr	r3, [r4, #20]
 800150e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001512:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001514:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001516:	b11b      	cbz	r3, 8001520 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001518:	6823      	ldr	r3, [r4, #0]
 800151a:	f043 0308 	orr.w	r3, r3, #8
 800151e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001520:	6823      	ldr	r3, [r4, #0]
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001528:	2000      	movs	r0, #0
 800152a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 800152c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8001530:	2002      	movs	r0, #2
}
 8001532:	bd70      	pop	{r4, r5, r6, pc}

08001534 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001534:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001538:	2b02      	cmp	r3, #2
 800153a:	d003      	beq.n	8001544 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001540:	2001      	movs	r0, #1
 8001542:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8001544:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001546:	2305      	movs	r3, #5
 8001548:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800154c:	6813      	ldr	r3, [r2, #0]
 800154e:	f023 0301 	bic.w	r3, r3, #1
 8001552:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001554:	2000      	movs	r0, #0
}
 8001556:	4770      	bx	lr

08001558 <HAL_DMA_IRQHandler>:
{
 8001558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800155a:	2300      	movs	r3, #0
 800155c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800155e:	4b5a      	ldr	r3, [pc, #360]	; (80016c8 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001560:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8001562:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001564:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001566:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001568:	2208      	movs	r2, #8
 800156a:	409a      	lsls	r2, r3
 800156c:	4216      	tst	r6, r2
{
 800156e:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001570:	d00c      	beq.n	800158c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001572:	6801      	ldr	r1, [r0, #0]
 8001574:	6808      	ldr	r0, [r1, #0]
 8001576:	0740      	lsls	r0, r0, #29
 8001578:	d508      	bpl.n	800158c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800157a:	6808      	ldr	r0, [r1, #0]
 800157c:	f020 0004 	bic.w	r0, r0, #4
 8001580:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001582:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001584:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001586:	f042 0201 	orr.w	r2, r2, #1
 800158a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800158c:	2201      	movs	r2, #1
 800158e:	409a      	lsls	r2, r3
 8001590:	4216      	tst	r6, r2
 8001592:	d008      	beq.n	80015a6 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001594:	6821      	ldr	r1, [r4, #0]
 8001596:	6949      	ldr	r1, [r1, #20]
 8001598:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800159a:	bf41      	itttt	mi
 800159c:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800159e:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80015a0:	f042 0202 	orrmi.w	r2, r2, #2
 80015a4:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015a6:	2204      	movs	r2, #4
 80015a8:	409a      	lsls	r2, r3
 80015aa:	4216      	tst	r6, r2
 80015ac:	d008      	beq.n	80015c0 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015ae:	6821      	ldr	r1, [r4, #0]
 80015b0:	6809      	ldr	r1, [r1, #0]
 80015b2:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015b4:	bf41      	itttt	mi
 80015b6:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015b8:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80015ba:	f042 0204 	orrmi.w	r2, r2, #4
 80015be:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015c0:	2210      	movs	r2, #16
 80015c2:	409a      	lsls	r2, r3
 80015c4:	4216      	tst	r6, r2
 80015c6:	d010      	beq.n	80015ea <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015c8:	6823      	ldr	r3, [r4, #0]
 80015ca:	6819      	ldr	r1, [r3, #0]
 80015cc:	0709      	lsls	r1, r1, #28
 80015ce:	d50c      	bpl.n	80015ea <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015d0:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	0350      	lsls	r0, r2, #13
 80015d6:	d535      	bpl.n	8001644 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	0319      	lsls	r1, r3, #12
 80015dc:	d401      	bmi.n	80015e2 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80015de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015e0:	e000      	b.n	80015e4 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015e2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80015e4:	b10b      	cbz	r3, 80015ea <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80015e6:	4620      	mov	r0, r4
 80015e8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015ea:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80015ec:	2220      	movs	r2, #32
 80015ee:	408a      	lsls	r2, r1
 80015f0:	4216      	tst	r6, r2
 80015f2:	d038      	beq.n	8001666 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015f4:	6823      	ldr	r3, [r4, #0]
 80015f6:	6818      	ldr	r0, [r3, #0]
 80015f8:	06c6      	lsls	r6, r0, #27
 80015fa:	d534      	bpl.n	8001666 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015fc:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015fe:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001602:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001604:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001606:	d125      	bne.n	8001654 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001608:	f022 0216 	bic.w	r2, r2, #22
 800160c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800160e:	695a      	ldr	r2, [r3, #20]
 8001610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001614:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001616:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001618:	b90a      	cbnz	r2, 800161e <HAL_DMA_IRQHandler+0xc6>
 800161a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800161c:	b11a      	cbz	r2, 8001626 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	f022 0208 	bic.w	r2, r2, #8
 8001624:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001626:	233f      	movs	r3, #63	; 0x3f
 8001628:	408b      	lsls	r3, r1
 800162a:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 800162c:	2300      	movs	r3, #0
 800162e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001632:	2301      	movs	r3, #1
 8001634:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001638:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800163a:	b10b      	cbz	r3, 8001640 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 800163c:	4620      	mov	r0, r4
 800163e:	4798      	blx	r3
}
 8001640:	b003      	add	sp, #12
 8001642:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001648:	bf5e      	ittt	pl
 800164a:	681a      	ldrpl	r2, [r3, #0]
 800164c:	f022 0208 	bicpl.w	r2, r2, #8
 8001650:	601a      	strpl	r2, [r3, #0]
 8001652:	e7c4      	b.n	80015de <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001654:	0350      	lsls	r0, r2, #13
 8001656:	d528      	bpl.n	80016aa <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	0319      	lsls	r1, r3, #12
 800165c:	d432      	bmi.n	80016c4 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 800165e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001660:	b10b      	cbz	r3, 8001666 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8001662:	4620      	mov	r0, r4
 8001664:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001666:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0e9      	beq.n	8001640 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800166c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800166e:	07da      	lsls	r2, r3, #31
 8001670:	d519      	bpl.n	80016a6 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001672:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8001674:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8001676:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800167a:	6813      	ldr	r3, [r2, #0]
 800167c:	f023 0301 	bic.w	r3, r3, #1
 8001680:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001682:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001686:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 800168a:	9b01      	ldr	r3, [sp, #4]
 800168c:	3301      	adds	r3, #1
 800168e:	429f      	cmp	r7, r3
 8001690:	9301      	str	r3, [sp, #4]
 8001692:	d302      	bcc.n	800169a <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001694:	6813      	ldr	r3, [r2, #0]
 8001696:	07db      	lsls	r3, r3, #31
 8001698:	d4f7      	bmi.n	800168a <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 800169a:	2300      	movs	r3, #0
 800169c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80016a0:	2301      	movs	r3, #1
 80016a2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80016a6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80016a8:	e7c7      	b.n	800163a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80016b0:	d108      	bne.n	80016c4 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016b2:	6819      	ldr	r1, [r3, #0]
 80016b4:	f021 0110 	bic.w	r1, r1, #16
 80016b8:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80016ba:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80016bc:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80016c0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80016c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016c6:	e7cb      	b.n	8001660 <HAL_DMA_IRQHandler+0x108>
 80016c8:	20000008 	.word	0x20000008

080016cc <HAL_DMA_GetState>:
  return hdma->State;
 80016cc:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80016d0:	4770      	bx	lr
	...

080016d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016d8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016da:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016dc:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800187c <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016e0:	4a64      	ldr	r2, [pc, #400]	; (8001874 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016e2:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 80016e4:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e8:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ea:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80016ec:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016f0:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 80016f4:	42b7      	cmp	r7, r6
 80016f6:	f040 80ad 	bne.w	8001854 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016fa:	684c      	ldr	r4, [r1, #4]
 80016fc:	f024 0a10 	bic.w	sl, r4, #16
 8001700:	f1ba 0f02 	cmp.w	sl, #2
 8001704:	d116      	bne.n	8001734 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8001706:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800170a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800170e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001712:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001716:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800171a:	f04f 0e0f 	mov.w	lr, #15
 800171e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001722:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001726:	690d      	ldr	r5, [r1, #16]
 8001728:	fa05 f50b 	lsl.w	r5, r5, fp
 800172c:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001730:	f8cc 5020 	str.w	r5, [ip, #32]
 8001734:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001738:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800173a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800173e:	fa05 f50c 	lsl.w	r5, r5, ip
 8001742:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001744:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001748:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800174c:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001750:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001754:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001758:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800175c:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 800175e:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001762:	d815      	bhi.n	8001790 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 8001764:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001768:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 800176c:	68cd      	ldr	r5, [r1, #12]
 800176e:	fa05 fa0c 	lsl.w	sl, r5, ip
 8001772:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 8001776:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 800177a:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800177e:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001782:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8001786:	fa0e fe03 	lsl.w	lr, lr, r3
 800178a:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 800178e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001790:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001792:	9d00      	ldr	r5, [sp, #0]
 8001794:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001796:	688f      	ldr	r7, [r1, #8]
 8001798:	fa07 f70c 	lsl.w	r7, r7, ip
 800179c:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800179e:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017a0:	00e5      	lsls	r5, r4, #3
 80017a2:	d557      	bpl.n	8001854 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a4:	f04f 0b00 	mov.w	fp, #0
 80017a8:	f8cd b00c 	str.w	fp, [sp, #12]
 80017ac:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017b0:	4d31      	ldr	r5, [pc, #196]	; (8001878 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80017b6:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80017ba:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80017be:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80017c2:	9703      	str	r7, [sp, #12]
 80017c4:	9f03      	ldr	r7, [sp, #12]
 80017c6:	f023 0703 	bic.w	r7, r3, #3
 80017ca:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80017ce:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017d2:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80017d6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017da:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80017de:	f04f 0e0f 	mov.w	lr, #15
 80017e2:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017e6:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017e8:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ec:	d039      	beq.n	8001862 <HAL_GPIO_Init+0x18e>
 80017ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017f2:	42a8      	cmp	r0, r5
 80017f4:	d037      	beq.n	8001866 <HAL_GPIO_Init+0x192>
 80017f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017fa:	42a8      	cmp	r0, r5
 80017fc:	d035      	beq.n	800186a <HAL_GPIO_Init+0x196>
 80017fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001802:	42a8      	cmp	r0, r5
 8001804:	d033      	beq.n	800186e <HAL_GPIO_Init+0x19a>
 8001806:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800180a:	42a8      	cmp	r0, r5
 800180c:	bf14      	ite	ne
 800180e:	2507      	movne	r5, #7
 8001810:	2504      	moveq	r5, #4
 8001812:	fa05 f50c 	lsl.w	r5, r5, ip
 8001816:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800181a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800181c:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800181e:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001820:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001824:	bf0c      	ite	eq
 8001826:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001828:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800182a:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800182c:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800182e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001832:	bf0c      	ite	eq
 8001834:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001836:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001838:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800183a:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800183c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001840:	bf0c      	ite	eq
 8001842:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001844:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001846:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001848:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800184a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800184c:	bf54      	ite	pl
 800184e:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001850:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001852:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001854:	3301      	adds	r3, #1
 8001856:	2b10      	cmp	r3, #16
 8001858:	f47f af47 	bne.w	80016ea <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800185c:	b005      	add	sp, #20
 800185e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001862:	465d      	mov	r5, fp
 8001864:	e7d5      	b.n	8001812 <HAL_GPIO_Init+0x13e>
 8001866:	2501      	movs	r5, #1
 8001868:	e7d3      	b.n	8001812 <HAL_GPIO_Init+0x13e>
 800186a:	2502      	movs	r5, #2
 800186c:	e7d1      	b.n	8001812 <HAL_GPIO_Init+0x13e>
 800186e:	2503      	movs	r5, #3
 8001870:	e7cf      	b.n	8001812 <HAL_GPIO_Init+0x13e>
 8001872:	bf00      	nop
 8001874:	40013c00 	.word	0x40013c00
 8001878:	40020000 	.word	0x40020000
 800187c:	40023800 	.word	0x40023800

08001880 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001880:	b10a      	cbz	r2, 8001886 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001882:	6181      	str	r1, [r0, #24]
 8001884:	4770      	bx	lr
 8001886:	0409      	lsls	r1, r1, #16
 8001888:	e7fb      	b.n	8001882 <HAL_GPIO_WritePin+0x2>

0800188a <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800188a:	6801      	ldr	r1, [r0, #0]
 800188c:	694b      	ldr	r3, [r1, #20]
 800188e:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	d010      	beq.n	80018ba <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001898:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800189c:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 800189e:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80018a0:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80018a2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018a6:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80018aa:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80018b6:	2001      	movs	r0, #1
 80018b8:	4770      	bx	lr
  }
  return HAL_OK;
 80018ba:	4618      	mov	r0, r3
}
 80018bc:	4770      	bx	lr

080018be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80018be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018c2:	4604      	mov	r4, r0
 80018c4:	4617      	mov	r7, r2
 80018c6:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018c8:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80018cc:	b28e      	uxth	r6, r1
 80018ce:	6825      	ldr	r5, [r4, #0]
 80018d0:	f1b8 0f01 	cmp.w	r8, #1
 80018d4:	bf0c      	ite	eq
 80018d6:	696b      	ldreq	r3, [r5, #20]
 80018d8:	69ab      	ldrne	r3, [r5, #24]
 80018da:	ea36 0303 	bics.w	r3, r6, r3
 80018de:	bf14      	ite	ne
 80018e0:	2001      	movne	r0, #1
 80018e2:	2000      	moveq	r0, #0
 80018e4:	b908      	cbnz	r0, 80018ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80018e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018ea:	696b      	ldr	r3, [r5, #20]
 80018ec:	055a      	lsls	r2, r3, #21
 80018ee:	d516      	bpl.n	800191e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018f0:	682b      	ldr	r3, [r5, #0]
 80018f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018f6:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018f8:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80018fc:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80018fe:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001900:	2300      	movs	r3, #0
 8001902:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001904:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001908:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800190c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800190e:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001912:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001914:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001918:	2001      	movs	r0, #1
 800191a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800191e:	1c7b      	adds	r3, r7, #1
 8001920:	d0d5      	beq.n	80018ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001922:	f7ff fa15 	bl	8000d50 <HAL_GetTick>
 8001926:	eba0 0009 	sub.w	r0, r0, r9
 800192a:	4287      	cmp	r7, r0
 800192c:	d301      	bcc.n	8001932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 800192e:	2f00      	cmp	r7, #0
 8001930:	d1cd      	bne.n	80018ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001932:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001934:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001936:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001938:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800193c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001940:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001942:	f042 0220 	orr.w	r2, r2, #32
 8001946:	e7e4      	b.n	8001912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

08001948 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001948:	b570      	push	{r4, r5, r6, lr}
 800194a:	4604      	mov	r4, r0
 800194c:	460d      	mov	r5, r1
 800194e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001950:	6823      	ldr	r3, [r4, #0]
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	075b      	lsls	r3, r3, #29
 8001956:	d501      	bpl.n	800195c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001958:	2000      	movs	r0, #0
 800195a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800195c:	4620      	mov	r0, r4
 800195e:	f7ff ff94 	bl	800188a <I2C_IsAcknowledgeFailed>
 8001962:	b9a8      	cbnz	r0, 8001990 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001964:	1c6a      	adds	r2, r5, #1
 8001966:	d0f3      	beq.n	8001950 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001968:	f7ff f9f2 	bl	8000d50 <HAL_GetTick>
 800196c:	1b80      	subs	r0, r0, r6
 800196e:	4285      	cmp	r5, r0
 8001970:	d301      	bcc.n	8001976 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001972:	2d00      	cmp	r5, #0
 8001974:	d1ec      	bne.n	8001950 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001976:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001978:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800197a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800197c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001980:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001984:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001986:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800198a:	f042 0220 	orr.w	r2, r2, #32
 800198e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001990:	2001      	movs	r0, #1
}
 8001992:	bd70      	pop	{r4, r5, r6, pc}

08001994 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001994:	b570      	push	{r4, r5, r6, lr}
 8001996:	4604      	mov	r4, r0
 8001998:	460d      	mov	r5, r1
 800199a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800199c:	6820      	ldr	r0, [r4, #0]
 800199e:	6943      	ldr	r3, [r0, #20]
 80019a0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80019a4:	d001      	beq.n	80019aa <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80019a6:	2000      	movs	r0, #0
}
 80019a8:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80019aa:	6942      	ldr	r2, [r0, #20]
 80019ac:	06d2      	lsls	r2, r2, #27
 80019ae:	d50e      	bpl.n	80019ce <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019b0:	f06f 0210 	mvn.w	r2, #16
 80019b4:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80019b6:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80019b8:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80019ba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80019c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019c4:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80019c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80019ca:	2001      	movs	r0, #1
 80019cc:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ce:	f7ff f9bf 	bl	8000d50 <HAL_GetTick>
 80019d2:	1b80      	subs	r0, r0, r6
 80019d4:	42a8      	cmp	r0, r5
 80019d6:	d801      	bhi.n	80019dc <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 80019d8:	2d00      	cmp	r5, #0
 80019da:	d1df      	bne.n	800199c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80019dc:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80019de:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80019e0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80019e2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80019ec:	f042 0220 	orr.w	r2, r2, #32
 80019f0:	e7e8      	b.n	80019c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

080019f2 <I2C_WaitOnFlagUntilTimeout>:
{
 80019f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019f6:	9e08      	ldr	r6, [sp, #32]
 80019f8:	4604      	mov	r4, r0
 80019fa:	4690      	mov	r8, r2
 80019fc:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019fe:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001a02:	b28d      	uxth	r5, r1
 8001a04:	6823      	ldr	r3, [r4, #0]
 8001a06:	f1b9 0f01 	cmp.w	r9, #1
 8001a0a:	bf0c      	ite	eq
 8001a0c:	695b      	ldreq	r3, [r3, #20]
 8001a0e:	699b      	ldrne	r3, [r3, #24]
 8001a10:	ea35 0303 	bics.w	r3, r5, r3
 8001a14:	bf0c      	ite	eq
 8001a16:	2301      	moveq	r3, #1
 8001a18:	2300      	movne	r3, #0
 8001a1a:	4543      	cmp	r3, r8
 8001a1c:	d002      	beq.n	8001a24 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001a1e:	2000      	movs	r0, #0
}
 8001a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001a24:	1c7b      	adds	r3, r7, #1
 8001a26:	d0ed      	beq.n	8001a04 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a28:	f7ff f992 	bl	8000d50 <HAL_GetTick>
 8001a2c:	1b80      	subs	r0, r0, r6
 8001a2e:	4287      	cmp	r7, r0
 8001a30:	d301      	bcc.n	8001a36 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001a32:	2f00      	cmp	r7, #0
 8001a34:	d1e6      	bne.n	8001a04 <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a36:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a38:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a3a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a3c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a40:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a44:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001a46:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a4a:	f042 0220 	orr.w	r2, r2, #32
 8001a4e:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001a50:	2001      	movs	r0, #1
 8001a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001a56 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001a56:	b570      	push	{r4, r5, r6, lr}
 8001a58:	4604      	mov	r4, r0
 8001a5a:	460d      	mov	r5, r1
 8001a5c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a5e:	6823      	ldr	r3, [r4, #0]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	061b      	lsls	r3, r3, #24
 8001a64:	d501      	bpl.n	8001a6a <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8001a66:	2000      	movs	r0, #0
 8001a68:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	f7ff ff0d 	bl	800188a <I2C_IsAcknowledgeFailed>
 8001a70:	b9a8      	cbnz	r0, 8001a9e <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001a72:	1c6a      	adds	r2, r5, #1
 8001a74:	d0f3      	beq.n	8001a5e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a76:	f7ff f96b 	bl	8000d50 <HAL_GetTick>
 8001a7a:	1b80      	subs	r0, r0, r6
 8001a7c:	4285      	cmp	r5, r0
 8001a7e:	d301      	bcc.n	8001a84 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001a80:	2d00      	cmp	r5, #0
 8001a82:	d1ec      	bne.n	8001a5e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a84:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a86:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a88:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a8a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a8e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a92:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001a94:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a98:	f042 0220 	orr.w	r2, r2, #32
 8001a9c:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001a9e:	2001      	movs	r0, #1
}
 8001aa0:	bd70      	pop	{r4, r5, r6, pc}
	...

08001aa4 <HAL_I2C_Init>:
{
 8001aa4:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8001aa6:	4604      	mov	r4, r0
 8001aa8:	b908      	cbnz	r0, 8001aae <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001aaa:	2001      	movs	r0, #1
 8001aac:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001ab2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ab6:	b91b      	cbnz	r3, 8001ac0 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001ab8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001abc:	f002 fae4 	bl	8004088 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8001ac0:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac2:	2324      	movs	r3, #36	; 0x24
 8001ac4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001ac8:	6813      	ldr	r3, [r2, #0]
 8001aca:	f023 0301 	bic.w	r3, r3, #1
 8001ace:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ad0:	f001 fab6 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ad4:	6865      	ldr	r5, [r4, #4]
 8001ad6:	4b41      	ldr	r3, [pc, #260]	; (8001bdc <HAL_I2C_Init+0x138>)
 8001ad8:	429d      	cmp	r5, r3
 8001ada:	d84d      	bhi.n	8001b78 <HAL_I2C_Init+0xd4>
 8001adc:	4b40      	ldr	r3, [pc, #256]	; (8001be0 <HAL_I2C_Init+0x13c>)
 8001ade:	4298      	cmp	r0, r3
 8001ae0:	d9e3      	bls.n	8001aaa <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ae2:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001ae4:	493f      	ldr	r1, [pc, #252]	; (8001be4 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ae6:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001ae8:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001aec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001af0:	430b      	orrs	r3, r1
 8001af2:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001af4:	6a13      	ldr	r3, [r2, #32]
 8001af6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001afa:	3101      	adds	r1, #1
 8001afc:	4319      	orrs	r1, r3
 8001afe:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b00:	69d1      	ldr	r1, [r2, #28]
 8001b02:	4b36      	ldr	r3, [pc, #216]	; (8001bdc <HAL_I2C_Init+0x138>)
 8001b04:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001b08:	429d      	cmp	r5, r3
 8001b0a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001b0e:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8001b12:	d848      	bhi.n	8001ba6 <HAL_I2C_Init+0x102>
 8001b14:	006d      	lsls	r5, r5, #1
 8001b16:	fbb0 f0f5 	udiv	r0, r0, r5
 8001b1a:	3001      	adds	r0, #1
 8001b1c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	bf38      	it	cc
 8001b24:	2304      	movcc	r3, #4
 8001b26:	430b      	orrs	r3, r1
 8001b28:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b2a:	6811      	ldr	r1, [r2, #0]
 8001b2c:	6a20      	ldr	r0, [r4, #32]
 8001b2e:	69e3      	ldr	r3, [r4, #28]
 8001b30:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001b34:	4303      	orrs	r3, r0
 8001b36:	430b      	orrs	r3, r1
 8001b38:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b3a:	6891      	ldr	r1, [r2, #8]
 8001b3c:	68e0      	ldr	r0, [r4, #12]
 8001b3e:	6923      	ldr	r3, [r4, #16]
 8001b40:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001b44:	4303      	orrs	r3, r0
 8001b46:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001b4a:	430b      	orrs	r3, r1
 8001b4c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b4e:	68d1      	ldr	r1, [r2, #12]
 8001b50:	69a0      	ldr	r0, [r4, #24]
 8001b52:	6963      	ldr	r3, [r4, #20]
 8001b54:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001b58:	4303      	orrs	r3, r0
 8001b5a:	430b      	orrs	r3, r1
 8001b5c:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001b5e:	6813      	ldr	r3, [r2, #0]
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b66:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001b68:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b6a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b6c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b70:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b72:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001b76:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_I2C_Init+0x144>)
 8001b7a:	4298      	cmp	r0, r3
 8001b7c:	d995      	bls.n	8001aaa <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b7e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001b80:	4e18      	ldr	r6, [pc, #96]	; (8001be4 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b82:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001b84:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b8c:	4333      	orrs	r3, r6
 8001b8e:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b90:	6a13      	ldr	r3, [r2, #32]
 8001b92:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001b96:	4371      	muls	r1, r6
 8001b98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b9c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001ba0:	fbb1 f1f6 	udiv	r1, r1, r6
 8001ba4:	e7a9      	b.n	8001afa <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ba6:	68a3      	ldr	r3, [r4, #8]
 8001ba8:	b953      	cbnz	r3, 8001bc0 <HAL_I2C_Init+0x11c>
 8001baa:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001bae:	fbb0 f0f3 	udiv	r0, r0, r3
 8001bb2:	1c43      	adds	r3, r0, #1
 8001bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb8:	b16b      	cbz	r3, 8001bd6 <HAL_I2C_Init+0x132>
 8001bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bbe:	e7b2      	b.n	8001b26 <HAL_I2C_Init+0x82>
 8001bc0:	2319      	movs	r3, #25
 8001bc2:	436b      	muls	r3, r5
 8001bc4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001bc8:	1c43      	adds	r3, r0, #1
 8001bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bce:	b113      	cbz	r3, 8001bd6 <HAL_I2C_Init+0x132>
 8001bd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bd4:	e7a7      	b.n	8001b26 <HAL_I2C_Init+0x82>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e7a5      	b.n	8001b26 <HAL_I2C_Init+0x82>
 8001bda:	bf00      	nop
 8001bdc:	000186a0 	.word	0x000186a0
 8001be0:	001e847f 	.word	0x001e847f
 8001be4:	000f4240 	.word	0x000f4240
 8001be8:	003d08ff 	.word	0x003d08ff

08001bec <HAL_I2C_Master_Transmit>:
{
 8001bec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001bf0:	4604      	mov	r4, r0
 8001bf2:	461f      	mov	r7, r3
 8001bf4:	460d      	mov	r5, r1
 8001bf6:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8001bf8:	f7ff f8aa 	bl	8000d50 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bfc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001c00:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001c02:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c04:	d004      	beq.n	8001c10 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8001c06:	2502      	movs	r5, #2
}
 8001c08:	4628      	mov	r0, r5
 8001c0a:	b004      	add	sp, #16
 8001c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c10:	9000      	str	r0, [sp, #0]
 8001c12:	2319      	movs	r3, #25
 8001c14:	2201      	movs	r2, #1
 8001c16:	4958      	ldr	r1, [pc, #352]	; (8001d78 <HAL_I2C_Master_Transmit+0x18c>)
 8001c18:	4620      	mov	r0, r4
 8001c1a:	f7ff feea 	bl	80019f2 <I2C_WaitOnFlagUntilTimeout>
 8001c1e:	2800      	cmp	r0, #0
 8001c20:	d1f1      	bne.n	8001c06 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001c22:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d0ed      	beq.n	8001c06 <HAL_I2C_Master_Transmit+0x1a>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c30:	6823      	ldr	r3, [r4, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001c36:	bf5e      	ittt	pl
 8001c38:	681a      	ldrpl	r2, [r3, #0]
 8001c3a:	f042 0201 	orrpl.w	r2, r2, #1
 8001c3e:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c46:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c48:	2221      	movs	r2, #33	; 0x21
 8001c4a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c4e:	2210      	movs	r2, #16
 8001c50:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c54:	2200      	movs	r2, #0
 8001c56:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001c58:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c5a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001c5c:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c5e:	4a47      	ldr	r2, [pc, #284]	; (8001d7c <HAL_I2C_Master_Transmit+0x190>)
 8001c60:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8001c64:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c68:	2a08      	cmp	r2, #8
 8001c6a:	d004      	beq.n	8001c76 <HAL_I2C_Master_Transmit+0x8a>
 8001c6c:	2a01      	cmp	r2, #1
 8001c6e:	d002      	beq.n	8001c76 <HAL_I2C_Master_Transmit+0x8a>
 8001c70:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001c74:	d104      	bne.n	8001c80 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	e002      	b.n	8001c86 <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c80:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c82:	2a12      	cmp	r2, #18
 8001c84:	d0f7      	beq.n	8001c76 <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c86:	9600      	str	r6, [sp, #0]
 8001c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c90:	4620      	mov	r0, r4
 8001c92:	f7ff feae 	bl	80019f2 <I2C_WaitOnFlagUntilTimeout>
 8001c96:	b108      	cbz	r0, 8001c9c <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 8001c98:	2501      	movs	r5, #1
 8001c9a:	e7b5      	b.n	8001c08 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c9c:	6923      	ldr	r3, [r4, #16]
 8001c9e:	6822      	ldr	r2, [r4, #0]
 8001ca0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ca4:	d113      	bne.n	8001cce <HAL_I2C_Master_Transmit+0xe2>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ca6:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001caa:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cac:	4633      	mov	r3, r6
 8001cae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001cb0:	4933      	ldr	r1, [pc, #204]	; (8001d80 <HAL_I2C_Master_Transmit+0x194>)
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	f7ff fe03 	bl	80018be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cb8:	4605      	mov	r5, r0
 8001cba:	2800      	cmp	r0, #0
 8001cbc:	d1ec      	bne.n	8001c98 <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cbe:	6823      	ldr	r3, [r4, #0]
 8001cc0:	9003      	str	r0, [sp, #12]
 8001cc2:	695a      	ldr	r2, [r3, #20]
 8001cc4:	9203      	str	r2, [sp, #12]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	9303      	str	r3, [sp, #12]
 8001cca:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001ccc:	e044      	b.n	8001d58 <HAL_I2C_Master_Transmit+0x16c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001cce:	11eb      	asrs	r3, r5, #7
 8001cd0:	f003 0306 	and.w	r3, r3, #6
 8001cd4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001cd8:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001cda:	492a      	ldr	r1, [pc, #168]	; (8001d84 <HAL_I2C_Master_Transmit+0x198>)
 8001cdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001cde:	4633      	mov	r3, r6
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	f7ff fdec 	bl	80018be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ce6:	2800      	cmp	r0, #0
 8001ce8:	d1d6      	bne.n	8001c98 <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001cea:	6823      	ldr	r3, [r4, #0]
 8001cec:	b2ed      	uxtb	r5, r5
 8001cee:	611d      	str	r5, [r3, #16]
 8001cf0:	e7dc      	b.n	8001cac <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cf2:	4632      	mov	r2, r6
 8001cf4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	f7ff fead 	bl	8001a56 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cfc:	b140      	cbz	r0, 8001d10 <HAL_I2C_Master_Transmit+0x124>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d00:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d02:	bf01      	itttt	eq
 8001d04:	6822      	ldreq	r2, [r4, #0]
 8001d06:	6813      	ldreq	r3, [r2, #0]
 8001d08:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001d0c:	6013      	streq	r3, [r2, #0]
 8001d0e:	e7c3      	b.n	8001c98 <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d12:	6820      	ldr	r0, [r4, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001d1a:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8001d1c:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001d1e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001d20:	3a01      	subs	r2, #1
 8001d22:	b292      	uxth	r2, r2
 8001d24:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001d26:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d28:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8001d2a:	1e51      	subs	r1, r2, #1
 8001d2c:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d2e:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8001d30:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d32:	d50a      	bpl.n	8001d4a <HAL_I2C_Master_Transmit+0x15e>
 8001d34:	b149      	cbz	r1, 8001d4a <HAL_I2C_Master_Transmit+0x15e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d36:	7859      	ldrb	r1, [r3, #1]
 8001d38:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001d3e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001d44:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8001d46:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001d48:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d4a:	4632      	mov	r2, r6
 8001d4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001d4e:	4620      	mov	r0, r4
 8001d50:	f7ff fdfa 	bl	8001948 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d54:	2800      	cmp	r0, #0
 8001d56:	d1d2      	bne.n	8001cfe <HAL_I2C_Master_Transmit+0x112>
    while (hi2c->XferSize > 0U)
 8001d58:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1c9      	bne.n	8001cf2 <HAL_I2C_Master_Transmit+0x106>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d5e:	6821      	ldr	r1, [r4, #0]
 8001d60:	680a      	ldr	r2, [r1, #0]
 8001d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d66:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001d68:	2220      	movs	r2, #32
 8001d6a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001d6e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d72:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001d76:	e747      	b.n	8001c08 <HAL_I2C_Master_Transmit+0x1c>
 8001d78:	00100002 	.word	0x00100002
 8001d7c:	ffff0000 	.word	0xffff0000
 8001d80:	00010002 	.word	0x00010002
 8001d84:	00010008 	.word	0x00010008

08001d88 <HAL_I2C_Master_Receive>:
{
 8001d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d8c:	4604      	mov	r4, r0
 8001d8e:	b089      	sub	sp, #36	; 0x24
 8001d90:	4698      	mov	r8, r3
 8001d92:	460f      	mov	r7, r1
 8001d94:	4691      	mov	r9, r2
 8001d96:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8001d98:	f7fe ffda 	bl	8000d50 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d9c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001da0:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001da2:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001da4:	d004      	beq.n	8001db0 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8001da6:	2702      	movs	r7, #2
}
 8001da8:	4638      	mov	r0, r7
 8001daa:	b009      	add	sp, #36	; 0x24
 8001dac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001db0:	9000      	str	r0, [sp, #0]
 8001db2:	2319      	movs	r3, #25
 8001db4:	2201      	movs	r2, #1
 8001db6:	49a6      	ldr	r1, [pc, #664]	; (8002050 <HAL_I2C_Master_Receive+0x2c8>)
 8001db8:	4620      	mov	r0, r4
 8001dba:	f7ff fe1a 	bl	80019f2 <I2C_WaitOnFlagUntilTimeout>
 8001dbe:	2800      	cmp	r0, #0
 8001dc0:	d1f1      	bne.n	8001da6 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8001dc2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d0ed      	beq.n	8001da6 <HAL_I2C_Master_Receive+0x1e>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dd0:	6823      	ldr	r3, [r4, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001dd6:	bf5e      	ittt	pl
 8001dd8:	681a      	ldrpl	r2, [r3, #0]
 8001dda:	f042 0201 	orrpl.w	r2, r2, #1
 8001dde:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001de6:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001de8:	2222      	movs	r2, #34	; 0x22
 8001dea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001dee:	2210      	movs	r2, #16
 8001df0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001df4:	2200      	movs	r2, #0
 8001df6:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001df8:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dfc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001dfe:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e00:	4a94      	ldr	r2, [pc, #592]	; (8002054 <HAL_I2C_Master_Receive+0x2cc>)
 8001e02:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e06:	6819      	ldr	r1, [r3, #0]
    hi2c->pBuffPtr    = pData;
 8001e08:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e0c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e10:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e12:	6019      	str	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e14:	d004      	beq.n	8001e20 <HAL_I2C_Master_Receive+0x98>
 8001e16:	2a01      	cmp	r2, #1
 8001e18:	d002      	beq.n	8001e20 <HAL_I2C_Master_Receive+0x98>
 8001e1a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001e1e:	d104      	bne.n	8001e2a <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	e002      	b.n	8001e30 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001e2a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e2c:	2a11      	cmp	r2, #17
 8001e2e:	d0f7      	beq.n	8001e20 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e30:	9500      	str	r5, [sp, #0]
 8001e32:	4633      	mov	r3, r6
 8001e34:	2200      	movs	r2, #0
 8001e36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	f7ff fdd9 	bl	80019f2 <I2C_WaitOnFlagUntilTimeout>
 8001e40:	b108      	cbz	r0, 8001e46 <HAL_I2C_Master_Receive+0xbe>
      return HAL_ERROR;
 8001e42:	2701      	movs	r7, #1
 8001e44:	e7b0      	b.n	8001da8 <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e46:	6923      	ldr	r3, [r4, #16]
 8001e48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	d140      	bne.n	8001ed2 <HAL_I2C_Master_Receive+0x14a>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001e50:	f047 0701 	orr.w	r7, r7, #1
 8001e54:	b2ff      	uxtb	r7, r7
 8001e56:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e58:	462b      	mov	r3, r5
 8001e5a:	4632      	mov	r2, r6
 8001e5c:	497e      	ldr	r1, [pc, #504]	; (8002058 <HAL_I2C_Master_Receive+0x2d0>)
 8001e5e:	4620      	mov	r0, r4
 8001e60:	f7ff fd2d 	bl	80018be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e64:	4607      	mov	r7, r0
 8001e66:	2800      	cmp	r0, #0
 8001e68:	d1eb      	bne.n	8001e42 <HAL_I2C_Master_Receive+0xba>
    if (hi2c->XferSize == 0U)
 8001e6a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001e6c:	6823      	ldr	r3, [r4, #0]
 8001e6e:	2a00      	cmp	r2, #0
 8001e70:	d063      	beq.n	8001f3a <HAL_I2C_Master_Receive+0x1b2>
    else if (hi2c->XferSize == 1U)
 8001e72:	2a01      	cmp	r2, #1
 8001e74:	d174      	bne.n	8001f60 <HAL_I2C_Master_Receive+0x1d8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e7c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e7e:	9704      	str	r7, [sp, #16]
 8001e80:	695a      	ldr	r2, [r3, #20]
 8001e82:	9204      	str	r2, [sp, #16]
 8001e84:	699a      	ldr	r2, [r3, #24]
 8001e86:	9204      	str	r2, [sp, #16]
 8001e88:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e90:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e92:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8002060 <HAL_I2C_Master_Receive+0x2d8>
    while (hi2c->XferSize > 0U)
 8001e96:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d058      	beq.n	8001f4e <HAL_I2C_Master_Receive+0x1c6>
      if (hi2c->XferSize <= 3U)
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	f200 80ba 	bhi.w	8002016 <HAL_I2C_Master_Receive+0x28e>
        if (hi2c->XferSize == 1U)
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d177      	bne.n	8001f96 <HAL_I2C_Master_Receive+0x20e>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ea6:	462a      	mov	r2, r5
 8001ea8:	4631      	mov	r1, r6
 8001eaa:	4620      	mov	r0, r4
 8001eac:	f7ff fd72 	bl	8001994 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001eb0:	2800      	cmp	r0, #0
 8001eb2:	d1c6      	bne.n	8001e42 <HAL_I2C_Master_Receive+0xba>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eb4:	6822      	ldr	r2, [r4, #0]
 8001eb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001eb8:	6912      	ldr	r2, [r2, #16]
 8001eba:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001ebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001ec2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001ec8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001ed0:	e7e1      	b.n	8001e96 <HAL_I2C_Master_Receive+0x10e>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ed2:	ea4f 18e7 	mov.w	r8, r7, asr #7
 8001ed6:	f008 0806 	and.w	r8, r8, #6
 8001eda:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001ede:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ee0:	495e      	ldr	r1, [pc, #376]	; (800205c <HAL_I2C_Master_Receive+0x2d4>)
 8001ee2:	462b      	mov	r3, r5
 8001ee4:	4632      	mov	r2, r6
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	f7ff fce9 	bl	80018be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001eec:	2800      	cmp	r0, #0
 8001eee:	d1a8      	bne.n	8001e42 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ef0:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ef2:	4959      	ldr	r1, [pc, #356]	; (8002058 <HAL_I2C_Master_Receive+0x2d0>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ef4:	b2ff      	uxtb	r7, r7
 8001ef6:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ef8:	4632      	mov	r2, r6
 8001efa:	462b      	mov	r3, r5
 8001efc:	4620      	mov	r0, r4
 8001efe:	f7ff fcde 	bl	80018be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f02:	4602      	mov	r2, r0
 8001f04:	2800      	cmp	r0, #0
 8001f06:	d19c      	bne.n	8001e42 <HAL_I2C_Master_Receive+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f08:	6823      	ldr	r3, [r4, #0]
 8001f0a:	9007      	str	r0, [sp, #28]
 8001f0c:	6959      	ldr	r1, [r3, #20]
 8001f0e:	9107      	str	r1, [sp, #28]
 8001f10:	6999      	ldr	r1, [r3, #24]
 8001f12:	9107      	str	r1, [sp, #28]
 8001f14:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f16:	6819      	ldr	r1, [r3, #0]
 8001f18:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001f1c:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f1e:	4620      	mov	r0, r4
 8001f20:	9500      	str	r5, [sp, #0]
 8001f22:	4633      	mov	r3, r6
 8001f24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f28:	f7ff fd63 	bl	80019f2 <I2C_WaitOnFlagUntilTimeout>
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	d188      	bne.n	8001e42 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001f30:	6822      	ldr	r2, [r4, #0]
 8001f32:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8001f36:	6113      	str	r3, [r2, #16]
 8001f38:	e78e      	b.n	8001e58 <HAL_I2C_Master_Receive+0xd0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f3a:	9703      	str	r7, [sp, #12]
 8001f3c:	695a      	ldr	r2, [r3, #20]
 8001f3e:	9203      	str	r2, [sp, #12]
 8001f40:	699a      	ldr	r2, [r3, #24]
 8001f42:	9203      	str	r2, [sp, #12]
 8001f44:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f4c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f4e:	2320      	movs	r3, #32
 8001f50:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001f5a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001f5e:	e723      	b.n	8001da8 <HAL_I2C_Master_Receive+0x20>
    else if (hi2c->XferSize == 2U)
 8001f60:	2a02      	cmp	r2, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f62:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8001f64:	d10d      	bne.n	8001f82 <HAL_I2C_Master_Receive+0x1fa>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f6a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f72:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f74:	9705      	str	r7, [sp, #20]
 8001f76:	695a      	ldr	r2, [r3, #20]
 8001f78:	9205      	str	r2, [sp, #20]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	9305      	str	r3, [sp, #20]
 8001f7e:	9b05      	ldr	r3, [sp, #20]
 8001f80:	e787      	b.n	8001e92 <HAL_I2C_Master_Receive+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f86:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f88:	9706      	str	r7, [sp, #24]
 8001f8a:	695a      	ldr	r2, [r3, #20]
 8001f8c:	9206      	str	r2, [sp, #24]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	9306      	str	r3, [sp, #24]
 8001f92:	9b06      	ldr	r3, [sp, #24]
 8001f94:	e77d      	b.n	8001e92 <HAL_I2C_Master_Receive+0x10a>
        else if (hi2c->XferSize == 2U)
 8001f96:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f98:	9500      	str	r5, [sp, #0]
 8001f9a:	4633      	mov	r3, r6
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	4641      	mov	r1, r8
 8001fa2:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8001fa4:	d11a      	bne.n	8001fdc <HAL_I2C_Master_Receive+0x254>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fa6:	f7ff fd24 	bl	80019f2 <I2C_WaitOnFlagUntilTimeout>
 8001faa:	2800      	cmp	r0, #0
 8001fac:	f47f af49 	bne.w	8001e42 <HAL_I2C_Master_Receive+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb0:	6823      	ldr	r3, [r4, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb8:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8001fc0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001fc2:	1c53      	adds	r3, r2, #1
 8001fc4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001fc6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001fcc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fd4:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	7053      	strb	r3, [r2, #1]
 8001fda:	e76f      	b.n	8001ebc <HAL_I2C_Master_Receive+0x134>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fdc:	f7ff fd09 	bl	80019f2 <I2C_WaitOnFlagUntilTimeout>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	2800      	cmp	r0, #0
 8001fe4:	f47f af2d 	bne.w	8001e42 <HAL_I2C_Master_Receive+0xba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	6819      	ldr	r1, [r3, #0]
 8001fec:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001ff0:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ff2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	700b      	strb	r3, [r1, #0]
          hi2c->pBuffPtr++;
 8001ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ffa:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002000:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002002:	3b01      	subs	r3, #1
 8002004:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002006:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002008:	3b01      	subs	r3, #1
 800200a:	b29b      	uxth	r3, r3
 800200c:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800200e:	4641      	mov	r1, r8
 8002010:	4633      	mov	r3, r6
 8002012:	4620      	mov	r0, r4
 8002014:	e7c7      	b.n	8001fa6 <HAL_I2C_Master_Receive+0x21e>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002016:	462a      	mov	r2, r5
 8002018:	4631      	mov	r1, r6
 800201a:	4620      	mov	r0, r4
 800201c:	f7ff fcba 	bl	8001994 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002020:	2800      	cmp	r0, #0
 8002022:	f47f af0e 	bne.w	8001e42 <HAL_I2C_Master_Receive+0xba>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002026:	6822      	ldr	r2, [r4, #0]
 8002028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800202a:	6912      	ldr	r2, [r2, #16]
 800202c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800202e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002030:	1c53      	adds	r3, r2, #1
 8002032:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8002034:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002036:	3b01      	subs	r3, #1
 8002038:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800203a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800203c:	3b01      	subs	r3, #1
 800203e:	b29b      	uxth	r3, r3
 8002040:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002042:	6823      	ldr	r3, [r4, #0]
 8002044:	6959      	ldr	r1, [r3, #20]
 8002046:	0749      	lsls	r1, r1, #29
 8002048:	f57f af25 	bpl.w	8001e96 <HAL_I2C_Master_Receive+0x10e>
 800204c:	e7c3      	b.n	8001fd6 <HAL_I2C_Master_Receive+0x24e>
 800204e:	bf00      	nop
 8002050:	00100002 	.word	0x00100002
 8002054:	ffff0000 	.word	0xffff0000
 8002058:	00010002 	.word	0x00010002
 800205c:	00010008 	.word	0x00010008
 8002060:	00010004 	.word	0x00010004

08002064 <HAL_I2C_MasterTxCpltCallback>:
 8002064:	4770      	bx	lr

08002066 <HAL_I2C_MasterRxCpltCallback>:
 8002066:	4770      	bx	lr

08002068 <HAL_I2C_SlaveTxCpltCallback>:
 8002068:	4770      	bx	lr

0800206a <HAL_I2C_SlaveRxCpltCallback>:
 800206a:	4770      	bx	lr

0800206c <HAL_I2C_AddrCallback>:
{
 800206c:	4770      	bx	lr

0800206e <HAL_I2C_ListenCpltCallback>:
 800206e:	4770      	bx	lr

08002070 <HAL_I2C_MemTxCpltCallback>:
 8002070:	4770      	bx	lr

08002072 <HAL_I2C_MemRxCpltCallback>:
 8002072:	4770      	bx	lr

08002074 <HAL_I2C_ErrorCallback>:
 8002074:	4770      	bx	lr

08002076 <HAL_I2C_AbortCpltCallback>:
{
 8002076:	4770      	bx	lr

08002078 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002078:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800207a:	6802      	ldr	r2, [r0, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800207c:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
{
 8002080:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002082:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferCpltCallback = NULL;
 8002084:	6b46      	ldr	r6, [r0, #52]	; 0x34
  hi2c->hdmarx->XferCpltCallback = NULL;
 8002086:	6b85      	ldr	r5, [r0, #56]	; 0x38
  hi2c->hdmatx->XferCpltCallback = NULL;
 8002088:	2300      	movs	r3, #0
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800208a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
  hi2c->hdmatx->XferCpltCallback = NULL;
 800208e:	63f3      	str	r3, [r6, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 8002090:	63eb      	str	r3, [r5, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002092:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 8002094:	8543      	strh	r3, [r0, #42]	; 0x2a
  __HAL_I2C_DISABLE(hi2c);
 8002096:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002098:	6533      	str	r3, [r6, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 800209a:	f024 0401 	bic.w	r4, r4, #1
  hi2c->hdmarx->XferAbortCallback = NULL;
 800209e:	652b      	str	r3, [r5, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 80020a0:	6014      	str	r4, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80020a2:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 80020a6:	2c60      	cmp	r4, #96	; 0x60
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020a8:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80020aa:	d108      	bne.n	80020be <I2C_DMAAbort+0x46>
    hi2c->State         = HAL_I2C_STATE_READY;
 80020ac:	2220      	movs	r2, #32
 80020ae:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80020b2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80020b6:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80020b8:	f7ff ffdd 	bl	8002076 <HAL_I2C_AbortCpltCallback>
 80020bc:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80020be:	f001 0128 	and.w	r1, r1, #40	; 0x28
 80020c2:	2928      	cmp	r1, #40	; 0x28
 80020c4:	d10d      	bne.n	80020e2 <I2C_DMAAbort+0x6a>
      __HAL_I2C_ENABLE(hi2c);
 80020c6:	6814      	ldr	r4, [r2, #0]
 80020c8:	f044 0401 	orr.w	r4, r4, #1
 80020cc:	6014      	str	r4, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ce:	6814      	ldr	r4, [r2, #0]
 80020d0:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 80020d4:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80020d6:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80020d8:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 80020dc:	f7ff ffca 	bl	8002074 <HAL_I2C_ErrorCallback>
 80020e0:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->State = HAL_I2C_STATE_READY;
 80020e2:	2220      	movs	r2, #32
 80020e4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80020ec:	e7f6      	b.n	80020dc <I2C_DMAAbort+0x64>
	...

080020f0 <I2C_ITError>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020f0:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80020f4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80020f8:	2b10      	cmp	r3, #16
{
 80020fa:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020fc:	b2d2      	uxtb	r2, r2
{
 80020fe:	4604      	mov	r4, r0
 8002100:	6803      	ldr	r3, [r0, #0]
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002102:	d105      	bne.n	8002110 <I2C_ITError+0x20>
 8002104:	2a22      	cmp	r2, #34	; 0x22
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002106:	bf02      	ittt	eq
 8002108:	6819      	ldreq	r1, [r3, #0]
 800210a:	f421 6100 	biceq.w	r1, r1, #2048	; 0x800
 800210e:	6019      	streq	r1, [r3, #0]
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002110:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8002114:	2928      	cmp	r1, #40	; 0x28
 8002116:	d13a      	bne.n	800218e <I2C_ITError+0x9e>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002118:	2200      	movs	r2, #0
 800211a:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800211c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8002126:	d059      	beq.n	80021dc <I2C_ITError+0xec>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002128:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800212a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800212c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002130:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002132:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002136:	2b01      	cmp	r3, #1
 8002138:	4b3c      	ldr	r3, [pc, #240]	; (800222c <I2C_ITError+0x13c>)
 800213a:	d035      	beq.n	80021a8 <I2C_ITError+0xb8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800213c:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800213e:	f7ff f9f9 	bl	8001534 <HAL_DMA_Abort_IT>
 8002142:	b150      	cbz	r0, 800215a <I2C_ITError+0x6a>
        __HAL_I2C_DISABLE(hi2c);
 8002144:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002146:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8002148:	6813      	ldr	r3, [r2, #0]
 800214a:	f023 0301 	bic.w	r3, r3, #1
 800214e:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002150:	2320      	movs	r3, #32
 8002152:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002156:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002158:	4798      	blx	r3
  CurrentState = hi2c->State;
 800215a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800215e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002160:	0752      	lsls	r2, r2, #29
  CurrentState = hi2c->State;
 8002162:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002164:	d512      	bpl.n	800218c <I2C_ITError+0x9c>
 8002166:	2b28      	cmp	r3, #40	; 0x28
 8002168:	d110      	bne.n	800218c <I2C_ITError+0x9c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800216a:	6822      	ldr	r2, [r4, #0]
 800216c:	6853      	ldr	r3, [r2, #4]
 800216e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002172:	6053      	str	r3, [r2, #4]
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002174:	4b2e      	ldr	r3, [pc, #184]	; (8002230 <I2C_ITError+0x140>)
 8002176:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 8002178:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 800217a:	2300      	movs	r3, #0
 800217c:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 800217e:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8002180:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002184:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002188:	f7ff ff71 	bl	800206e <HAL_I2C_ListenCpltCallback>
 800218c:	bd10      	pop	{r4, pc}
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800218e:	6859      	ldr	r1, [r3, #4]
 8002190:	0509      	lsls	r1, r1, #20
 8002192:	d404      	bmi.n	800219e <I2C_ITError+0xae>
 8002194:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 8002196:	bf1c      	itt	ne
 8002198:	2220      	movne	r2, #32
 800219a:	f884 203d 	strbne.w	r2, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 800219e:	2200      	movs	r2, #0
 80021a0:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 80021a6:	e7bb      	b.n	8002120 <I2C_ITError+0x30>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80021a8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80021aa:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80021ac:	f7ff f9c2 	bl	8001534 <HAL_DMA_Abort_IT>
 80021b0:	2800      	cmp	r0, #0
 80021b2:	d0d2      	beq.n	800215a <I2C_ITError+0x6a>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	0652      	lsls	r2, r2, #25
 80021ba:	d505      	bpl.n	80021c8 <I2C_ITError+0xd8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 80021c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021c4:	3301      	adds	r3, #1
 80021c6:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 80021c8:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80021ca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 80021cc:	6813      	ldr	r3, [r2, #0]
 80021ce:	f023 0301 	bic.w	r3, r3, #1
 80021d2:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80021d4:	2320      	movs	r3, #32
 80021d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80021da:	e7bc      	b.n	8002156 <I2C_ITError+0x66>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80021dc:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80021e0:	2960      	cmp	r1, #96	; 0x60
 80021e2:	d115      	bne.n	8002210 <I2C_ITError+0x120>
    hi2c->State = HAL_I2C_STATE_READY;
 80021e4:	2120      	movs	r1, #32
 80021e6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ea:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	0650      	lsls	r0, r2, #25
 80021f0:	d505      	bpl.n	80021fe <I2C_ITError+0x10e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80021f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021fa:	3301      	adds	r3, #1
 80021fc:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80021fe:	6822      	ldr	r2, [r4, #0]
 8002200:	6813      	ldr	r3, [r2, #0]
 8002202:	f023 0301 	bic.w	r3, r3, #1
 8002206:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002208:	4620      	mov	r0, r4
 800220a:	f7ff ff34 	bl	8002076 <HAL_I2C_AbortCpltCallback>
 800220e:	e7a4      	b.n	800215a <I2C_ITError+0x6a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	0651      	lsls	r1, r2, #25
 8002214:	d505      	bpl.n	8002222 <I2C_ITError+0x132>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002216:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 800221c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800221e:	3301      	adds	r3, #1
 8002220:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8002222:	4620      	mov	r0, r4
 8002224:	f7ff ff26 	bl	8002074 <HAL_I2C_ErrorCallback>
 8002228:	e797      	b.n	800215a <I2C_ITError+0x6a>
 800222a:	bf00      	nop
 800222c:	08002079 	.word	0x08002079
 8002230:	ffff0000 	.word	0xffff0000

08002234 <HAL_I2C_EV_IRQHandler>:
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002234:	6803      	ldr	r3, [r0, #0]
{
 8002236:	b530      	push	{r4, r5, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002238:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800223a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800223c:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
{
 8002240:	4604      	mov	r4, r0
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002242:	b2c9      	uxtb	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002244:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002248:	2910      	cmp	r1, #16
{
 800224a:	b08d      	sub	sp, #52	; 0x34
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800224c:	b2c0      	uxtb	r0, r0
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800224e:	d002      	beq.n	8002256 <HAL_I2C_EV_IRQHandler+0x22>
 8002250:	2940      	cmp	r1, #64	; 0x40
 8002252:	f040 82b8 	bne.w	80027c6 <HAL_I2C_EV_IRQHandler+0x592>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002256:	6998      	ldr	r0, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002258:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800225a:	f011 0f01 	tst.w	r1, #1
 800225e:	d107      	bne.n	8002270 <HAL_I2C_EV_IRQHandler+0x3c>
 8002260:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 8002264:	d002      	beq.n	800226c <HAL_I2C_EV_IRQHandler+0x38>
 8002266:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 800226a:	d14d      	bne.n	8002308 <HAL_I2C_EV_IRQHandler+0xd4>
}
 800226c:	b00d      	add	sp, #52	; 0x34
 800226e:	bd30      	pop	{r4, r5, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002270:	0595      	lsls	r5, r2, #22
 8002272:	d549      	bpl.n	8002308 <HAL_I2C_EV_IRQHandler+0xd4>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002274:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002276:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 800227a:	d10c      	bne.n	8002296 <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800227c:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800227e:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002280:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002284:	2a40      	cmp	r2, #64	; 0x40
 8002286:	d111      	bne.n	80022ac <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 8002288:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800228a:	b952      	cbnz	r2, 80022a2 <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800228c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800228e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002292:	611a      	str	r2, [r3, #16]
 8002294:	e7ea      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002296:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002298:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 800229c:	d1f0      	bne.n	8002280 <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800229e:	2208      	movs	r2, #8
 80022a0:	e7ed      	b.n	800227e <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80022a2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80022a4:	f042 0201 	orr.w	r2, r2, #1
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	e7f2      	b.n	8002292 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022ac:	6922      	ldr	r2, [r4, #16]
 80022ae:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80022b2:	d116      	bne.n	80022e2 <HAL_I2C_EV_IRQHandler+0xae>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80022b4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80022b8:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80022ba:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80022bc:	bf16      	itet	ne
 80022be:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80022c2:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80022c6:	b2d2      	uxtbne	r2, r2
 80022c8:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80022ca:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80022cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022ce:	b91a      	cbnz	r2, 80022d8 <HAL_I2C_EV_IRQHandler+0xa4>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80022d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80022d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022d4:	2a00      	cmp	r2, #0
 80022d6:	d0c9      	beq.n	800226c <HAL_I2C_EV_IRQHandler+0x38>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80022de:	605a      	str	r2, [r3, #4]
 80022e0:	e7c4      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x38>
      if (hi2c->EventCount == 0U)
 80022e2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80022e4:	b932      	cbnz	r2, 80022f4 <HAL_I2C_EV_IRQHandler+0xc0>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80022e6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80022e8:	11d2      	asrs	r2, r2, #7
 80022ea:	f002 0206 	and.w	r2, r2, #6
 80022ee:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 80022f2:	e7ce      	b.n	8002292 <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 80022f4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80022f6:	2a01      	cmp	r2, #1
 80022f8:	d1b8      	bne.n	800226c <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80022fa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80022fc:	11d2      	asrs	r2, r2, #7
 80022fe:	f002 0206 	and.w	r2, r2, #6
 8002302:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8002306:	e7c4      	b.n	8002292 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002308:	070d      	lsls	r5, r1, #28
 800230a:	d50b      	bpl.n	8002324 <HAL_I2C_EV_IRQHandler+0xf0>
 800230c:	0595      	lsls	r5, r2, #22
 800230e:	d509      	bpl.n	8002324 <HAL_I2C_EV_IRQHandler+0xf0>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002310:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	611a      	str	r2, [r3, #16]
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002316:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002318:	2a00      	cmp	r2, #0
 800231a:	d1d7      	bne.n	80022cc <HAL_I2C_EV_IRQHandler+0x98>
 800231c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800231e:	2900      	cmp	r1, #0
 8002320:	d1d4      	bne.n	80022cc <HAL_I2C_EV_IRQHandler+0x98>
 8002322:	e7a3      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002324:	078d      	lsls	r5, r1, #30
 8002326:	f140 80e1 	bpl.w	80024ec <HAL_I2C_EV_IRQHandler+0x2b8>
 800232a:	0595      	lsls	r5, r2, #22
 800232c:	f140 80de 	bpl.w	80024ec <HAL_I2C_EV_IRQHandler+0x2b8>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002330:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002334:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002336:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002338:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800233c:	2822      	cmp	r0, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800233e:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002340:	f040 80cc 	bne.w	80024dc <HAL_I2C_EV_IRQHandler+0x2a8>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002344:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002346:	b940      	cbnz	r0, 800235a <HAL_I2C_EV_IRQHandler+0x126>
 8002348:	2940      	cmp	r1, #64	; 0x40
 800234a:	d106      	bne.n	800235a <HAL_I2C_EV_IRQHandler+0x126>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800234c:	9001      	str	r0, [sp, #4]
 800234e:	695a      	ldr	r2, [r3, #20]
 8002350:	9201      	str	r2, [sp, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	9301      	str	r3, [sp, #4]
 8002356:	9b01      	ldr	r3, [sp, #4]
 8002358:	e788      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800235a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800235c:	b981      	cbnz	r1, 8002380 <HAL_I2C_EV_IRQHandler+0x14c>
 800235e:	6920      	ldr	r0, [r4, #16]
 8002360:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8002364:	d10c      	bne.n	8002380 <HAL_I2C_EV_IRQHandler+0x14c>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002366:	9102      	str	r1, [sp, #8]
 8002368:	695a      	ldr	r2, [r3, #20]
 800236a:	9202      	str	r2, [sp, #8]
 800236c:	699a      	ldr	r2, [r3, #24]
 800236e:	9202      	str	r2, [sp, #8]
 8002370:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002378:	601a      	str	r2, [r3, #0]
            hi2c->EventCount++;
 800237a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800237c:	3301      	adds	r3, #1
 800237e:	e028      	b.n	80023d2 <HAL_I2C_EV_IRQHandler+0x19e>
      if (hi2c->XferCount == 0U)
 8002380:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002382:	b289      	uxth	r1, r1
 8002384:	b951      	cbnz	r1, 800239c <HAL_I2C_EV_IRQHandler+0x168>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002386:	9103      	str	r1, [sp, #12]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	9203      	str	r2, [sp, #12]
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	9203      	str	r2, [sp, #12]
 8002390:	9a03      	ldr	r2, [sp, #12]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	e019      	b.n	80023d0 <HAL_I2C_EV_IRQHandler+0x19c>
      else if (hi2c->XferCount == 1U)
 800239c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800239e:	b289      	uxth	r1, r1
 80023a0:	2901      	cmp	r1, #1
 80023a2:	d14a      	bne.n	800243a <HAL_I2C_EV_IRQHandler+0x206>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80023a4:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80023a8:	d11c      	bne.n	80023e4 <HAL_I2C_EV_IRQHandler+0x1b0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b0:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80023b8:	d00d      	beq.n	80023d6 <HAL_I2C_EV_IRQHandler+0x1a2>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023c0:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023c2:	2200      	movs	r2, #0
 80023c4:	9204      	str	r2, [sp, #16]
 80023c6:	695a      	ldr	r2, [r3, #20]
 80023c8:	9204      	str	r2, [sp, #16]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	9304      	str	r3, [sp, #16]
 80023ce:	9b04      	ldr	r3, [sp, #16]
      hi2c->EventCount = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	6523      	str	r3, [r4, #80]	; 0x50
 80023d4:	e74a      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x38>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d6:	9205      	str	r2, [sp, #20]
 80023d8:	695a      	ldr	r2, [r3, #20]
 80023da:	9205      	str	r2, [sp, #20]
 80023dc:	699a      	ldr	r2, [r3, #24]
 80023de:	9205      	str	r2, [sp, #20]
 80023e0:	9a05      	ldr	r2, [sp, #20]
 80023e2:	e7d6      	b.n	8002392 <HAL_I2C_EV_IRQHandler+0x15e>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80023e4:	2a08      	cmp	r2, #8
 80023e6:	d01c      	beq.n	8002422 <HAL_I2C_EV_IRQHandler+0x1ee>
 80023e8:	2a20      	cmp	r2, #32
 80023ea:	d01a      	beq.n	8002422 <HAL_I2C_EV_IRQHandler+0x1ee>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80023ec:	2d12      	cmp	r5, #18
 80023ee:	d10d      	bne.n	800240c <HAL_I2C_EV_IRQHandler+0x1d8>
 80023f0:	2a01      	cmp	r2, #1
 80023f2:	d116      	bne.n	8002422 <HAL_I2C_EV_IRQHandler+0x1ee>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023fa:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fc:	2200      	movs	r2, #0
 80023fe:	9206      	str	r2, [sp, #24]
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	9206      	str	r2, [sp, #24]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	9306      	str	r3, [sp, #24]
 8002408:	9b06      	ldr	r3, [sp, #24]
 800240a:	e7e1      	b.n	80023d0 <HAL_I2C_EV_IRQHandler+0x19c>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800240c:	2a10      	cmp	r2, #16
 800240e:	d8f1      	bhi.n	80023f4 <HAL_I2C_EV_IRQHandler+0x1c0>
 8002410:	498d      	ldr	r1, [pc, #564]	; (8002648 <HAL_I2C_EV_IRQHandler+0x414>)
 8002412:	fa21 f202 	lsr.w	r2, r1, r2
 8002416:	07d0      	lsls	r0, r2, #31
 8002418:	d5ec      	bpl.n	80023f4 <HAL_I2C_EV_IRQHandler+0x1c0>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002420:	e7eb      	b.n	80023fa <HAL_I2C_EV_IRQHandler+0x1c6>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002428:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800242a:	2200      	movs	r2, #0
 800242c:	9207      	str	r2, [sp, #28]
 800242e:	695a      	ldr	r2, [r3, #20]
 8002430:	9207      	str	r2, [sp, #28]
 8002432:	699a      	ldr	r2, [r3, #24]
 8002434:	9207      	str	r2, [sp, #28]
 8002436:	9a07      	ldr	r2, [sp, #28]
 8002438:	e7ab      	b.n	8002392 <HAL_I2C_EV_IRQHandler+0x15e>
      else if (hi2c->XferCount == 2U)
 800243a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800243c:	b289      	uxth	r1, r1
 800243e:	2902      	cmp	r1, #2
 8002440:	d12c      	bne.n	800249c <HAL_I2C_EV_IRQHandler+0x268>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002442:	2a10      	cmp	r2, #16
 8002444:	d803      	bhi.n	800244e <HAL_I2C_EV_IRQHandler+0x21a>
 8002446:	4980      	ldr	r1, [pc, #512]	; (8002648 <HAL_I2C_EV_IRQHandler+0x414>)
 8002448:	40d1      	lsrs	r1, r2
 800244a:	07c9      	lsls	r1, r1, #31
 800244c:	d422      	bmi.n	8002494 <HAL_I2C_EV_IRQHandler+0x260>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800244e:	6819      	ldr	r1, [r3, #0]
 8002450:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002454:	6019      	str	r1, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002456:	6819      	ldr	r1, [r3, #0]
 8002458:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800245c:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800245e:	6859      	ldr	r1, [r3, #4]
 8002460:	050d      	lsls	r5, r1, #20
 8002462:	d50f      	bpl.n	8002484 <HAL_I2C_EV_IRQHandler+0x250>
 8002464:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002468:	d008      	beq.n	800247c <HAL_I2C_EV_IRQHandler+0x248>
 800246a:	1e51      	subs	r1, r2, #1
 800246c:	291f      	cmp	r1, #31
 800246e:	bf9d      	ittte	ls
 8002470:	4a76      	ldrls	r2, [pc, #472]	; (800264c <HAL_I2C_EV_IRQHandler+0x418>)
 8002472:	40ca      	lsrls	r2, r1
 8002474:	43d2      	mvnls	r2, r2
 8002476:	2201      	movhi	r2, #1
 8002478:	07d0      	lsls	r0, r2, #31
 800247a:	d403      	bmi.n	8002484 <HAL_I2C_EV_IRQHandler+0x250>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002482:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002484:	2200      	movs	r2, #0
 8002486:	9208      	str	r2, [sp, #32]
 8002488:	695a      	ldr	r2, [r3, #20]
 800248a:	9208      	str	r2, [sp, #32]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	9308      	str	r3, [sp, #32]
 8002490:	9b08      	ldr	r3, [sp, #32]
 8002492:	e79d      	b.n	80023d0 <HAL_I2C_EV_IRQHandler+0x19c>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002494:	6819      	ldr	r1, [r3, #0]
 8002496:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800249a:	e7df      	b.n	800245c <HAL_I2C_EV_IRQHandler+0x228>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800249c:	6819      	ldr	r1, [r3, #0]
 800249e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80024a2:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80024a4:	6859      	ldr	r1, [r3, #4]
 80024a6:	0509      	lsls	r1, r1, #20
 80024a8:	d510      	bpl.n	80024cc <HAL_I2C_EV_IRQHandler+0x298>
 80024aa:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80024ae:	d009      	beq.n	80024c4 <HAL_I2C_EV_IRQHandler+0x290>
 80024b0:	3a01      	subs	r2, #1
 80024b2:	2a1f      	cmp	r2, #31
 80024b4:	bf9d      	ittte	ls
 80024b6:	4965      	ldrls	r1, [pc, #404]	; (800264c <HAL_I2C_EV_IRQHandler+0x418>)
 80024b8:	fa21 f202 	lsrls.w	r2, r1, r2
 80024bc:	43d2      	mvnls	r2, r2
 80024be:	2201      	movhi	r2, #1
 80024c0:	07d2      	lsls	r2, r2, #31
 80024c2:	d403      	bmi.n	80024cc <HAL_I2C_EV_IRQHandler+0x298>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024ca:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024cc:	2200      	movs	r2, #0
 80024ce:	9209      	str	r2, [sp, #36]	; 0x24
 80024d0:	695a      	ldr	r2, [r3, #20]
 80024d2:	9209      	str	r2, [sp, #36]	; 0x24
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	9309      	str	r3, [sp, #36]	; 0x24
 80024d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024da:	e779      	b.n	80023d0 <HAL_I2C_EV_IRQHandler+0x19c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024dc:	2200      	movs	r2, #0
 80024de:	920a      	str	r2, [sp, #40]	; 0x28
 80024e0:	695a      	ldr	r2, [r3, #20]
 80024e2:	920a      	str	r2, [sp, #40]	; 0x28
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	930a      	str	r3, [sp, #40]	; 0x28
 80024e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80024ea:	e6bf      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80024ec:	f010 0f04 	tst.w	r0, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80024f0:	6858      	ldr	r0, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80024f2:	f000 80ad 	beq.w	8002650 <HAL_I2C_EV_IRQHandler+0x41c>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80024f6:	0505      	lsls	r5, r0, #20
 80024f8:	f53f aeb8 	bmi.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024fc:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002500:	f001 0104 	and.w	r1, r1, #4
 8002504:	d069      	beq.n	80025da <HAL_I2C_EV_IRQHandler+0x3a6>
 8002506:	0550      	lsls	r0, r2, #21
 8002508:	d567      	bpl.n	80025da <HAL_I2C_EV_IRQHandler+0x3a6>
 800250a:	2900      	cmp	r1, #0
 800250c:	d165      	bne.n	80025da <HAL_I2C_EV_IRQHandler+0x3a6>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800250e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002512:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002514:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002518:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800251a:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800251c:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800251e:	b9c5      	cbnz	r5, 8002552 <HAL_I2C_EV_IRQHandler+0x31e>
 8002520:	2a21      	cmp	r2, #33	; 0x21
 8002522:	d118      	bne.n	8002556 <HAL_I2C_EV_IRQHandler+0x322>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002524:	2808      	cmp	r0, #8
 8002526:	d078      	beq.n	800261a <HAL_I2C_EV_IRQHandler+0x3e6>
 8002528:	2820      	cmp	r0, #32
 800252a:	d076      	beq.n	800261a <HAL_I2C_EV_IRQHandler+0x3e6>
 800252c:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8002530:	d073      	beq.n	800261a <HAL_I2C_EV_IRQHandler+0x3e6>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002538:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800253a:	2311      	movs	r3, #17
 800253c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800253e:	2300      	movs	r3, #0
 8002540:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002544:	2320      	movs	r3, #32
 8002546:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800254a:	4620      	mov	r0, r4
 800254c:	f7ff fd8a 	bl	8002064 <HAL_I2C_MasterTxCpltCallback>
 8002550:	e68c      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002552:	2a21      	cmp	r2, #33	; 0x21
 8002554:	d005      	beq.n	8002562 <HAL_I2C_EV_IRQHandler+0x32e>
 8002556:	2940      	cmp	r1, #64	; 0x40
 8002558:	f47f ae88 	bne.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800255c:	2a22      	cmp	r2, #34	; 0x22
 800255e:	f47f ae85 	bne.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 8002562:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002564:	b292      	uxth	r2, r2
 8002566:	b91a      	cbnz	r2, 8002570 <HAL_I2C_EV_IRQHandler+0x33c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800256e:	e6b6      	b.n	80022de <HAL_I2C_EV_IRQHandler+0xaa>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002570:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002574:	2a40      	cmp	r2, #64	; 0x40
 8002576:	d126      	bne.n	80025c6 <HAL_I2C_EV_IRQHandler+0x392>
        if (hi2c->EventCount == 0U)
 8002578:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800257a:	b962      	cbnz	r2, 8002596 <HAL_I2C_EV_IRQHandler+0x362>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800257c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800257e:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002580:	6ca2      	ldr	r2, [r4, #72]	; 0x48
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002582:	d104      	bne.n	800258e <HAL_I2C_EV_IRQHandler+0x35a>
 8002584:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002586:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8002588:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800258a:	3302      	adds	r3, #2
 800258c:	e721      	b.n	80023d2 <HAL_I2C_EV_IRQHandler+0x19e>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800258e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002592:	611a      	str	r2, [r3, #16]
 8002594:	e6f1      	b.n	800237a <HAL_I2C_EV_IRQHandler+0x146>
        else if (hi2c->EventCount == 1U)
 8002596:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002598:	2a01      	cmp	r2, #1
 800259a:	d102      	bne.n	80025a2 <HAL_I2C_EV_IRQHandler+0x36e>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800259c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	e7f7      	b.n	8002592 <HAL_I2C_EV_IRQHandler+0x35e>
        else if (hi2c->EventCount == 2U)
 80025a2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80025a4:	2a02      	cmp	r2, #2
 80025a6:	f47f ae61 	bne.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025aa:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80025ae:	2a22      	cmp	r2, #34	; 0x22
 80025b0:	d104      	bne.n	80025bc <HAL_I2C_EV_IRQHandler+0x388>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	e657      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x38>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80025bc:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80025c0:	2a21      	cmp	r2, #33	; 0x21
 80025c2:	f47f ae53 	bne.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80025c8:	f812 1b01 	ldrb.w	r1, [r2], #1
 80025cc:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 80025ce:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80025d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	8563      	strh	r3, [r4, #42]	; 0x2a
 80025d8:	e648      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025da:	2900      	cmp	r1, #0
 80025dc:	f43f ae46 	beq.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
 80025e0:	0592      	lsls	r2, r2, #22
 80025e2:	f57f ae43 	bpl.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025e6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80025e8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80025ec:	2a21      	cmp	r2, #33	; 0x21
 80025ee:	f47f ae3d 	bne.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 80025f2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80025f4:	b292      	uxth	r2, r2
 80025f6:	2a00      	cmp	r2, #0
 80025f8:	d1e5      	bne.n	80025c6 <HAL_I2C_EV_IRQHandler+0x392>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025fa:	2908      	cmp	r1, #8
 80025fc:	d00d      	beq.n	800261a <HAL_I2C_EV_IRQHandler+0x3e6>
 80025fe:	2920      	cmp	r1, #32
 8002600:	d00b      	beq.n	800261a <HAL_I2C_EV_IRQHandler+0x3e6>
 8002602:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8002606:	d008      	beq.n	800261a <HAL_I2C_EV_IRQHandler+0x3e6>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002608:	6859      	ldr	r1, [r3, #4]
 800260a:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800260e:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002610:	2311      	movs	r3, #17
 8002612:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002614:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8002618:	e794      	b.n	8002544 <HAL_I2C_EV_IRQHandler+0x310>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002620:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002628:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800262a:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800262c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800262e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002630:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002634:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002638:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800263c:	2a40      	cmp	r2, #64	; 0x40
          HAL_I2C_MemTxCpltCallback(hi2c);
 800263e:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002640:	d184      	bne.n	800254c <HAL_I2C_EV_IRQHandler+0x318>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002642:	f7ff fd15 	bl	8002070 <HAL_I2C_MemTxCpltCallback>
 8002646:	e611      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x38>
 8002648:	00010014 	.word	0x00010014
 800264c:	80008081 	.word	0x80008081
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002650:	0505      	lsls	r5, r0, #20
 8002652:	f53f ae0b 	bmi.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002656:	f011 0f40 	tst.w	r1, #64	; 0x40
 800265a:	f001 0104 	and.w	r1, r1, #4
 800265e:	d048      	beq.n	80026f2 <HAL_I2C_EV_IRQHandler+0x4be>
 8002660:	0550      	lsls	r0, r2, #21
 8002662:	d546      	bpl.n	80026f2 <HAL_I2C_EV_IRQHandler+0x4be>
 8002664:	2900      	cmp	r1, #0
 8002666:	d144      	bne.n	80026f2 <HAL_I2C_EV_IRQHandler+0x4be>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002668:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800266c:	2a22      	cmp	r2, #34	; 0x22
 800266e:	f47f adfd 	bne.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
    tmp = hi2c->XferCount;
 8002672:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002674:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8002676:	2a03      	cmp	r2, #3
 8002678:	d914      	bls.n	80026a4 <HAL_I2C_EV_IRQHandler+0x470>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800267a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002680:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002682:	3301      	adds	r3, #1
 8002684:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002686:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002688:	3b01      	subs	r3, #1
 800268a:	b29b      	uxth	r3, r3
 800268c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 800268e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b03      	cmp	r3, #3
 8002694:	f47f adea 	bne.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002698:	6822      	ldr	r2, [r4, #0]
 800269a:	6853      	ldr	r3, [r2, #4]
 800269c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026a0:	6053      	str	r3, [r2, #4]
 80026a2:	e5e3      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80026a4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80026a6:	2802      	cmp	r0, #2
 80026a8:	f43f ade0 	beq.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
 80026ac:	2a01      	cmp	r2, #1
 80026ae:	f63f addd 	bhi.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80026c0:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80026c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026ca:	3301      	adds	r3, #1
 80026cc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80026ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80026d6:	2320      	movs	r3, #32
 80026d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026dc:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e0:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026e4:	2b40      	cmp	r3, #64	; 0x40
 80026e6:	d168      	bne.n	80027ba <HAL_I2C_EV_IRQHandler+0x586>
        hi2c->PreviousState = I2C_STATE_NONE;
 80026e8:	6321      	str	r1, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80026ea:	4620      	mov	r0, r4
 80026ec:	f7ff fcc1 	bl	8002072 <HAL_I2C_MemRxCpltCallback>
 80026f0:	e5bc      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026f2:	2900      	cmp	r1, #0
 80026f4:	f43f adba 	beq.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
 80026f8:	0592      	lsls	r2, r2, #22
 80026fa:	f57f adb7 	bpl.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8002700:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002702:	b289      	uxth	r1, r1
 8002704:	2904      	cmp	r1, #4
 8002706:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002708:	d109      	bne.n	800271e <HAL_I2C_EV_IRQHandler+0x4ea>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002710:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8002716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002718:	3301      	adds	r3, #1
 800271a:	6263      	str	r3, [r4, #36]	; 0x24
 800271c:	e758      	b.n	80025d0 <HAL_I2C_EV_IRQHandler+0x39c>
  else if (hi2c->XferCount == 3U)
 800271e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8002720:	b280      	uxth	r0, r0
 8002722:	2803      	cmp	r0, #3
 8002724:	d10c      	bne.n	8002740 <HAL_I2C_EV_IRQHandler+0x50c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002726:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002728:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800272a:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 800272e:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002730:	d0ef      	beq.n	8002712 <HAL_I2C_EV_IRQHandler+0x4de>
 8002732:	2a02      	cmp	r2, #2
 8002734:	d0ed      	beq.n	8002712 <HAL_I2C_EV_IRQHandler+0x4de>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	e7e8      	b.n	8002712 <HAL_I2C_EV_IRQHandler+0x4de>
  else if (hi2c->XferCount == 2U)
 8002740:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8002742:	b280      	uxth	r0, r0
 8002744:	2802      	cmp	r0, #2
 8002746:	d1e4      	bne.n	8002712 <HAL_I2C_EV_IRQHandler+0x4de>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002748:	2a01      	cmp	r2, #1
 800274a:	d001      	beq.n	8002750 <HAL_I2C_EV_IRQHandler+0x51c>
 800274c:	2a10      	cmp	r2, #16
 800274e:	d128      	bne.n	80027a2 <HAL_I2C_EV_IRQHandler+0x56e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002756:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 800275c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800275e:	1c53      	adds	r3, r2, #1
 8002760:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002762:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002764:	3b01      	subs	r3, #1
 8002766:	b29b      	uxth	r3, r3
 8002768:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800276a:	6823      	ldr	r3, [r4, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 8002770:	6a63      	ldr	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002772:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr++;
 8002774:	3301      	adds	r3, #1
 8002776:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002778:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800277a:	3b01      	subs	r3, #1
 800277c:	b29b      	uxth	r3, r3
 800277e:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002780:	6853      	ldr	r3, [r2, #4]
 8002782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002786:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002788:	2320      	movs	r3, #32
 800278a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800278e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002792:	2b40      	cmp	r3, #64	; 0x40
 8002794:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002798:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800279c:	d10d      	bne.n	80027ba <HAL_I2C_EV_IRQHandler+0x586>
      hi2c->PreviousState = I2C_STATE_NONE;
 800279e:	6323      	str	r3, [r4, #48]	; 0x30
 80027a0:	e7a3      	b.n	80026ea <HAL_I2C_EV_IRQHandler+0x4b6>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80027a2:	2a04      	cmp	r2, #4
 80027a4:	d001      	beq.n	80027aa <HAL_I2C_EV_IRQHandler+0x576>
 80027a6:	2a02      	cmp	r2, #2
 80027a8:	d103      	bne.n	80027b2 <HAL_I2C_EV_IRQHandler+0x57e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027b0:	e7d1      	b.n	8002756 <HAL_I2C_EV_IRQHandler+0x522>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b8:	e7cd      	b.n	8002756 <HAL_I2C_EV_IRQHandler+0x522>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80027ba:	2312      	movs	r3, #18
 80027bc:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80027be:	4620      	mov	r0, r4
 80027c0:	f7ff fc51 	bl	8002066 <HAL_I2C_MasterRxCpltCallback>
 80027c4:	e552      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80027c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80027c8:	b321      	cbz	r1, 8002814 <HAL_I2C_EV_IRQHandler+0x5e0>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80027ca:	6959      	ldr	r1, [r3, #20]
  uint32_t sr2itflags               = 0U;
 80027cc:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027ce:	f011 0f02 	tst.w	r1, #2
 80027d2:	d029      	beq.n	8002828 <HAL_I2C_EV_IRQHandler+0x5f4>
 80027d4:	f412 7f00 	tst.w	r2, #512	; 0x200
 80027d8:	d026      	beq.n	8002828 <HAL_I2C_EV_IRQHandler+0x5f4>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80027da:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80027dc:	b102      	cbz	r2, 80027e0 <HAL_I2C_EV_IRQHandler+0x5ac>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80027de:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80027e0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80027e4:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80027e8:	2a28      	cmp	r2, #40	; 0x28
 80027ea:	d116      	bne.n	800281a <HAL_I2C_EV_IRQHandler+0x5e6>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027f2:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80027f4:	f085 0104 	eor.w	r1, r5, #4
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80027f8:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 80027fa:	f04f 0300 	mov.w	r3, #0
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80027fe:	f3c1 0180 	ubfx	r1, r1, #2, #1
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002802:	bf54      	ite	pl
 8002804:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002806:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8002808:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800280c:	4620      	mov	r0, r4
 800280e:	f7ff fc2d 	bl	800206c <HAL_I2C_AddrCallback>
 8002812:	e52b      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002814:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002816:	6959      	ldr	r1, [r3, #20]
 8002818:	e7d9      	b.n	80027ce <HAL_I2C_EV_IRQHandler+0x59a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800281a:	f06f 0202 	mvn.w	r2, #2
 800281e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8002820:	2300      	movs	r3, #0
 8002822:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8002826:	e521      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002828:	06cd      	lsls	r5, r1, #27
 800282a:	f140 80af 	bpl.w	800298c <HAL_I2C_EV_IRQHandler+0x758>
 800282e:	0595      	lsls	r5, r2, #22
 8002830:	f140 80ac 	bpl.w	800298c <HAL_I2C_EV_IRQHandler+0x758>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002834:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800283e:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002840:	2200      	movs	r2, #0
 8002842:	920b      	str	r2, [sp, #44]	; 0x2c
 8002844:	695a      	ldr	r2, [r3, #20]
 8002846:	920b      	str	r2, [sp, #44]	; 0x2c
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	f042 0201 	orr.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002858:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	0511      	lsls	r1, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800285e:	b2ed      	uxtb	r5, r5
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002860:	d520      	bpl.n	80028a4 <HAL_I2C_EV_IRQHandler+0x670>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002862:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8002866:	2a22      	cmp	r2, #34	; 0x22
 8002868:	d148      	bne.n	80028fc <HAL_I2C_EV_IRQHandler+0x6c8>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800286a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800286c:	6802      	ldr	r2, [r0, #0]
 800286e:	6852      	ldr	r2, [r2, #4]
 8002870:	b292      	uxth	r2, r2
 8002872:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8002874:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002876:	b292      	uxth	r2, r2
 8002878:	b11a      	cbz	r2, 8002882 <HAL_I2C_EV_IRQHandler+0x64e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800287a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800287c:	f042 0204 	orr.w	r2, r2, #4
 8002880:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002888:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800288a:	f7fe ff1f 	bl	80016cc <HAL_DMA_GetState>
 800288e:	2801      	cmp	r0, #1
 8002890:	d008      	beq.n	80028a4 <HAL_I2C_EV_IRQHandler+0x670>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002892:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002894:	4b78      	ldr	r3, [pc, #480]	; (8002a78 <HAL_I2C_EV_IRQHandler+0x844>)
 8002896:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002898:	f7fe fe4c 	bl	8001534 <HAL_DMA_Abort_IT>
 800289c:	b110      	cbz	r0, 80028a4 <HAL_I2C_EV_IRQHandler+0x670>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800289e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80028a0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80028a2:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 80028a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	b313      	cbz	r3, 80028f0 <HAL_I2C_EV_IRQHandler+0x6bc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028aa:	6823      	ldr	r3, [r4, #0]
 80028ac:	695a      	ldr	r2, [r3, #20]
 80028ae:	0752      	lsls	r2, r2, #29
 80028b0:	d509      	bpl.n	80028c6 <HAL_I2C_EV_IRQHandler+0x692>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80028b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028ba:	3301      	adds	r3, #1
 80028bc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80028be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80028c6:	6823      	ldr	r3, [r4, #0]
 80028c8:	695a      	ldr	r2, [r3, #20]
 80028ca:	0650      	lsls	r0, r2, #25
 80028cc:	d509      	bpl.n	80028e2 <HAL_I2C_EV_IRQHandler+0x6ae>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80028d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028d6:	3301      	adds	r3, #1
 80028d8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80028da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29b      	uxth	r3, r3
 80028e0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 80028e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	b11b      	cbz	r3, 80028f0 <HAL_I2C_EV_IRQHandler+0x6bc>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028ea:	f043 0304 	orr.w	r3, r3, #4
 80028ee:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80028f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028f2:	b303      	cbz	r3, 8002936 <HAL_I2C_EV_IRQHandler+0x702>
    I2C_ITError(hi2c);
 80028f4:	4620      	mov	r0, r4
 80028f6:	f7ff fbfb 	bl	80020f0 <I2C_ITError>
 80028fa:	e4b7      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x38>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80028fc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80028fe:	6802      	ldr	r2, [r0, #0]
 8002900:	6852      	ldr	r2, [r2, #4]
 8002902:	b292      	uxth	r2, r2
 8002904:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8002906:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002908:	b292      	uxth	r2, r2
 800290a:	b11a      	cbz	r2, 8002914 <HAL_I2C_EV_IRQHandler+0x6e0>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800290c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800290e:	f042 0204 	orr.w	r2, r2, #4
 8002912:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800291a:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800291c:	f7fe fed6 	bl	80016cc <HAL_DMA_GetState>
 8002920:	2801      	cmp	r0, #1
 8002922:	d0bf      	beq.n	80028a4 <HAL_I2C_EV_IRQHandler+0x670>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002924:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002926:	4b54      	ldr	r3, [pc, #336]	; (8002a78 <HAL_I2C_EV_IRQHandler+0x844>)
 8002928:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800292a:	f7fe fe03 	bl	8001534 <HAL_DMA_Abort_IT>
 800292e:	2800      	cmp	r0, #0
 8002930:	d0b8      	beq.n	80028a4 <HAL_I2C_EV_IRQHandler+0x670>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002932:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002934:	e7b4      	b.n	80028a0 <HAL_I2C_EV_IRQHandler+0x66c>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002936:	2d2a      	cmp	r5, #42	; 0x2a
 8002938:	d106      	bne.n	8002948 <HAL_I2C_EV_IRQHandler+0x714>
      hi2c->PreviousState = I2C_STATE_NONE;
 800293a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800293c:	2328      	movs	r3, #40	; 0x28
 800293e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002942:	4620      	mov	r0, r4
 8002944:	f7ff fb91 	bl	800206a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002948:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800294c:	2b28      	cmp	r3, #40	; 0x28
 800294e:	d10c      	bne.n	800296a <HAL_I2C_EV_IRQHandler+0x736>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002950:	4b4a      	ldr	r3, [pc, #296]	; (8002a7c <HAL_I2C_EV_IRQHandler+0x848>)
 8002952:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8002954:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8002956:	2300      	movs	r3, #0
 8002958:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 800295a:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 800295c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002960:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002964:	f7ff fb83 	bl	800206e <HAL_I2C_ListenCpltCallback>
 8002968:	e480      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800296a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800296c:	2b22      	cmp	r3, #34	; 0x22
 800296e:	d002      	beq.n	8002976 <HAL_I2C_EV_IRQHandler+0x742>
 8002970:	2d22      	cmp	r5, #34	; 0x22
 8002972:	f47f ac7b 	bne.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002976:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002978:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800297a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800297c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002980:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002984:	4620      	mov	r0, r4
 8002986:	f7ff fb70 	bl	800206a <HAL_I2C_SlaveRxCpltCallback>
 800298a:	e46f      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800298c:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 8002990:	2821      	cmp	r0, #33	; 0x21
 8002992:	f001 0504 	and.w	r5, r1, #4
 8002996:	d135      	bne.n	8002a04 <HAL_I2C_EV_IRQHandler+0x7d0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002998:	0609      	lsls	r1, r1, #24
 800299a:	d527      	bpl.n	80029ec <HAL_I2C_EV_IRQHandler+0x7b8>
 800299c:	0551      	lsls	r1, r2, #21
 800299e:	d525      	bpl.n	80029ec <HAL_I2C_EV_IRQHandler+0x7b8>
 80029a0:	bb25      	cbnz	r5, 80029ec <HAL_I2C_EV_IRQHandler+0x7b8>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029a2:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 80029a6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80029a8:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029aa:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 80029ac:	2a00      	cmp	r2, #0
 80029ae:	f43f ac5d 	beq.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80029b4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80029b8:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 80029ba:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80029bc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80029be:	3a01      	subs	r2, #1
 80029c0:	b292      	uxth	r2, r2
 80029c2:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80029c4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80029c6:	b292      	uxth	r2, r2
 80029c8:	2a00      	cmp	r2, #0
 80029ca:	f47f ac4f 	bne.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
 80029ce:	2929      	cmp	r1, #41	; 0x29
 80029d0:	f47f ac4c 	bne.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029da:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80029dc:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80029de:	6320      	str	r0, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80029e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80029e4:	4620      	mov	r0, r4
 80029e6:	f7ff fb3f 	bl	8002068 <HAL_I2C_SlaveTxCpltCallback>
 80029ea:	e43f      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029ec:	2d00      	cmp	r5, #0
 80029ee:	f43f ac3d 	beq.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
 80029f2:	0595      	lsls	r5, r2, #22
 80029f4:	f57f ac3a 	bpl.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 80029f8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80029fa:	b292      	uxth	r2, r2
 80029fc:	2a00      	cmp	r2, #0
 80029fe:	f47f ade2 	bne.w	80025c6 <HAL_I2C_EV_IRQHandler+0x392>
 8002a02:	e433      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x38>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a04:	0648      	lsls	r0, r1, #25
 8002a06:	d527      	bpl.n	8002a58 <HAL_I2C_EV_IRQHandler+0x824>
 8002a08:	0551      	lsls	r1, r2, #21
 8002a0a:	d525      	bpl.n	8002a58 <HAL_I2C_EV_IRQHandler+0x824>
 8002a0c:	bb25      	cbnz	r5, 8002a58 <HAL_I2C_EV_IRQHandler+0x824>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a0e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8002a12:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002a14:	b289      	uxth	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a16:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 8002a18:	2900      	cmp	r1, #0
 8002a1a:	f43f ac27 	beq.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8002a24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a26:	3301      	adds	r3, #1
 8002a28:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002a2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f47f ac18 	bne.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
 8002a3c:	2a2a      	cmp	r2, #42	; 0x2a
 8002a3e:	f47f ac15 	bne.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a42:	6822      	ldr	r2, [r4, #0]
 8002a44:	6853      	ldr	r3, [r2, #4]
 8002a46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a4a:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a4c:	2322      	movs	r3, #34	; 0x22
 8002a4e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002a50:	2328      	movs	r3, #40	; 0x28
 8002a52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8002a56:	e795      	b.n	8002984 <HAL_I2C_EV_IRQHandler+0x750>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a58:	2d00      	cmp	r5, #0
 8002a5a:	f43f ac07 	beq.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
 8002a5e:	0592      	lsls	r2, r2, #22
 8002a60:	f57f ac04 	bpl.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8002a64:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002a66:	b292      	uxth	r2, r2
 8002a68:	2a00      	cmp	r2, #0
 8002a6a:	f43f abff 	beq.w	800226c <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	7013      	strb	r3, [r2, #0]
 8002a74:	e64f      	b.n	8002716 <HAL_I2C_EV_IRQHandler+0x4e2>
 8002a76:	bf00      	nop
 8002a78:	08002079 	.word	0x08002079
 8002a7c:	ffff0000 	.word	0xffff0000

08002a80 <HAL_I2C_ER_IRQHandler>:
{
 8002a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002a82:	6803      	ldr	r3, [r0, #0]
 8002a84:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002a86:	685e      	ldr	r6, [r3, #4]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a88:	f417 7580 	ands.w	r5, r7, #256	; 0x100
{
 8002a8c:	4604      	mov	r4, r0
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a8e:	d006      	beq.n	8002a9e <HAL_I2C_ER_IRQHandler+0x1e>
 8002a90:	f416 7580 	ands.w	r5, r6, #256	; 0x100
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a94:	bf1e      	ittt	ne
 8002a96:	f46f 7280 	mvnne.w	r2, #256	; 0x100
 8002a9a:	615a      	strne	r2, [r3, #20]
    error |= HAL_I2C_ERROR_BERR;
 8002a9c:	2501      	movne	r5, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a9e:	05b9      	lsls	r1, r7, #22
 8002aa0:	d506      	bpl.n	8002ab0 <HAL_I2C_ER_IRQHandler+0x30>
 8002aa2:	05f2      	lsls	r2, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002aa4:	bf42      	ittt	mi
 8002aa6:	f46f 7200 	mvnmi.w	r2, #512	; 0x200
    error |= HAL_I2C_ERROR_ARLO;
 8002aaa:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002aae:	615a      	strmi	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ab0:	0578      	lsls	r0, r7, #21
 8002ab2:	d537      	bpl.n	8002b24 <HAL_I2C_ER_IRQHandler+0xa4>
 8002ab4:	05f1      	lsls	r1, r6, #23
 8002ab6:	d535      	bpl.n	8002b24 <HAL_I2C_ER_IRQHandler+0xa4>
    tmp1 = hi2c->Mode;
 8002ab8:	f894 e03e 	ldrb.w	lr, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 8002abc:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 8002abe:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 8002ac2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002ac4:	f1be 0f20 	cmp.w	lr, #32
    tmp2 = hi2c->XferCount;
 8002ac8:	b289      	uxth	r1, r1
    tmp3 = hi2c->State;
 8002aca:	b2d2      	uxtb	r2, r2
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002acc:	d15a      	bne.n	8002b84 <HAL_I2C_ER_IRQHandler+0x104>
 8002ace:	2900      	cmp	r1, #0
 8002ad0:	d158      	bne.n	8002b84 <HAL_I2C_ER_IRQHandler+0x104>
 8002ad2:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 8002ad6:	2921      	cmp	r1, #33	; 0x21
 8002ad8:	d003      	beq.n	8002ae2 <HAL_I2C_ER_IRQHandler+0x62>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002ada:	2a28      	cmp	r2, #40	; 0x28
 8002adc:	d152      	bne.n	8002b84 <HAL_I2C_ER_IRQHandler+0x104>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002ade:	2821      	cmp	r0, #33	; 0x21
 8002ae0:	d150      	bne.n	8002b84 <HAL_I2C_ER_IRQHandler+0x104>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ae2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ae6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002ae8:	2908      	cmp	r1, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002aea:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002aec:	d001      	beq.n	8002af2 <HAL_I2C_ER_IRQHandler+0x72>
 8002aee:	2920      	cmp	r1, #32
 8002af0:	d12a      	bne.n	8002b48 <HAL_I2C_ER_IRQHandler+0xc8>
 8002af2:	2a28      	cmp	r2, #40	; 0x28
 8002af4:	d128      	bne.n	8002b48 <HAL_I2C_ER_IRQHandler+0xc8>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002af6:	4a2c      	ldr	r2, [pc, #176]	; (8002ba8 <HAL_I2C_ER_IRQHandler+0x128>)
 8002af8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b00:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b06:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b0e:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b10:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b12:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b14:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8002b16:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b18:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b1c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002b20:	f7ff faa5 	bl	800206e <HAL_I2C_ListenCpltCallback>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b24:	053a      	lsls	r2, r7, #20
 8002b26:	d53c      	bpl.n	8002ba2 <HAL_I2C_ER_IRQHandler+0x122>
 8002b28:	05f3      	lsls	r3, r6, #23
 8002b2a:	d53a      	bpl.n	8002ba2 <HAL_I2C_ER_IRQHandler+0x122>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b2c:	6823      	ldr	r3, [r4, #0]
 8002b2e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
    error |= HAL_I2C_ERROR_OVR;
 8002b32:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b36:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 8002b38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b3a:	431d      	orrs	r5, r3
 8002b3c:	6425      	str	r5, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 8002b3e:	4620      	mov	r0, r4
}
 8002b40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8002b44:	f7ff bad4 	b.w	80020f0 <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002b48:	2a21      	cmp	r2, #33	; 0x21
 8002b4a:	d117      	bne.n	8002b7c <HAL_I2C_ER_IRQHandler+0xfc>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002b4c:	4916      	ldr	r1, [pc, #88]	; (8002ba8 <HAL_I2C_ER_IRQHandler+0x128>)
 8002b4e:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b50:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b52:	2220      	movs	r2, #32
 8002b54:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b64:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b6a:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b72:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b74:	4620      	mov	r0, r4
 8002b76:	f7ff fa77 	bl	8002068 <HAL_I2C_SlaveTxCpltCallback>
 8002b7a:	e7d3      	b.n	8002b24 <HAL_I2C_ER_IRQHandler+0xa4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b80:	615a      	str	r2, [r3, #20]
 8002b82:	e7cf      	b.n	8002b24 <HAL_I2C_ER_IRQHandler+0xa4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b88:	615a      	str	r2, [r3, #20]
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8002b8a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002b8e:	2a10      	cmp	r2, #16
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b90:	bf04      	itt	eq
 8002b92:	681a      	ldreq	r2, [r3, #0]
 8002b94:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
      error |= HAL_I2C_ERROR_AF;
 8002b98:	f045 0504 	orr.w	r5, r5, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9c:	bf08      	it	eq
 8002b9e:	601a      	streq	r2, [r3, #0]
 8002ba0:	e7c0      	b.n	8002b24 <HAL_I2C_ER_IRQHandler+0xa4>
  if (error != HAL_I2C_ERROR_NONE)
 8002ba2:	2d00      	cmp	r5, #0
 8002ba4:	d1c8      	bne.n	8002b38 <HAL_I2C_ER_IRQHandler+0xb8>
 8002ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ba8:	ffff0000 	.word	0xffff0000

08002bac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb0:	4604      	mov	r4, r0
 8002bb2:	b918      	cbnz	r0, 8002bbc <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002bb4:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8002bb6:	b002      	add	sp, #8
 8002bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bbc:	6803      	ldr	r3, [r0, #0]
 8002bbe:	07dd      	lsls	r5, r3, #31
 8002bc0:	d410      	bmi.n	8002be4 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	0798      	lsls	r0, r3, #30
 8002bc6:	d458      	bmi.n	8002c7a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc8:	6823      	ldr	r3, [r4, #0]
 8002bca:	071a      	lsls	r2, r3, #28
 8002bcc:	f100 809a 	bmi.w	8002d04 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	075b      	lsls	r3, r3, #29
 8002bd4:	f100 80b8 	bmi.w	8002d48 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bd8:	69a2      	ldr	r2, [r4, #24]
 8002bda:	2a00      	cmp	r2, #0
 8002bdc:	f040 8119 	bne.w	8002e12 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8002be0:	2000      	movs	r0, #0
 8002be2:	e7e8      	b.n	8002bb6 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002be4:	4ba6      	ldr	r3, [pc, #664]	; (8002e80 <HAL_RCC_OscConfig+0x2d4>)
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	f002 020c 	and.w	r2, r2, #12
 8002bec:	2a04      	cmp	r2, #4
 8002bee:	d007      	beq.n	8002c00 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bf6:	2a08      	cmp	r2, #8
 8002bf8:	d10a      	bne.n	8002c10 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	0259      	lsls	r1, r3, #9
 8002bfe:	d507      	bpl.n	8002c10 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c00:	4b9f      	ldr	r3, [pc, #636]	; (8002e80 <HAL_RCC_OscConfig+0x2d4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	039a      	lsls	r2, r3, #14
 8002c06:	d5dc      	bpl.n	8002bc2 <HAL_RCC_OscConfig+0x16>
 8002c08:	6863      	ldr	r3, [r4, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1d9      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x16>
 8002c0e:	e7d1      	b.n	8002bb4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c10:	6863      	ldr	r3, [r4, #4]
 8002c12:	4d9b      	ldr	r5, [pc, #620]	; (8002e80 <HAL_RCC_OscConfig+0x2d4>)
 8002c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c18:	d111      	bne.n	8002c3e <HAL_RCC_OscConfig+0x92>
 8002c1a:	682b      	ldr	r3, [r5, #0]
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c20:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002c22:	f7fe f895 	bl	8000d50 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c26:	4d96      	ldr	r5, [pc, #600]	; (8002e80 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002c28:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2a:	682b      	ldr	r3, [r5, #0]
 8002c2c:	039b      	lsls	r3, r3, #14
 8002c2e:	d4c8      	bmi.n	8002bc2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c30:	f7fe f88e 	bl	8000d50 <HAL_GetTick>
 8002c34:	1b80      	subs	r0, r0, r6
 8002c36:	2864      	cmp	r0, #100	; 0x64
 8002c38:	d9f7      	bls.n	8002c2a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8002c3a:	2003      	movs	r0, #3
 8002c3c:	e7bb      	b.n	8002bb6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c42:	d104      	bne.n	8002c4e <HAL_RCC_OscConfig+0xa2>
 8002c44:	682b      	ldr	r3, [r5, #0]
 8002c46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c4a:	602b      	str	r3, [r5, #0]
 8002c4c:	e7e5      	b.n	8002c1a <HAL_RCC_OscConfig+0x6e>
 8002c4e:	682a      	ldr	r2, [r5, #0]
 8002c50:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c54:	602a      	str	r2, [r5, #0]
 8002c56:	682a      	ldr	r2, [r5, #0]
 8002c58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c5c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1df      	bne.n	8002c22 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8002c62:	f7fe f875 	bl	8000d50 <HAL_GetTick>
 8002c66:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c68:	682b      	ldr	r3, [r5, #0]
 8002c6a:	039f      	lsls	r7, r3, #14
 8002c6c:	d5a9      	bpl.n	8002bc2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c6e:	f7fe f86f 	bl	8000d50 <HAL_GetTick>
 8002c72:	1b80      	subs	r0, r0, r6
 8002c74:	2864      	cmp	r0, #100	; 0x64
 8002c76:	d9f7      	bls.n	8002c68 <HAL_RCC_OscConfig+0xbc>
 8002c78:	e7df      	b.n	8002c3a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c7a:	4b81      	ldr	r3, [pc, #516]	; (8002e80 <HAL_RCC_OscConfig+0x2d4>)
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	f012 0f0c 	tst.w	r2, #12
 8002c82:	d007      	beq.n	8002c94 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c8a:	2a08      	cmp	r2, #8
 8002c8c:	d111      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	025e      	lsls	r6, r3, #9
 8002c92:	d40e      	bmi.n	8002cb2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c94:	4b7a      	ldr	r3, [pc, #488]	; (8002e80 <HAL_RCC_OscConfig+0x2d4>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	0795      	lsls	r5, r2, #30
 8002c9a:	d502      	bpl.n	8002ca2 <HAL_RCC_OscConfig+0xf6>
 8002c9c:	68e2      	ldr	r2, [r4, #12]
 8002c9e:	2a01      	cmp	r2, #1
 8002ca0:	d188      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	6921      	ldr	r1, [r4, #16]
 8002ca6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002caa:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002cae:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb0:	e78a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cb2:	68e2      	ldr	r2, [r4, #12]
 8002cb4:	4b73      	ldr	r3, [pc, #460]	; (8002e84 <HAL_RCC_OscConfig+0x2d8>)
 8002cb6:	b1b2      	cbz	r2, 8002ce6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8002cb8:	2201      	movs	r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002cbc:	f7fe f848 	bl	8000d50 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc0:	4d6f      	ldr	r5, [pc, #444]	; (8002e80 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002cc2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc4:	682b      	ldr	r3, [r5, #0]
 8002cc6:	0798      	lsls	r0, r3, #30
 8002cc8:	d507      	bpl.n	8002cda <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cca:	682b      	ldr	r3, [r5, #0]
 8002ccc:	6922      	ldr	r2, [r4, #16]
 8002cce:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002cd2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002cd6:	602b      	str	r3, [r5, #0]
 8002cd8:	e776      	b.n	8002bc8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cda:	f7fe f839 	bl	8000d50 <HAL_GetTick>
 8002cde:	1b80      	subs	r0, r0, r6
 8002ce0:	2802      	cmp	r0, #2
 8002ce2:	d9ef      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x118>
 8002ce4:	e7a9      	b.n	8002c3a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002ce6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002ce8:	f7fe f832 	bl	8000d50 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cec:	4d64      	ldr	r5, [pc, #400]	; (8002e80 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002cee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf0:	682b      	ldr	r3, [r5, #0]
 8002cf2:	0799      	lsls	r1, r3, #30
 8002cf4:	f57f af68 	bpl.w	8002bc8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf8:	f7fe f82a 	bl	8000d50 <HAL_GetTick>
 8002cfc:	1b80      	subs	r0, r0, r6
 8002cfe:	2802      	cmp	r0, #2
 8002d00:	d9f6      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x144>
 8002d02:	e79a      	b.n	8002c3a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d04:	6962      	ldr	r2, [r4, #20]
 8002d06:	4b60      	ldr	r3, [pc, #384]	; (8002e88 <HAL_RCC_OscConfig+0x2dc>)
 8002d08:	b17a      	cbz	r2, 8002d2a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002d0e:	f7fe f81f 	bl	8000d50 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d12:	4d5b      	ldr	r5, [pc, #364]	; (8002e80 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002d14:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d16:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002d18:	079f      	lsls	r7, r3, #30
 8002d1a:	f53f af59 	bmi.w	8002bd0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d1e:	f7fe f817 	bl	8000d50 <HAL_GetTick>
 8002d22:	1b80      	subs	r0, r0, r6
 8002d24:	2802      	cmp	r0, #2
 8002d26:	d9f6      	bls.n	8002d16 <HAL_RCC_OscConfig+0x16a>
 8002d28:	e787      	b.n	8002c3a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8002d2a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002d2c:	f7fe f810 	bl	8000d50 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d30:	4d53      	ldr	r5, [pc, #332]	; (8002e80 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002d32:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d34:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002d36:	0798      	lsls	r0, r3, #30
 8002d38:	f57f af4a 	bpl.w	8002bd0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d3c:	f7fe f808 	bl	8000d50 <HAL_GetTick>
 8002d40:	1b80      	subs	r0, r0, r6
 8002d42:	2802      	cmp	r0, #2
 8002d44:	d9f6      	bls.n	8002d34 <HAL_RCC_OscConfig+0x188>
 8002d46:	e778      	b.n	8002c3a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d48:	4b4d      	ldr	r3, [pc, #308]	; (8002e80 <HAL_RCC_OscConfig+0x2d4>)
 8002d4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d4c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002d50:	d128      	bne.n	8002da4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d52:	9201      	str	r2, [sp, #4]
 8002d54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d56:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d62:	9301      	str	r3, [sp, #4]
 8002d64:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002d66:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d68:	4d48      	ldr	r5, [pc, #288]	; (8002e8c <HAL_RCC_OscConfig+0x2e0>)
 8002d6a:	682b      	ldr	r3, [r5, #0]
 8002d6c:	05d9      	lsls	r1, r3, #23
 8002d6e:	d51b      	bpl.n	8002da8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d70:	68a3      	ldr	r3, [r4, #8]
 8002d72:	4d43      	ldr	r5, [pc, #268]	; (8002e80 <HAL_RCC_OscConfig+0x2d4>)
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d127      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x21c>
 8002d78:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002d80:	f7fd ffe6 	bl	8000d50 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d84:	4d3e      	ldr	r5, [pc, #248]	; (8002e80 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002d86:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d88:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002d8e:	079b      	lsls	r3, r3, #30
 8002d90:	d539      	bpl.n	8002e06 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8002d92:	2e00      	cmp	r6, #0
 8002d94:	f43f af20 	beq.w	8002bd8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d98:	4a39      	ldr	r2, [pc, #228]	; (8002e80 <HAL_RCC_OscConfig+0x2d4>)
 8002d9a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002da0:	6413      	str	r3, [r2, #64]	; 0x40
 8002da2:	e719      	b.n	8002bd8 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002da4:	2600      	movs	r6, #0
 8002da6:	e7df      	b.n	8002d68 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002da8:	682b      	ldr	r3, [r5, #0]
 8002daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dae:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002db0:	f7fd ffce 	bl	8000d50 <HAL_GetTick>
 8002db4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db6:	682b      	ldr	r3, [r5, #0]
 8002db8:	05da      	lsls	r2, r3, #23
 8002dba:	d4d9      	bmi.n	8002d70 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dbc:	f7fd ffc8 	bl	8000d50 <HAL_GetTick>
 8002dc0:	1bc0      	subs	r0, r0, r7
 8002dc2:	2802      	cmp	r0, #2
 8002dc4:	d9f7      	bls.n	8002db6 <HAL_RCC_OscConfig+0x20a>
 8002dc6:	e738      	b.n	8002c3a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc8:	2b05      	cmp	r3, #5
 8002dca:	d104      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x22a>
 8002dcc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002dce:	f043 0304 	orr.w	r3, r3, #4
 8002dd2:	672b      	str	r3, [r5, #112]	; 0x70
 8002dd4:	e7d0      	b.n	8002d78 <HAL_RCC_OscConfig+0x1cc>
 8002dd6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002dd8:	f022 0201 	bic.w	r2, r2, #1
 8002ddc:	672a      	str	r2, [r5, #112]	; 0x70
 8002dde:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002de0:	f022 0204 	bic.w	r2, r2, #4
 8002de4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1ca      	bne.n	8002d80 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8002dea:	f7fd ffb1 	bl	8000d50 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dee:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002df2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002df6:	0798      	lsls	r0, r3, #30
 8002df8:	d5cb      	bpl.n	8002d92 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dfa:	f7fd ffa9 	bl	8000d50 <HAL_GetTick>
 8002dfe:	1bc0      	subs	r0, r0, r7
 8002e00:	4540      	cmp	r0, r8
 8002e02:	d9f7      	bls.n	8002df4 <HAL_RCC_OscConfig+0x248>
 8002e04:	e719      	b.n	8002c3a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e06:	f7fd ffa3 	bl	8000d50 <HAL_GetTick>
 8002e0a:	1bc0      	subs	r0, r0, r7
 8002e0c:	4540      	cmp	r0, r8
 8002e0e:	d9bd      	bls.n	8002d8c <HAL_RCC_OscConfig+0x1e0>
 8002e10:	e713      	b.n	8002c3a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e12:	4d1b      	ldr	r5, [pc, #108]	; (8002e80 <HAL_RCC_OscConfig+0x2d4>)
 8002e14:	68ab      	ldr	r3, [r5, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	f43f aeca 	beq.w	8002bb4 <HAL_RCC_OscConfig+0x8>
 8002e20:	4e1b      	ldr	r6, [pc, #108]	; (8002e90 <HAL_RCC_OscConfig+0x2e4>)
 8002e22:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e24:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002e26:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e28:	d134      	bne.n	8002e94 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8002e2a:	f7fd ff91 	bl	8000d50 <HAL_GetTick>
 8002e2e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e30:	682b      	ldr	r3, [r5, #0]
 8002e32:	0199      	lsls	r1, r3, #6
 8002e34:	d41e      	bmi.n	8002e74 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e36:	6a22      	ldr	r2, [r4, #32]
 8002e38:	69e3      	ldr	r3, [r4, #28]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e3e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002e42:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e44:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002e48:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e4a:	4c0d      	ldr	r4, [pc, #52]	; (8002e80 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e4c:	0852      	lsrs	r2, r2, #1
 8002e4e:	3a01      	subs	r2, #1
 8002e50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e54:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002e56:	2301      	movs	r3, #1
 8002e58:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002e5a:	f7fd ff79 	bl	8000d50 <HAL_GetTick>
 8002e5e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e60:	6823      	ldr	r3, [r4, #0]
 8002e62:	019a      	lsls	r2, r3, #6
 8002e64:	f53f aebc 	bmi.w	8002be0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e68:	f7fd ff72 	bl	8000d50 <HAL_GetTick>
 8002e6c:	1b40      	subs	r0, r0, r5
 8002e6e:	2802      	cmp	r0, #2
 8002e70:	d9f6      	bls.n	8002e60 <HAL_RCC_OscConfig+0x2b4>
 8002e72:	e6e2      	b.n	8002c3a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e74:	f7fd ff6c 	bl	8000d50 <HAL_GetTick>
 8002e78:	1bc0      	subs	r0, r0, r7
 8002e7a:	2802      	cmp	r0, #2
 8002e7c:	d9d8      	bls.n	8002e30 <HAL_RCC_OscConfig+0x284>
 8002e7e:	e6dc      	b.n	8002c3a <HAL_RCC_OscConfig+0x8e>
 8002e80:	40023800 	.word	0x40023800
 8002e84:	42470000 	.word	0x42470000
 8002e88:	42470e80 	.word	0x42470e80
 8002e8c:	40007000 	.word	0x40007000
 8002e90:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002e94:	f7fd ff5c 	bl	8000d50 <HAL_GetTick>
 8002e98:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9a:	682b      	ldr	r3, [r5, #0]
 8002e9c:	019b      	lsls	r3, r3, #6
 8002e9e:	f57f ae9f 	bpl.w	8002be0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea2:	f7fd ff55 	bl	8000d50 <HAL_GetTick>
 8002ea6:	1b00      	subs	r0, r0, r4
 8002ea8:	2802      	cmp	r0, #2
 8002eaa:	d9f6      	bls.n	8002e9a <HAL_RCC_OscConfig+0x2ee>
 8002eac:	e6c5      	b.n	8002c3a <HAL_RCC_OscConfig+0x8e>
 8002eae:	bf00      	nop

08002eb0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eb0:	4913      	ldr	r1, [pc, #76]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002eb2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eb4:	688b      	ldr	r3, [r1, #8]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d003      	beq.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x16>
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d003      	beq.n	8002eca <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ec2:	4810      	ldr	r0, [pc, #64]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002ec4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002ec6:	4810      	ldr	r0, [pc, #64]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x58>)
 8002ec8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eca:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ecc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ece:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ed0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed4:	bf14      	ite	ne
 8002ed6:	480c      	ldrne	r0, [pc, #48]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed8:	480a      	ldreq	r0, [pc, #40]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eda:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002ede:	bf18      	it	ne
 8002ee0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ee2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee6:	fba1 0100 	umull	r0, r1, r1, r0
 8002eea:	f7fd fd5f 	bl	80009ac <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002eee:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x50>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002efa:	fbb0 f0f3 	udiv	r0, r0, r3
 8002efe:	bd08      	pop	{r3, pc}
 8002f00:	40023800 	.word	0x40023800
 8002f04:	00f42400 	.word	0x00f42400
 8002f08:	007a1200 	.word	0x007a1200

08002f0c <HAL_RCC_ClockConfig>:
{
 8002f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f10:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002f12:	4604      	mov	r4, r0
 8002f14:	b910      	cbnz	r0, 8002f1c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002f16:	2001      	movs	r0, #1
 8002f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f1c:	4b44      	ldr	r3, [pc, #272]	; (8003030 <HAL_RCC_ClockConfig+0x124>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	f002 020f 	and.w	r2, r2, #15
 8002f24:	428a      	cmp	r2, r1
 8002f26:	d328      	bcc.n	8002f7a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f28:	6821      	ldr	r1, [r4, #0]
 8002f2a:	078f      	lsls	r7, r1, #30
 8002f2c:	d42d      	bmi.n	8002f8a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f2e:	07c8      	lsls	r0, r1, #31
 8002f30:	d440      	bmi.n	8002fb4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f32:	4b3f      	ldr	r3, [pc, #252]	; (8003030 <HAL_RCC_ClockConfig+0x124>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	f002 020f 	and.w	r2, r2, #15
 8002f3a:	4295      	cmp	r5, r2
 8002f3c:	d366      	bcc.n	800300c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f3e:	6822      	ldr	r2, [r4, #0]
 8002f40:	0751      	lsls	r1, r2, #29
 8002f42:	d46c      	bmi.n	800301e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f44:	0713      	lsls	r3, r2, #28
 8002f46:	d507      	bpl.n	8002f58 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f48:	4a3a      	ldr	r2, [pc, #232]	; (8003034 <HAL_RCC_ClockConfig+0x128>)
 8002f4a:	6921      	ldr	r1, [r4, #16]
 8002f4c:	6893      	ldr	r3, [r2, #8]
 8002f4e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002f52:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002f56:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f58:	f7ff ffaa 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 8002f5c:	4b35      	ldr	r3, [pc, #212]	; (8003034 <HAL_RCC_ClockConfig+0x128>)
 8002f5e:	4a36      	ldr	r2, [pc, #216]	; (8003038 <HAL_RCC_ClockConfig+0x12c>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002f66:	5cd3      	ldrb	r3, [r2, r3]
 8002f68:	40d8      	lsrs	r0, r3
 8002f6a:	4b34      	ldr	r3, [pc, #208]	; (800303c <HAL_RCC_ClockConfig+0x130>)
 8002f6c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002f6e:	2000      	movs	r0, #0
 8002f70:	f7fd fea4 	bl	8000cbc <HAL_InitTick>
  return HAL_OK;
 8002f74:	2000      	movs	r0, #0
 8002f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7a:	b2ca      	uxtb	r2, r1
 8002f7c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	4299      	cmp	r1, r3
 8002f86:	d1c6      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xa>
 8002f88:	e7ce      	b.n	8002f28 <HAL_RCC_ClockConfig+0x1c>
 8002f8a:	4b2a      	ldr	r3, [pc, #168]	; (8003034 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f8c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f90:	bf1e      	ittt	ne
 8002f92:	689a      	ldrne	r2, [r3, #8]
 8002f94:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002f98:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f9c:	bf42      	ittt	mi
 8002f9e:	689a      	ldrmi	r2, [r3, #8]
 8002fa0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002fa4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	68a0      	ldr	r0, [r4, #8]
 8002faa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002fae:	4302      	orrs	r2, r0
 8002fb0:	609a      	str	r2, [r3, #8]
 8002fb2:	e7bc      	b.n	8002f2e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb4:	6862      	ldr	r2, [r4, #4]
 8002fb6:	4b1f      	ldr	r3, [pc, #124]	; (8003034 <HAL_RCC_ClockConfig+0x128>)
 8002fb8:	2a01      	cmp	r2, #1
 8002fba:	d11d      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc2:	d0a8      	beq.n	8002f16 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fc4:	4e1b      	ldr	r6, [pc, #108]	; (8003034 <HAL_RCC_ClockConfig+0x128>)
 8002fc6:	68b3      	ldr	r3, [r6, #8]
 8002fc8:	f023 0303 	bic.w	r3, r3, #3
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002fd0:	f7fd febe 	bl	8000d50 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002fd8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fda:	68b3      	ldr	r3, [r6, #8]
 8002fdc:	6862      	ldr	r2, [r4, #4]
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002fe6:	d0a4      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe8:	f7fd feb2 	bl	8000d50 <HAL_GetTick>
 8002fec:	1bc0      	subs	r0, r0, r7
 8002fee:	4540      	cmp	r0, r8
 8002ff0:	d9f3      	bls.n	8002fda <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002ff2:	2003      	movs	r0, #3
}
 8002ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ff8:	1e91      	subs	r1, r2, #2
 8002ffa:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffc:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ffe:	d802      	bhi.n	8003006 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003000:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003004:	e7dd      	b.n	8002fc2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003006:	f013 0f02 	tst.w	r3, #2
 800300a:	e7da      	b.n	8002fc2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300c:	b2ea      	uxtb	r2, r5
 800300e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	429d      	cmp	r5, r3
 8003018:	f47f af7d 	bne.w	8002f16 <HAL_RCC_ClockConfig+0xa>
 800301c:	e78f      	b.n	8002f3e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800301e:	4905      	ldr	r1, [pc, #20]	; (8003034 <HAL_RCC_ClockConfig+0x128>)
 8003020:	68e0      	ldr	r0, [r4, #12]
 8003022:	688b      	ldr	r3, [r1, #8]
 8003024:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003028:	4303      	orrs	r3, r0
 800302a:	608b      	str	r3, [r1, #8]
 800302c:	e78a      	b.n	8002f44 <HAL_RCC_ClockConfig+0x38>
 800302e:	bf00      	nop
 8003030:	40023c00 	.word	0x40023c00
 8003034:	40023800 	.word	0x40023800
 8003038:	0800444c 	.word	0x0800444c
 800303c:	20000008 	.word	0x20000008

08003040 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003040:	4b04      	ldr	r3, [pc, #16]	; (8003054 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003042:	4a05      	ldr	r2, [pc, #20]	; (8003058 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800304a:	5cd3      	ldrb	r3, [r2, r3]
 800304c:	4a03      	ldr	r2, [pc, #12]	; (800305c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800304e:	6810      	ldr	r0, [r2, #0]
}
 8003050:	40d8      	lsrs	r0, r3
 8003052:	4770      	bx	lr
 8003054:	40023800 	.word	0x40023800
 8003058:	0800445c 	.word	0x0800445c
 800305c:	20000008 	.word	0x20000008

08003060 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003060:	4b04      	ldr	r3, [pc, #16]	; (8003074 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003062:	4a05      	ldr	r2, [pc, #20]	; (8003078 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800306a:	5cd3      	ldrb	r3, [r2, r3]
 800306c:	4a03      	ldr	r2, [pc, #12]	; (800307c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800306e:	6810      	ldr	r0, [r2, #0]
}
 8003070:	40d8      	lsrs	r0, r3
 8003072:	4770      	bx	lr
 8003074:	40023800 	.word	0x40023800
 8003078:	0800445c 	.word	0x0800445c
 800307c:	20000008 	.word	0x20000008

08003080 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003080:	6a03      	ldr	r3, [r0, #32]
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003088:	6a03      	ldr	r3, [r0, #32]
{
 800308a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800308c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800308e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003090:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003092:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003096:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003098:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800309a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800309e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030a0:	4d0a      	ldr	r5, [pc, #40]	; (80030cc <TIM_OC1_SetConfig+0x4c>)
 80030a2:	42a8      	cmp	r0, r5
 80030a4:	d10b      	bne.n	80030be <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030a6:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030a8:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 80030aa:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80030ae:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80030b0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030b2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80030b6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80030b8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80030bc:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030be:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030c0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030c2:	684a      	ldr	r2, [r1, #4]
 80030c4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030c6:	6203      	str	r3, [r0, #32]
 80030c8:	bd70      	pop	{r4, r5, r6, pc}
 80030ca:	bf00      	nop
 80030cc:	40010000 	.word	0x40010000

080030d0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030d0:	6a03      	ldr	r3, [r0, #32]
 80030d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030d6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030d8:	6a03      	ldr	r3, [r0, #32]
{
 80030da:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030dc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030de:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030e0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030e2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80030e6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030e8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80030ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030ee:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030f2:	4d0b      	ldr	r5, [pc, #44]	; (8003120 <TIM_OC3_SetConfig+0x50>)
 80030f4:	42a8      	cmp	r0, r5
 80030f6:	d10d      	bne.n	8003114 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030f8:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030fa:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 80030fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003100:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003104:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003106:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800310a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 800310c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003110:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003114:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003116:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003118:	684a      	ldr	r2, [r1, #4]
 800311a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800311c:	6203      	str	r3, [r0, #32]
 800311e:	bd70      	pop	{r4, r5, r6, pc}
 8003120:	40010000 	.word	0x40010000

08003124 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003124:	6a03      	ldr	r3, [r0, #32]
 8003126:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800312a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800312c:	6a03      	ldr	r3, [r0, #32]
{
 800312e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003130:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003132:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003134:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003136:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800313a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800313e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8003140:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003144:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003148:	4d06      	ldr	r5, [pc, #24]	; (8003164 <TIM_OC4_SetConfig+0x40>)
 800314a:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800314c:	bf02      	ittt	eq
 800314e:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003150:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003154:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003158:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800315a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800315c:	684a      	ldr	r2, [r1, #4]
 800315e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003160:	6203      	str	r3, [r0, #32]
 8003162:	bd30      	pop	{r4, r5, pc}
 8003164:	40010000 	.word	0x40010000

08003168 <HAL_TIM_PWM_MspInit>:
 8003168:	4770      	bx	lr
	...

0800316c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800316c:	4a24      	ldr	r2, [pc, #144]	; (8003200 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 800316e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003170:	4290      	cmp	r0, r2
 8003172:	d00e      	beq.n	8003192 <TIM_Base_SetConfig+0x26>
 8003174:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003178:	d00b      	beq.n	8003192 <TIM_Base_SetConfig+0x26>
 800317a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800317e:	4290      	cmp	r0, r2
 8003180:	d007      	beq.n	8003192 <TIM_Base_SetConfig+0x26>
 8003182:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003186:	4290      	cmp	r0, r2
 8003188:	d003      	beq.n	8003192 <TIM_Base_SetConfig+0x26>
 800318a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800318e:	4290      	cmp	r0, r2
 8003190:	d115      	bne.n	80031be <TIM_Base_SetConfig+0x52>
    tmpcr1 |= Structure->CounterMode;
 8003192:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003198:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800319a:	4a19      	ldr	r2, [pc, #100]	; (8003200 <TIM_Base_SetConfig+0x94>)
 800319c:	4290      	cmp	r0, r2
 800319e:	d019      	beq.n	80031d4 <TIM_Base_SetConfig+0x68>
 80031a0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80031a4:	d016      	beq.n	80031d4 <TIM_Base_SetConfig+0x68>
 80031a6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80031aa:	4290      	cmp	r0, r2
 80031ac:	d012      	beq.n	80031d4 <TIM_Base_SetConfig+0x68>
 80031ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031b2:	4290      	cmp	r0, r2
 80031b4:	d00e      	beq.n	80031d4 <TIM_Base_SetConfig+0x68>
 80031b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031ba:	4290      	cmp	r0, r2
 80031bc:	d00a      	beq.n	80031d4 <TIM_Base_SetConfig+0x68>
 80031be:	4a11      	ldr	r2, [pc, #68]	; (8003204 <TIM_Base_SetConfig+0x98>)
 80031c0:	4290      	cmp	r0, r2
 80031c2:	d007      	beq.n	80031d4 <TIM_Base_SetConfig+0x68>
 80031c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031c8:	4290      	cmp	r0, r2
 80031ca:	d003      	beq.n	80031d4 <TIM_Base_SetConfig+0x68>
 80031cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031d0:	4290      	cmp	r0, r2
 80031d2:	d103      	bne.n	80031dc <TIM_Base_SetConfig+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031d4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80031d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031da:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031dc:	694a      	ldr	r2, [r1, #20]
 80031de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031e2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80031e4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031e6:	688b      	ldr	r3, [r1, #8]
 80031e8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80031ea:	680b      	ldr	r3, [r1, #0]
 80031ec:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031ee:	4b04      	ldr	r3, [pc, #16]	; (8003200 <TIM_Base_SetConfig+0x94>)
 80031f0:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80031f2:	bf04      	itt	eq
 80031f4:	690b      	ldreq	r3, [r1, #16]
 80031f6:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80031f8:	2301      	movs	r3, #1
 80031fa:	6143      	str	r3, [r0, #20]
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	40010000 	.word	0x40010000
 8003204:	40014000 	.word	0x40014000

08003208 <HAL_TIM_Base_Init>:
{
 8003208:	b510      	push	{r4, lr}
  if (htim == NULL)
 800320a:	4604      	mov	r4, r0
 800320c:	b1a0      	cbz	r0, 8003238 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800320e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003212:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003216:	b91b      	cbnz	r3, 8003220 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003218:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800321c:	f000 ff9a 	bl	8004154 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003220:	2302      	movs	r3, #2
 8003222:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003226:	6820      	ldr	r0, [r4, #0]
 8003228:	1d21      	adds	r1, r4, #4
 800322a:	f7ff ff9f 	bl	800316c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800322e:	2301      	movs	r3, #1
 8003230:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003234:	2000      	movs	r0, #0
 8003236:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003238:	2001      	movs	r0, #1
}
 800323a:	bd10      	pop	{r4, pc}

0800323c <HAL_TIM_PWM_Init>:
{
 800323c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800323e:	4604      	mov	r4, r0
 8003240:	b1a0      	cbz	r0, 800326c <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003242:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003246:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800324a:	b91b      	cbnz	r3, 8003254 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800324c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003250:	f7ff ff8a 	bl	8003168 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003254:	2302      	movs	r3, #2
 8003256:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800325a:	6820      	ldr	r0, [r4, #0]
 800325c:	1d21      	adds	r1, r4, #4
 800325e:	f7ff ff85 	bl	800316c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003262:	2301      	movs	r3, #1
 8003264:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003268:	2000      	movs	r0, #0
 800326a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800326c:	2001      	movs	r0, #1
}
 800326e:	bd10      	pop	{r4, pc}

08003270 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003270:	6a03      	ldr	r3, [r0, #32]
 8003272:	f023 0310 	bic.w	r3, r3, #16
 8003276:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003278:	6a03      	ldr	r3, [r0, #32]
{
 800327a:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 800327c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800327e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003280:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003282:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003286:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800328a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800328c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003290:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003294:	4d0b      	ldr	r5, [pc, #44]	; (80032c4 <TIM_OC2_SetConfig+0x54>)
 8003296:	42a8      	cmp	r0, r5
 8003298:	d10d      	bne.n	80032b6 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800329a:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800329c:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 800329e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032a2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032a6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032a8:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032ac:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80032ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032b2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80032b6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80032b8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80032ba:	684a      	ldr	r2, [r1, #4]
 80032bc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80032be:	6203      	str	r3, [r0, #32]
 80032c0:	bd70      	pop	{r4, r5, r6, pc}
 80032c2:	bf00      	nop
 80032c4:	40010000 	.word	0x40010000

080032c8 <HAL_TIM_PWM_ConfigChannel>:
{
 80032c8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80032ca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80032ce:	2b01      	cmp	r3, #1
{
 80032d0:	4604      	mov	r4, r0
 80032d2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80032d6:	d025      	beq.n	8003324 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80032d8:	2301      	movs	r3, #1
 80032da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80032de:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 80032e2:	2a0c      	cmp	r2, #12
 80032e4:	d818      	bhi.n	8003318 <HAL_TIM_PWM_ConfigChannel+0x50>
 80032e6:	e8df f002 	tbb	[pc, r2]
 80032ea:	1707      	.short	0x1707
 80032ec:	171e1717 	.word	0x171e1717
 80032f0:	172f1717 	.word	0x172f1717
 80032f4:	1717      	.short	0x1717
 80032f6:	40          	.byte	0x40
 80032f7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032f8:	6820      	ldr	r0, [r4, #0]
 80032fa:	f7ff fec1 	bl	8003080 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032fe:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003300:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003302:	699a      	ldr	r2, [r3, #24]
 8003304:	f042 0208 	orr.w	r2, r2, #8
 8003308:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800330a:	699a      	ldr	r2, [r3, #24]
 800330c:	f022 0204 	bic.w	r2, r2, #4
 8003310:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003312:	699a      	ldr	r2, [r3, #24]
 8003314:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003316:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003318:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800331a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800331c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003320:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003324:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003326:	6820      	ldr	r0, [r4, #0]
 8003328:	f7ff ffa2 	bl	8003270 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800332c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800332e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800333e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003346:	e7e6      	b.n	8003316 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003348:	6820      	ldr	r0, [r4, #0]
 800334a:	f7ff fec1 	bl	80030d0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800334e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003350:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003352:	69da      	ldr	r2, [r3, #28]
 8003354:	f042 0208 	orr.w	r2, r2, #8
 8003358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800335a:	69da      	ldr	r2, [r3, #28]
 800335c:	f022 0204 	bic.w	r2, r2, #4
 8003360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003362:	69da      	ldr	r2, [r3, #28]
 8003364:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003366:	61da      	str	r2, [r3, #28]
      break;
 8003368:	e7d6      	b.n	8003318 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800336a:	6820      	ldr	r0, [r4, #0]
 800336c:	f7ff feda 	bl	8003124 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003370:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003372:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003374:	69da      	ldr	r2, [r3, #28]
 8003376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800337a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800337c:	69da      	ldr	r2, [r3, #28]
 800337e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003382:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003384:	69da      	ldr	r2, [r3, #28]
 8003386:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800338a:	e7ec      	b.n	8003366 <HAL_TIM_PWM_ConfigChannel+0x9e>

0800338c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800338c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800338e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003390:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003392:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003396:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800339a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800339c:	6083      	str	r3, [r0, #8]
 800339e:	bd10      	pop	{r4, pc}

080033a0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80033a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80033a4:	2b01      	cmp	r3, #1
{
 80033a6:	b570      	push	{r4, r5, r6, lr}
 80033a8:	4604      	mov	r4, r0
 80033aa:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80033ae:	d019      	beq.n	80033e4 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 80033b0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80033b4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80033b6:	2301      	movs	r3, #1
 80033b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80033bc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80033c6:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80033c8:	680b      	ldr	r3, [r1, #0]
 80033ca:	2b40      	cmp	r3, #64	; 0x40
 80033cc:	d065      	beq.n	800349a <HAL_TIM_ConfigClockSource+0xfa>
 80033ce:	d815      	bhi.n	80033fc <HAL_TIM_ConfigClockSource+0x5c>
 80033d0:	2b10      	cmp	r3, #16
 80033d2:	d00c      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0x4e>
 80033d4:	d807      	bhi.n	80033e6 <HAL_TIM_ConfigClockSource+0x46>
 80033d6:	b153      	cbz	r3, 80033ee <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 80033d8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80033da:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80033dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80033e0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80033e4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80033e6:	2b20      	cmp	r3, #32
 80033e8:	d001      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0x4e>
 80033ea:	2b30      	cmp	r3, #48	; 0x30
 80033ec:	d1f4      	bne.n	80033d8 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 80033ee:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033f0:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80033f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033f8:	4313      	orrs	r3, r2
 80033fa:	e01a      	b.n	8003432 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80033fc:	2b60      	cmp	r3, #96	; 0x60
 80033fe:	d034      	beq.n	800346a <HAL_TIM_ConfigClockSource+0xca>
 8003400:	d819      	bhi.n	8003436 <HAL_TIM_ConfigClockSource+0x96>
 8003402:	2b50      	cmp	r3, #80	; 0x50
 8003404:	d1e8      	bne.n	80033d8 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003406:	684a      	ldr	r2, [r1, #4]
 8003408:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800340a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800340c:	6a05      	ldr	r5, [r0, #32]
 800340e:	f025 0501 	bic.w	r5, r5, #1
 8003412:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003414:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003416:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800341a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800341e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003422:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003424:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003426:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003428:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800342a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800342e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003432:	6083      	str	r3, [r0, #8]
 8003434:	e7d0      	b.n	80033d8 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8003436:	2b70      	cmp	r3, #112	; 0x70
 8003438:	d00c      	beq.n	8003454 <HAL_TIM_ConfigClockSource+0xb4>
 800343a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800343e:	d1cb      	bne.n	80033d8 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8003440:	68cb      	ldr	r3, [r1, #12]
 8003442:	684a      	ldr	r2, [r1, #4]
 8003444:	6889      	ldr	r1, [r1, #8]
 8003446:	f7ff ffa1 	bl	800338c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800344a:	6822      	ldr	r2, [r4, #0]
 800344c:	6893      	ldr	r3, [r2, #8]
 800344e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003452:	e008      	b.n	8003466 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8003454:	68cb      	ldr	r3, [r1, #12]
 8003456:	684a      	ldr	r2, [r1, #4]
 8003458:	6889      	ldr	r1, [r1, #8]
 800345a:	f7ff ff97 	bl	800338c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800345e:	6822      	ldr	r2, [r4, #0]
 8003460:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003462:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003466:	6093      	str	r3, [r2, #8]
      break;
 8003468:	e7b6      	b.n	80033d8 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800346a:	684d      	ldr	r5, [r1, #4]
 800346c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800346e:	6a01      	ldr	r1, [r0, #32]
 8003470:	f021 0110 	bic.w	r1, r1, #16
 8003474:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003476:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003478:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800347a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800347e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003482:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003486:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800348a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800348c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800348e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003494:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8003498:	e7cb      	b.n	8003432 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800349a:	684a      	ldr	r2, [r1, #4]
 800349c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800349e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034a0:	6a05      	ldr	r5, [r0, #32]
 80034a2:	f025 0501 	bic.w	r5, r5, #1
 80034a6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034a8:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034aa:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034b2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80034b6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80034b8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80034ba:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80034bc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80034be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034c2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80034c6:	e7b4      	b.n	8003432 <HAL_TIM_ConfigClockSource+0x92>

080034c8 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034c8:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034ca:	f001 011f 	and.w	r1, r1, #31
{
 80034ce:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034d0:	2401      	movs	r4, #1
 80034d2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80034d4:	ea23 0304 	bic.w	r3, r3, r4
 80034d8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034da:	6a03      	ldr	r3, [r0, #32]
 80034dc:	408a      	lsls	r2, r1
 80034de:	431a      	orrs	r2, r3
 80034e0:	6202      	str	r2, [r0, #32]
 80034e2:	bd10      	pop	{r4, pc}

080034e4 <HAL_TIM_PWM_Start>:
{
 80034e4:	b510      	push	{r4, lr}
 80034e6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034e8:	2201      	movs	r2, #1
 80034ea:	6800      	ldr	r0, [r0, #0]
 80034ec:	f7ff ffec 	bl	80034c8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034f0:	6823      	ldr	r3, [r4, #0]
 80034f2:	4a09      	ldr	r2, [pc, #36]	; (8003518 <HAL_TIM_PWM_Start+0x34>)
 80034f4:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80034f6:	bf02      	ittt	eq
 80034f8:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80034fa:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80034fe:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003506:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8003508:	bf1e      	ittt	ne
 800350a:	681a      	ldrne	r2, [r3, #0]
 800350c:	f042 0201 	orrne.w	r2, r2, #1
 8003510:	601a      	strne	r2, [r3, #0]
}
 8003512:	2000      	movs	r0, #0
 8003514:	bd10      	pop	{r4, pc}
 8003516:	bf00      	nop
 8003518:	40010000 	.word	0x40010000

0800351c <HAL_TIM_PWM_Stop>:
{
 800351c:	b510      	push	{r4, lr}
 800351e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003520:	2200      	movs	r2, #0
 8003522:	6800      	ldr	r0, [r0, #0]
 8003524:	f7ff ffd0 	bl	80034c8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003528:	6823      	ldr	r3, [r4, #0]
 800352a:	4a12      	ldr	r2, [pc, #72]	; (8003574 <HAL_TIM_PWM_Stop+0x58>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d10d      	bne.n	800354c <HAL_TIM_PWM_Stop+0x30>
    __HAL_TIM_MOE_DISABLE(htim);
 8003530:	6a19      	ldr	r1, [r3, #32]
 8003532:	f241 1211 	movw	r2, #4369	; 0x1111
 8003536:	4211      	tst	r1, r2
 8003538:	d108      	bne.n	800354c <HAL_TIM_PWM_Stop+0x30>
 800353a:	6a19      	ldr	r1, [r3, #32]
 800353c:	f240 4244 	movw	r2, #1092	; 0x444
 8003540:	4211      	tst	r1, r2
 8003542:	bf02      	ittt	eq
 8003544:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8003546:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 800354a:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800354c:	6a19      	ldr	r1, [r3, #32]
 800354e:	f241 1211 	movw	r2, #4369	; 0x1111
 8003552:	4211      	tst	r1, r2
 8003554:	d108      	bne.n	8003568 <HAL_TIM_PWM_Stop+0x4c>
 8003556:	6a19      	ldr	r1, [r3, #32]
 8003558:	f240 4244 	movw	r2, #1092	; 0x444
 800355c:	4211      	tst	r1, r2
 800355e:	bf02      	ittt	eq
 8003560:	681a      	ldreq	r2, [r3, #0]
 8003562:	f022 0201 	biceq.w	r2, r2, #1
 8003566:	601a      	streq	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003568:	2301      	movs	r3, #1
 800356a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800356e:	2000      	movs	r0, #0
 8003570:	bd10      	pop	{r4, pc}
 8003572:	bf00      	nop
 8003574:	40010000 	.word	0x40010000

08003578 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003578:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800357c:	2b01      	cmp	r3, #1
{
 800357e:	b530      	push	{r4, r5, lr}
 8003580:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8003584:	d014      	beq.n	80035b0 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003586:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003588:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800358c:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800358e:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003590:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003592:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003594:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003598:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800359c:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800359e:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035a0:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035a2:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035a4:	2301      	movs	r3, #1
 80035a6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035aa:	2300      	movs	r3, #0
 80035ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80035b0:	4618      	mov	r0, r3

  return HAL_OK;
}
 80035b2:	bd30      	pop	{r4, r5, pc}

080035b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035b8:	6806      	ldr	r6, [r0, #0]
 80035ba:	68c2      	ldr	r2, [r0, #12]
 80035bc:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035be:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035c4:	4313      	orrs	r3, r2
 80035c6:	6133      	str	r3, [r6, #16]
{
 80035c8:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035ca:	6883      	ldr	r3, [r0, #8]
 80035cc:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80035ce:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035d0:	4303      	orrs	r3, r0
 80035d2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80035d4:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035d8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80035da:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035de:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 80035e0:	4313      	orrs	r3, r2
 80035e2:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035e4:	6973      	ldr	r3, [r6, #20]
 80035e6:	69a2      	ldr	r2, [r4, #24]
 80035e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ec:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035ee:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035f2:	6173      	str	r3, [r6, #20]
 80035f4:	4b7a      	ldr	r3, [pc, #488]	; (80037e0 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035f6:	d17c      	bne.n	80036f2 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035f8:	429e      	cmp	r6, r3
 80035fa:	d003      	beq.n	8003604 <UART_SetConfig+0x50>
 80035fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003600:	429e      	cmp	r6, r3
 8003602:	d144      	bne.n	800368e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003604:	f7ff fd2c 	bl	8003060 <HAL_RCC_GetPCLK2Freq>
 8003608:	2519      	movs	r5, #25
 800360a:	fb05 f300 	mul.w	r3, r5, r0
 800360e:	6860      	ldr	r0, [r4, #4]
 8003610:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003614:	0040      	lsls	r0, r0, #1
 8003616:	fbb3 f3f0 	udiv	r3, r3, r0
 800361a:	fbb3 f3f9 	udiv	r3, r3, r9
 800361e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003622:	f7ff fd1d 	bl	8003060 <HAL_RCC_GetPCLK2Freq>
 8003626:	6863      	ldr	r3, [r4, #4]
 8003628:	4368      	muls	r0, r5
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	fbb0 f7f3 	udiv	r7, r0, r3
 8003630:	f7ff fd16 	bl	8003060 <HAL_RCC_GetPCLK2Freq>
 8003634:	6863      	ldr	r3, [r4, #4]
 8003636:	4368      	muls	r0, r5
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	fbb0 f3f3 	udiv	r3, r0, r3
 800363e:	fbb3 f3f9 	udiv	r3, r3, r9
 8003642:	fb09 7313 	mls	r3, r9, r3, r7
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	3332      	adds	r3, #50	; 0x32
 800364a:	fbb3 f3f9 	udiv	r3, r3, r9
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8003654:	f7ff fd04 	bl	8003060 <HAL_RCC_GetPCLK2Freq>
 8003658:	6862      	ldr	r2, [r4, #4]
 800365a:	4368      	muls	r0, r5
 800365c:	0052      	lsls	r2, r2, #1
 800365e:	fbb0 faf2 	udiv	sl, r0, r2
 8003662:	f7ff fcfd 	bl	8003060 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003666:	6863      	ldr	r3, [r4, #4]
 8003668:	4368      	muls	r0, r5
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003670:	fbb3 f3f9 	udiv	r3, r3, r9
 8003674:	fb09 a313 	mls	r3, r9, r3, sl
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	3332      	adds	r3, #50	; 0x32
 800367c:	fbb3 f3f9 	udiv	r3, r3, r9
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003686:	443b      	add	r3, r7
 8003688:	60b3      	str	r3, [r6, #8]
 800368a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800368e:	f7ff fcd7 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 8003692:	2519      	movs	r5, #25
 8003694:	fb05 f300 	mul.w	r3, r5, r0
 8003698:	6860      	ldr	r0, [r4, #4]
 800369a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800369e:	0040      	lsls	r0, r0, #1
 80036a0:	fbb3 f3f0 	udiv	r3, r3, r0
 80036a4:	fbb3 f3f9 	udiv	r3, r3, r9
 80036a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036ac:	f7ff fcc8 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 80036b0:	6863      	ldr	r3, [r4, #4]
 80036b2:	4368      	muls	r0, r5
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	fbb0 f7f3 	udiv	r7, r0, r3
 80036ba:	f7ff fcc1 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 80036be:	6863      	ldr	r3, [r4, #4]
 80036c0:	4368      	muls	r0, r5
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80036c8:	fbb3 f3f9 	udiv	r3, r3, r9
 80036cc:	fb09 7313 	mls	r3, r9, r3, r7
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	3332      	adds	r3, #50	; 0x32
 80036d4:	fbb3 f3f9 	udiv	r3, r3, r9
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80036de:	f7ff fcaf 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 80036e2:	6862      	ldr	r2, [r4, #4]
 80036e4:	4368      	muls	r0, r5
 80036e6:	0052      	lsls	r2, r2, #1
 80036e8:	fbb0 faf2 	udiv	sl, r0, r2
 80036ec:	f7ff fca8 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 80036f0:	e7b9      	b.n	8003666 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036f2:	429e      	cmp	r6, r3
 80036f4:	d002      	beq.n	80036fc <UART_SetConfig+0x148>
 80036f6:	4b3b      	ldr	r3, [pc, #236]	; (80037e4 <UART_SetConfig+0x230>)
 80036f8:	429e      	cmp	r6, r3
 80036fa:	d140      	bne.n	800377e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80036fc:	f7ff fcb0 	bl	8003060 <HAL_RCC_GetPCLK2Freq>
 8003700:	6867      	ldr	r7, [r4, #4]
 8003702:	2519      	movs	r5, #25
 8003704:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003708:	fb05 f300 	mul.w	r3, r5, r0
 800370c:	00bf      	lsls	r7, r7, #2
 800370e:	fbb3 f3f7 	udiv	r3, r3, r7
 8003712:	fbb3 f3f9 	udiv	r3, r3, r9
 8003716:	011f      	lsls	r7, r3, #4
 8003718:	f7ff fca2 	bl	8003060 <HAL_RCC_GetPCLK2Freq>
 800371c:	6863      	ldr	r3, [r4, #4]
 800371e:	4368      	muls	r0, r5
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	fbb0 f8f3 	udiv	r8, r0, r3
 8003726:	f7ff fc9b 	bl	8003060 <HAL_RCC_GetPCLK2Freq>
 800372a:	6863      	ldr	r3, [r4, #4]
 800372c:	4368      	muls	r0, r5
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	fbb0 f3f3 	udiv	r3, r0, r3
 8003734:	fbb3 f3f9 	udiv	r3, r3, r9
 8003738:	fb09 8313 	mls	r3, r9, r3, r8
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	3332      	adds	r3, #50	; 0x32
 8003740:	fbb3 f3f9 	udiv	r3, r3, r9
 8003744:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8003748:	f7ff fc8a 	bl	8003060 <HAL_RCC_GetPCLK2Freq>
 800374c:	6862      	ldr	r2, [r4, #4]
 800374e:	4368      	muls	r0, r5
 8003750:	0092      	lsls	r2, r2, #2
 8003752:	fbb0 faf2 	udiv	sl, r0, r2
 8003756:	f7ff fc83 	bl	8003060 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800375a:	6863      	ldr	r3, [r4, #4]
 800375c:	4368      	muls	r0, r5
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	fbb0 f3f3 	udiv	r3, r0, r3
 8003764:	fbb3 f3f9 	udiv	r3, r3, r9
 8003768:	fb09 a313 	mls	r3, r9, r3, sl
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	3332      	adds	r3, #50	; 0x32
 8003770:	fbb3 f3f9 	udiv	r3, r3, r9
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	ea43 0308 	orr.w	r3, r3, r8
 800377c:	e783      	b.n	8003686 <UART_SetConfig+0xd2>
 800377e:	f7ff fc5f 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 8003782:	6867      	ldr	r7, [r4, #4]
 8003784:	2519      	movs	r5, #25
 8003786:	f04f 0964 	mov.w	r9, #100	; 0x64
 800378a:	fb05 f300 	mul.w	r3, r5, r0
 800378e:	00bf      	lsls	r7, r7, #2
 8003790:	fbb3 f3f7 	udiv	r3, r3, r7
 8003794:	fbb3 f3f9 	udiv	r3, r3, r9
 8003798:	011f      	lsls	r7, r3, #4
 800379a:	f7ff fc51 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 800379e:	6863      	ldr	r3, [r4, #4]
 80037a0:	4368      	muls	r0, r5
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	fbb0 f8f3 	udiv	r8, r0, r3
 80037a8:	f7ff fc4a 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 80037ac:	6863      	ldr	r3, [r4, #4]
 80037ae:	4368      	muls	r0, r5
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037b6:	fbb3 f3f9 	udiv	r3, r3, r9
 80037ba:	fb09 8313 	mls	r3, r9, r3, r8
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	3332      	adds	r3, #50	; 0x32
 80037c2:	fbb3 f3f9 	udiv	r3, r3, r9
 80037c6:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80037ca:	f7ff fc39 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 80037ce:	6862      	ldr	r2, [r4, #4]
 80037d0:	4368      	muls	r0, r5
 80037d2:	0092      	lsls	r2, r2, #2
 80037d4:	fbb0 faf2 	udiv	sl, r0, r2
 80037d8:	f7ff fc32 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 80037dc:	e7bd      	b.n	800375a <UART_SetConfig+0x1a6>
 80037de:	bf00      	nop
 80037e0:	40011000 	.word	0x40011000
 80037e4:	40011400 	.word	0x40011400

080037e8 <HAL_UART_Init>:
{
 80037e8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80037ea:	4604      	mov	r4, r0
 80037ec:	b340      	cbz	r0, 8003840 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80037ee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80037f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037f6:	b91b      	cbnz	r3, 8003800 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80037f8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80037fc:	f000 fd40 	bl	8004280 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003800:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003802:	2324      	movs	r3, #36	; 0x24
 8003804:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003808:	68d3      	ldr	r3, [r2, #12]
 800380a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800380e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003810:	4620      	mov	r0, r4
 8003812:	f7ff fecf 	bl	80035b4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003816:	6823      	ldr	r3, [r4, #0]
 8003818:	691a      	ldr	r2, [r3, #16]
 800381a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800381e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003820:	695a      	ldr	r2, [r3, #20]
 8003822:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003826:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800382e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003830:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003832:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003834:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003836:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800383a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800383e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003840:	2001      	movs	r0, #1
}
 8003842:	bd10      	pop	{r4, pc}

08003844 <HAL_BUZZER_Tone>:
	HAL_BUZZER_Silence(buz);
}

void HAL_BUZZER_Tone(BUZZER_HandlerTypeDef *buz)
{
	HAL_TIM_PWM_Start(buz->Htim,buz->TimerChannel);
 8003844:	c803      	ldmia	r0, {r0, r1}
 8003846:	f7ff be4d 	b.w	80034e4 <HAL_TIM_PWM_Start>

0800384a <HAL_BUZZER_Silence>:
}


void HAL_BUZZER_Silence(BUZZER_HandlerTypeDef *buz)
{
	HAL_TIM_PWM_Stop(buz->Htim,buz->TimerChannel);
 800384a:	c803      	ldmia	r0, {r0, r1}
 800384c:	f7ff be66 	b.w	800351c <HAL_TIM_PWM_Stop>

08003850 <HAL_BUZZER_Beep>:
{
 8003850:	b538      	push	{r3, r4, r5, lr}
 8003852:	460d      	mov	r5, r1
 8003854:	4604      	mov	r4, r0
	HAL_BUZZER_Tone(buz);
 8003856:	f7ff fff5 	bl	8003844 <HAL_BUZZER_Tone>
	HAL_Delay(duration);
 800385a:	4628      	mov	r0, r5
 800385c:	f7fd fa7e 	bl	8000d5c <HAL_Delay>
	HAL_BUZZER_Silence(buz);
 8003860:	4620      	mov	r0, r4
}
 8003862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_BUZZER_Silence(buz);
 8003866:	f7ff bff0 	b.w	800384a <HAL_BUZZER_Silence>
	...

0800386c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800386c:	b530      	push	{r4, r5, lr}
 800386e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003870:	2230      	movs	r2, #48	; 0x30
 8003872:	2100      	movs	r1, #0
 8003874:	a808      	add	r0, sp, #32
 8003876:	f000 fdd1 	bl	800441c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800387a:	2100      	movs	r1, #0
 800387c:	2214      	movs	r2, #20
 800387e:	a803      	add	r0, sp, #12
 8003880:	f000 fdcc 	bl	800441c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003884:	2500      	movs	r5, #0
 8003886:	4b1c      	ldr	r3, [pc, #112]	; (80038f8 <SystemClock_Config+0x8c>)
 8003888:	9501      	str	r5, [sp, #4]
 800388a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800388c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003890:	641a      	str	r2, [r3, #64]	; 0x40
 8003892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003894:	4a19      	ldr	r2, [pc, #100]	; (80038fc <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389a:	9301      	str	r3, [sp, #4]
 800389c:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800389e:	9502      	str	r5, [sp, #8]
 80038a0:	6813      	ldr	r3, [r2, #0]
 80038a2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80038a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	6813      	ldr	r3, [r2, #0]
 80038ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038b2:	9302      	str	r3, [sp, #8]
 80038b4:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80038b6:	2301      	movs	r3, #1
 80038b8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80038ba:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80038be:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038c4:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 84;
 80038c6:	2254      	movs	r2, #84	; 0x54
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038c8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038ca:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 80038cc:	2304      	movs	r3, #4
 80038ce:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80038d0:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80038d2:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038d4:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038d6:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038d8:	f7ff f968 	bl	8002bac <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038dc:	230f      	movs	r3, #15
 80038de:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80038e0:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80038e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80038e6:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038e8:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038ea:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80038ec:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038ee:	9507      	str	r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80038f0:	f7ff fb0c 	bl	8002f0c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80038f4:	b015      	add	sp, #84	; 0x54
 80038f6:	bd30      	pop	{r4, r5, pc}
 80038f8:	40023800 	.word	0x40023800
 80038fc:	40007000 	.word	0x40007000

08003900 <main>:
{
 8003900:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003904:	b095      	sub	sp, #84	; 0x54
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003906:	2400      	movs	r4, #0
 8003908:	4dbb      	ldr	r5, [pc, #748]	; (8003bf8 <main+0x2f8>)
  HAL_Init();
 800390a:	f7fd f9fb 	bl	8000d04 <HAL_Init>
  SystemClock_Config();
 800390e:	f7ff ffad 	bl	800386c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003912:	2214      	movs	r2, #20
 8003914:	2100      	movs	r1, #0
 8003916:	a80d      	add	r0, sp, #52	; 0x34
 8003918:	f000 fd80 	bl	800441c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800391c:	9403      	str	r4, [sp, #12]
 800391e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, L_EN_4_Pin|R_EN_3_Pin|L_EN_3_Pin|R_EN_4_Pin, GPIO_PIN_RESET);
 8003920:	48b6      	ldr	r0, [pc, #728]	; (8003bfc <main+0x2fc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003922:	f043 0304 	orr.w	r3, r3, #4
 8003926:	632b      	str	r3, [r5, #48]	; 0x30
 8003928:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	9303      	str	r3, [sp, #12]
 8003930:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003932:	9404      	str	r4, [sp, #16]
 8003934:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800393a:	632b      	str	r3, [r5, #48]	; 0x30
 800393c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800393e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003942:	9304      	str	r3, [sp, #16]
 8003944:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003946:	9405      	str	r4, [sp, #20]
 8003948:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800394a:	f043 0301 	orr.w	r3, r3, #1
 800394e:	632b      	str	r3, [r5, #48]	; 0x30
 8003950:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	9305      	str	r3, [sp, #20]
 8003958:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800395a:	9406      	str	r4, [sp, #24]
 800395c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800395e:	f043 0302 	orr.w	r3, r3, #2
 8003962:	632b      	str	r3, [r5, #48]	; 0x30
 8003964:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003966:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, L_EN_4_Pin|R_EN_3_Pin|L_EN_3_Pin|R_EN_4_Pin, GPIO_PIN_RESET);
 800396a:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800396c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, L_EN_4_Pin|R_EN_3_Pin|L_EN_3_Pin|R_EN_4_Pin, GPIO_PIN_RESET);
 800396e:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003972:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, L_EN_4_Pin|R_EN_3_Pin|L_EN_3_Pin|R_EN_4_Pin, GPIO_PIN_RESET);
 8003974:	f7fd ff84 	bl	8001880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R_EN_1_Pin|L_EN_1_Pin|LED2_Pin|R_EN_2_Pin 
 8003978:	4622      	mov	r2, r4
 800397a:	f641 0123 	movw	r1, #6179	; 0x1823
 800397e:	48a0      	ldr	r0, [pc, #640]	; (8003c00 <main+0x300>)
 8003980:	f7fd ff7e 	bl	8001880 <HAL_GPIO_WritePin>
                          |L_EN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : L_EN_4_Pin R_EN_3_Pin L_EN_3_Pin R_EN_4_Pin */
  GPIO_InitStruct.Pin = L_EN_4_Pin|R_EN_3_Pin|L_EN_3_Pin|R_EN_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003984:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = L_EN_4_Pin|R_EN_3_Pin|L_EN_3_Pin|R_EN_4_Pin;
 8003986:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800398a:	a90d      	add	r1, sp, #52	; 0x34
 800398c:	489b      	ldr	r0, [pc, #620]	; (8003bfc <main+0x2fc>)
  GPIO_InitStruct.Pin = L_EN_4_Pin|R_EN_3_Pin|L_EN_3_Pin|R_EN_4_Pin;
 800398e:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003990:	970e      	str	r7, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003992:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003994:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003996:	f7fd fe9d 	bl	80016d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_EN_1_Pin L_EN_1_Pin LED2_Pin R_EN_2_Pin 
                           L_EN_2_Pin */
  GPIO_InitStruct.Pin = R_EN_1_Pin|L_EN_1_Pin|LED2_Pin|R_EN_2_Pin 
 800399a:	f641 0323 	movw	r3, #6179	; 0x1823
                          |L_EN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800399e:	a90d      	add	r1, sp, #52	; 0x34
 80039a0:	4897      	ldr	r0, [pc, #604]	; (8003c00 <main+0x300>)
  GPIO_InitStruct.Pin = R_EN_1_Pin|L_EN_1_Pin|LED2_Pin|R_EN_2_Pin 
 80039a2:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039a4:	970e      	str	r7, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a6:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039a8:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039aa:	f7fd fe93 	bl	80016d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEVICE_DETECT_Pin */
  GPIO_InitStruct.Pin = DEVICE_DETECT_Pin;
 80039ae:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(DEVICE_DETECT_GPIO_Port, &GPIO_InitStruct);
 80039b0:	a90d      	add	r1, sp, #52	; 0x34
 80039b2:	4893      	ldr	r0, [pc, #588]	; (8003c00 <main+0x300>)
  GPIO_InitStruct.Pin = DEVICE_DETECT_Pin;
 80039b4:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039b6:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b8:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DEVICE_DETECT_GPIO_Port, &GPIO_InitStruct);
 80039ba:	f7fd fe8b 	bl	80016d4 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80039be:	9402      	str	r4, [sp, #8]
 80039c0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80039c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039c6:	632b      	str	r3, [r5, #48]	; 0x30
 80039c8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hadc1.Instance = ADC1;
 80039ca:	4d8e      	ldr	r5, [pc, #568]	; (8003c04 <main+0x304>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 80039cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80039d0:	4622      	mov	r2, r4
 80039d2:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 80039d4:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80039d6:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 80039d8:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80039da:	f7fd fc81 	bl	80012e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80039de:	2038      	movs	r0, #56	; 0x38
 80039e0:	f7fd fcb2 	bl	8001348 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 80039e4:	2210      	movs	r2, #16
 80039e6:	4621      	mov	r1, r4
 80039e8:	a80d      	add	r0, sp, #52	; 0x34
 80039ea:	f000 fd17 	bl	800441c <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80039ee:	4b86      	ldr	r3, [pc, #536]	; (8003c08 <main+0x308>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80039f0:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80039f2:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 80039f6:	e885 0048 	stmia.w	r5, {r3, r6}
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80039fa:	4b84      	ldr	r3, [pc, #528]	; (8003c0c <main+0x30c>)
 80039fc:	62ab      	str	r3, [r5, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80039fe:	4628      	mov	r0, r5
  hadc1.Init.NbrOfConversion = 9;
 8003a00:	2309      	movs	r3, #9
 8003a02:	61eb      	str	r3, [r5, #28]
  sConfig.Channel = ADC_CHANNEL_7;
 8003a04:	f04f 0807 	mov.w	r8, #7
  hadc1.Init.ScanConvMode = ENABLE;
 8003a08:	612f      	str	r7, [r5, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003a0a:	762f      	strb	r7, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003a0c:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003a10:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003a12:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003a14:	f885 7030 	strb.w	r7, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003a18:	616f      	str	r7, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003a1a:	f7fd f9b3 	bl	8000d84 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a1e:	a90d      	add	r1, sp, #52	; 0x34
 8003a20:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_8;
 8003a22:	f04f 0a08 	mov.w	sl, #8
  sConfig.Channel = ADC_CHANNEL_7;
 8003a26:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  sConfig.Rank = 1;
 8003a2a:	970e      	str	r7, [sp, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003a2c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a30:	f7fd fbac 	bl	800118c <HAL_ADC_ConfigChannel>
  sConfig.Rank = 2;
 8003a34:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a36:	a90d      	add	r1, sp, #52	; 0x34
 8003a38:	4628      	mov	r0, r5
  sConfig.Rank = 2;
 8003a3a:	930e      	str	r3, [sp, #56]	; 0x38
  sConfig.Channel = ADC_CHANNEL_8;
 8003a3c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a40:	f7fd fba4 	bl	800118c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_9;
 8003a44:	2309      	movs	r3, #9
 8003a46:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a48:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.Rank = 3;
 8003a4a:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a4c:	4628      	mov	r0, r5
  sConfig.Rank = 4;
 8003a4e:	f04f 0904 	mov.w	r9, #4
  sConfig.Rank = 3;
 8003a52:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a54:	f7fd fb9a 	bl	800118c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_10;
 8003a58:	230a      	movs	r3, #10
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a5a:	a90d      	add	r1, sp, #52	; 0x34
 8003a5c:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_10;
 8003a5e:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.Rank = 4;
 8003a60:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a64:	f7fd fb92 	bl	800118c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_11;
 8003a68:	230b      	movs	r3, #11
 8003a6a:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a6c:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.Rank = 5;
 8003a6e:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a70:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_12;
 8003a72:	f04f 0b0c 	mov.w	fp, #12
  sConfig.Rank = 5;
 8003a76:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a78:	f7fd fb88 	bl	800118c <HAL_ADC_ConfigChannel>
  sConfig.Rank = 6;
 8003a7c:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a7e:	a90d      	add	r1, sp, #52	; 0x34
 8003a80:	4628      	mov	r0, r5
  sConfig.Rank = 6;
 8003a82:	930e      	str	r3, [sp, #56]	; 0x38
  sConfig.Channel = ADC_CHANNEL_12;
 8003a84:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a88:	f7fd fb80 	bl	800118c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_13;
 8003a8c:	230d      	movs	r3, #13
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a8e:	a90d      	add	r1, sp, #52	; 0x34
 8003a90:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_13;
 8003a92:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.Rank = 7;
 8003a94:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a98:	f7fd fb78 	bl	800118c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_14;
 8003a9c:	230e      	movs	r3, #14
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003a9e:	a90d      	add	r1, sp, #52	; 0x34
 8003aa0:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_14;
 8003aa2:	930d      	str	r3, [sp, #52]	; 0x34
  sConfig.Rank = 8;
 8003aa4:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003aa8:	f7fd fb70 	bl	800118c <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_15;
 8003aac:	230f      	movs	r3, #15
 8003aae:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ab0:	a90d      	add	r1, sp, #52	; 0x34
  sConfig.Rank = 9;
 8003ab2:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ab4:	4628      	mov	r0, r5
  sConfig.Rank = 9;
 8003ab6:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ab8:	f7fd fb68 	bl	800118c <HAL_ADC_ConfigChannel>
  hi2c3.Instance = I2C3;
 8003abc:	4b54      	ldr	r3, [pc, #336]	; (8003c10 <main+0x310>)
  hi2c3.Init.ClockSpeed = 100000;
 8003abe:	4955      	ldr	r1, [pc, #340]	; (8003c14 <main+0x314>)
 8003ac0:	4a55      	ldr	r2, [pc, #340]	; (8003c18 <main+0x318>)
  htim2.Instance = TIM2;
 8003ac2:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8003c28 <main+0x328>
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ac6:	609c      	str	r4, [r3, #8]
  hi2c3.Init.ClockSpeed = 100000;
 8003ac8:	e883 0006 	stmia.w	r3, {r1, r2}
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003acc:	4618      	mov	r0, r3
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ace:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c3.Init.OwnAddress1 = 0;
 8003ad2:	60dc      	str	r4, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ad4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ad6:	615c      	str	r4, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003ad8:	619c      	str	r4, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ada:	61dc      	str	r4, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003adc:	621c      	str	r4, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003ade:	9301      	str	r3, [sp, #4]
 8003ae0:	f7fd ffe0 	bl	8001aa4 <HAL_I2C_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	2210      	movs	r2, #16
 8003ae8:	a809      	add	r0, sp, #36	; 0x24
 8003aea:	f000 fc97 	bl	800441c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003aee:	4621      	mov	r1, r4
 8003af0:	221c      	movs	r2, #28
 8003af2:	a80d      	add	r0, sp, #52	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003af4:	9407      	str	r4, [sp, #28]
 8003af6:	9408      	str	r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003af8:	f000 fc90 	bl	800441c <memset>
  htim2.Instance = TIM2;
 8003afc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003b00:	4640      	mov	r0, r8
  htim2.Init.Prescaler = 0;
 8003b02:	e888 0014 	stmia.w	r8, {r2, r4}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b06:	f8c8 4008 	str.w	r4, [r8, #8]
  htim2.Init.Period = 65536;
 8003b0a:	f8c8 600c 	str.w	r6, [r8, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b0e:	f8c8 4010 	str.w	r4, [r8, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b12:	f8c8 4018 	str.w	r4, [r8, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003b16:	f7ff fb77 	bl	8003208 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b1e:	a909      	add	r1, sp, #36	; 0x24
 8003b20:	4640      	mov	r0, r8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b22:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b24:	f7ff fc3c 	bl	80033a0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003b28:	4640      	mov	r0, r8
 8003b2a:	f7ff fb87 	bl	800323c <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b2e:	a907      	add	r1, sp, #28
 8003b30:	4640      	mov	r0, r8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b32:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b34:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b36:	f7ff fd1f 	bl	8003578 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.Pulse = 32768;
 8003b3a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b3e:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b40:	a90d      	add	r1, sp, #52	; 0x34
  sConfigOC.Pulse = 32768;
 8003b42:	920e      	str	r2, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b44:	4640      	mov	r0, r8
 8003b46:	4652      	mov	r2, sl
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b48:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b4a:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003b4c:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b50:	f7ff fbba 	bl	80032c8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 8003b54:	4640      	mov	r0, r8
 8003b56:	f000 fb37 	bl	80041c8 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	a809      	add	r0, sp, #36	; 0x24
  htim3.Instance = TIM3;
 8003b60:	4e2e      	ldr	r6, [pc, #184]	; (8003c1c <main+0x31c>)
  htim4.Instance = TIM4;
 8003b62:	4f2f      	ldr	r7, [pc, #188]	; (8003c20 <main+0x320>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b64:	f000 fc5a 	bl	800441c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b68:	4621      	mov	r1, r4
 8003b6a:	221c      	movs	r2, #28
 8003b6c:	a80d      	add	r0, sp, #52	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b6e:	9407      	str	r4, [sp, #28]
 8003b70:	9408      	str	r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b72:	f000 fc53 	bl	800441c <memset>
  htim3.Instance = TIM3;
 8003b76:	4a2b      	ldr	r2, [pc, #172]	; (8003c24 <main+0x324>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b78:	60b4      	str	r4, [r6, #8]
  htim3.Init.Period = 0xFF;
 8003b7a:	23ff      	movs	r3, #255	; 0xff
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003b7c:	4630      	mov	r0, r6
  htim3.Init.Prescaler = 12;
 8003b7e:	e886 0804 	stmia.w	r6, {r2, fp}
  htim3.Init.Period = 0xFF;
 8003b82:	60f3      	str	r3, [r6, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b84:	6134      	str	r4, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b86:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003b88:	f7ff fb3e 	bl	8003208 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003b90:	a909      	add	r1, sp, #36	; 0x24
 8003b92:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b94:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003b96:	f7ff fc03 	bl	80033a0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	f7ff fb4e 	bl	800323c <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ba0:	a907      	add	r1, sp, #28
 8003ba2:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ba4:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ba6:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ba8:	f7ff fce6 	bl	8003578 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.Pulse = 0x80;
 8003bac:	2280      	movs	r2, #128	; 0x80
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bae:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0x80;
 8003bb0:	920e      	str	r2, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bb2:	a90d      	add	r1, sp, #52	; 0x34
 8003bb4:	4622      	mov	r2, r4
 8003bb6:	4630      	mov	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bb8:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bba:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003bbc:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bc0:	f7ff fb82 	bl	80032c8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003bc4:	464a      	mov	r2, r9
 8003bc6:	a90d      	add	r1, sp, #52	; 0x34
 8003bc8:	4630      	mov	r0, r6
  sConfigOC.Pulse = 0;
 8003bca:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003bcc:	f7ff fb7c 	bl	80032c8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003bd0:	4652      	mov	r2, sl
 8003bd2:	a90d      	add	r1, sp, #52	; 0x34
 8003bd4:	4630      	mov	r0, r6
 8003bd6:	f7ff fb77 	bl	80032c8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003bda:	465a      	mov	r2, fp
 8003bdc:	a90d      	add	r1, sp, #52	; 0x34
 8003bde:	4630      	mov	r0, r6
 8003be0:	f7ff fb72 	bl	80032c8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8003be4:	4630      	mov	r0, r6
 8003be6:	f000 faef 	bl	80041c8 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bea:	4621      	mov	r1, r4
 8003bec:	2210      	movs	r2, #16
 8003bee:	a809      	add	r0, sp, #36	; 0x24
 8003bf0:	f000 fc14 	bl	800441c <memset>
 8003bf4:	e01a      	b.n	8003c2c <main+0x32c>
 8003bf6:	bf00      	nop
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	40020800 	.word	0x40020800
 8003c00:	40020000 	.word	0x40020000
 8003c04:	20000130 	.word	0x20000130
 8003c08:	40012000 	.word	0x40012000
 8003c0c:	0f000001 	.word	0x0f000001
 8003c10:	20000048 	.word	0x20000048
 8003c14:	40005c00 	.word	0x40005c00
 8003c18:	000186a0 	.word	0x000186a0
 8003c1c:	200000f0 	.word	0x200000f0
 8003c20:	200000b0 	.word	0x200000b0
 8003c24:	40000400 	.word	0x40000400
 8003c28:	20000234 	.word	0x20000234
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c2c:	4621      	mov	r1, r4
 8003c2e:	221c      	movs	r2, #28
 8003c30:	a80d      	add	r0, sp, #52	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c32:	9407      	str	r4, [sp, #28]
 8003c34:	9408      	str	r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c36:	f000 fbf1 	bl	800441c <memset>
  htim4.Instance = TIM4;
 8003c3a:	4a49      	ldr	r2, [pc, #292]	; (8003d60 <main+0x460>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c3c:	60bc      	str	r4, [r7, #8]
  htim4.Init.Period = 0xFF;
 8003c3e:	23ff      	movs	r3, #255	; 0xff
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003c40:	4638      	mov	r0, r7
  htim4.Init.Prescaler = 12;
 8003c42:	e887 0804 	stmia.w	r7, {r2, fp}
  htim4.Init.Period = 0xFF;
 8003c46:	60fb      	str	r3, [r7, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c48:	613c      	str	r4, [r7, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c4a:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003c4c:	f7ff fadc 	bl	8003208 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003c54:	a909      	add	r1, sp, #36	; 0x24
 8003c56:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c58:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003c5a:	f7ff fba1 	bl	80033a0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003c5e:	4638      	mov	r0, r7
 8003c60:	f7ff faec 	bl	800323c <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003c64:	a907      	add	r1, sp, #28
 8003c66:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c68:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c6a:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003c6c:	f7ff fc84 	bl	8003578 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c70:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c72:	4622      	mov	r2, r4
 8003c74:	a90d      	add	r1, sp, #52	; 0x34
 8003c76:	4638      	mov	r0, r7
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c78:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8003c7a:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c7c:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003c7e:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c82:	f7ff fb21 	bl	80032c8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c86:	464a      	mov	r2, r9
 8003c88:	a90d      	add	r1, sp, #52	; 0x34
 8003c8a:	4638      	mov	r0, r7
 8003c8c:	f7ff fb1c 	bl	80032c8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c90:	4652      	mov	r2, sl
 8003c92:	a90d      	add	r1, sp, #52	; 0x34
 8003c94:	4638      	mov	r0, r7
 8003c96:	f7ff fb17 	bl	80032c8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003c9a:	a90d      	add	r1, sp, #52	; 0x34
 8003c9c:	465a      	mov	r2, fp
 8003c9e:	4638      	mov	r0, r7
 8003ca0:	f7ff fb12 	bl	80032c8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 8003ca4:	4638      	mov	r0, r7
 8003ca6:	f000 fa8f 	bl	80041c8 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 8003caa:	482e      	ldr	r0, [pc, #184]	; (8003d64 <main+0x464>)
  huart2.Init.BaudRate = 115200;
 8003cac:	4a2e      	ldr	r2, [pc, #184]	; (8003d68 <main+0x468>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003cae:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8003cb0:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
 8003cb4:	e880 0084 	stmia.w	r0, {r2, r7}
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003cb8:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003cba:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cbc:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cbe:	61c4      	str	r4, [r0, #28]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003cc0:	f8c0 b014 	str.w	fp, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003cc4:	f7ff fd90 	bl	80037e8 <HAL_UART_Init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcBuffer, 9);
 8003cc8:	2209      	movs	r2, #9
 8003cca:	4928      	ldr	r1, [pc, #160]	; (8003d6c <main+0x46c>)
 8003ccc:	4628      	mov	r0, r5
 8003cce:	f7fd f8ff 	bl	8000ed0 <HAL_ADC_Start_DMA>
  nun1.HI2C = &hi2c3;
 8003cd2:	4d27      	ldr	r5, [pc, #156]	; (8003d70 <main+0x470>)
  motor1.LeftHtim=&htim3;
 8003cd4:	4827      	ldr	r0, [pc, #156]	; (8003d74 <main+0x474>)
  nun1.HI2C = &hi2c3;
 8003cd6:	9b01      	ldr	r3, [sp, #4]
  motor1.LeftHtim=&htim3;
 8003cd8:	6006      	str	r6, [r0, #0]
  motor1.RightHtim=&htim3;
 8003cda:	6046      	str	r6, [r0, #4]
  motor1.LeftTimerChannel=TIM_CHANNEL_1;
 8003cdc:	6084      	str	r4, [r0, #8]
  nun1.HI2C = &hi2c3;
 8003cde:	61ab      	str	r3, [r5, #24]
  motor1.RightTimerChannel=TIM_CHANNEL_2;
 8003ce0:	f8c0 900c 	str.w	r9, [r0, #12]
  HAL_MOTOR_Init(&motor1);
 8003ce4:	f000 f85e 	bl	8003da4 <HAL_MOTOR_Init>
  buzzer.Htim = &htim2;
 8003ce8:	4b23      	ldr	r3, [pc, #140]	; (8003d78 <main+0x478>)
  HAL_NUNCHUCK_Calibrate(&nun1);
 8003cea:	4628      	mov	r0, r5
  buzzer.TimerChannel = TIM_CHANNEL_3;
 8003cec:	e883 0500 	stmia.w	r3, {r8, sl}
	  HAL_MOTOR_write(&motor1,nun1.yJoy*127.0+127,HAL_MOTOR_DIRECTION_REVERSE);
 8003cf0:	a719      	add	r7, pc, #100	; (adr r7, 8003d58 <main+0x458>)
 8003cf2:	e9d7 6700 	ldrd	r6, r7, [r7]
  HAL_NUNCHUCK_Calibrate(&nun1);
 8003cf6:	f000 f91a 	bl	8003f2e <HAL_NUNCHUCK_Calibrate>
 8003cfa:	462c      	mov	r4, r5
	  HAL_NUNCHUCK_Read(&nun1);
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	f000 f8ed 	bl	8003edc <HAL_NUNCHUCK_Read>
	  if(!nun1.Connected)
 8003d02:	7d23      	ldrb	r3, [r4, #20]
 8003d04:	b91b      	cbnz	r3, 8003d0e <main+0x40e>
			  HAL_BUZZER_Beep(&buzzer,100);
 8003d06:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8003d78 <main+0x478>
		  while(!nun1.Connected)
 8003d0a:	7d23      	ldrb	r3, [r4, #20]
 8003d0c:	b1ab      	cbz	r3, 8003d3a <main+0x43a>
	  HAL_MOTOR_write(&motor1,nun1.yJoy*127.0+127,HAL_MOTOR_DIRECTION_REVERSE);
 8003d0e:	6860      	ldr	r0, [r4, #4]
 8003d10:	f7fc fbc6 	bl	80004a0 <__aeabi_f2d>
 8003d14:	4632      	mov	r2, r6
 8003d16:	463b      	mov	r3, r7
 8003d18:	f7fc fc16 	bl	8000548 <__aeabi_dmul>
 8003d1c:	4632      	mov	r2, r6
 8003d1e:	463b      	mov	r3, r7
 8003d20:	f7fc fa60 	bl	80001e4 <__adddf3>
 8003d24:	f7fc fe22 	bl	800096c <__aeabi_d2uiz>
 8003d28:	2201      	movs	r2, #1
 8003d2a:	b281      	uxth	r1, r0
 8003d2c:	4811      	ldr	r0, [pc, #68]	; (8003d74 <main+0x474>)
 8003d2e:	f000 f851 	bl	8003dd4 <HAL_MOTOR_write>
	  HAL_Delay(100);
 8003d32:	2064      	movs	r0, #100	; 0x64
 8003d34:	f7fd f812 	bl	8000d5c <HAL_Delay>
	  HAL_NUNCHUCK_Read(&nun1);
 8003d38:	e7e0      	b.n	8003cfc <main+0x3fc>
			  HAL_NUNCHUCK_Read(&nun1);
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	f000 f8ce 	bl	8003edc <HAL_NUNCHUCK_Read>
			  HAL_BUZZER_Beep(&buzzer,100);
 8003d40:	4640      	mov	r0, r8
 8003d42:	2164      	movs	r1, #100	; 0x64
 8003d44:	f7ff fd84 	bl	8003850 <HAL_BUZZER_Beep>
			  HAL_Delay(1000);
 8003d48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d4c:	f7fd f806 	bl	8000d5c <HAL_Delay>
 8003d50:	e7db      	b.n	8003d0a <main+0x40a>
 8003d52:	bf00      	nop
 8003d54:	f3af 8000 	nop.w
 8003d58:	00000000 	.word	0x00000000
 8003d5c:	405fc000 	.word	0x405fc000
 8003d60:	40000800 	.word	0x40000800
 8003d64:	20000274 	.word	0x20000274
 8003d68:	40004400 	.word	0x40004400
 8003d6c:	2000009c 	.word	0x2000009c
 8003d70:	20000218 	.word	0x20000218
 8003d74:	200001fc 	.word	0x200001fc
 8003d78:	20000178 	.word	0x20000178

08003d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d7c:	4770      	bx	lr

08003d7e <MOTOR_SetChannelDuty>:
	}
}

void MOTOR_SetChannelDuty(TIM_TypeDef *tim, uint32_t channel, uint8_t duty)
{
	switch(channel)
 8003d7e:	290c      	cmp	r1, #12
 8003d80:	d80f      	bhi.n	8003da2 <MOTOR_SetChannelDuty+0x24>
 8003d82:	e8df f001 	tbb	[pc, r1]
 8003d86:	0e07      	.short	0x0e07
 8003d88:	0e090e0e 	.word	0x0e090e0e
 8003d8c:	0e0b0e0e 	.word	0x0e0b0e0e
 8003d90:	0e0e      	.short	0x0e0e
 8003d92:	0d          	.byte	0x0d
 8003d93:	00          	.byte	0x00
	{
		case TIM_CHANNEL_1:
			tim->CCR1 = duty;
 8003d94:	6342      	str	r2, [r0, #52]	; 0x34
			break;
 8003d96:	4770      	bx	lr
		case TIM_CHANNEL_2:
			tim->CCR2 = duty;
 8003d98:	6382      	str	r2, [r0, #56]	; 0x38
			break;
 8003d9a:	4770      	bx	lr
		case TIM_CHANNEL_3:
			tim->CCR3 = duty;
 8003d9c:	63c2      	str	r2, [r0, #60]	; 0x3c
			break;
 8003d9e:	4770      	bx	lr
		case TIM_CHANNEL_4:
			tim->CCR4 = duty;
 8003da0:	6402      	str	r2, [r0, #64]	; 0x40
 8003da2:	4770      	bx	lr

08003da4 <HAL_MOTOR_Init>:
	MOTOR_SetChannelDuty(mot->RightHtim->Instance,mot->RightTimerChannel,0);
 8003da4:	6843      	ldr	r3, [r0, #4]
 8003da6:	68c1      	ldr	r1, [r0, #12]
{
 8003da8:	b510      	push	{r4, lr}
 8003daa:	4604      	mov	r4, r0
	MOTOR_SetChannelDuty(mot->RightHtim->Instance,mot->RightTimerChannel,0);
 8003dac:	2200      	movs	r2, #0
 8003dae:	6818      	ldr	r0, [r3, #0]
 8003db0:	f7ff ffe5 	bl	8003d7e <MOTOR_SetChannelDuty>
	MOTOR_SetChannelDuty(mot->LeftHtim->Instance,mot->LeftTimerChannel,0);
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	68a1      	ldr	r1, [r4, #8]
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f7ff ffdf 	bl	8003d7e <MOTOR_SetChannelDuty>
	HAL_TIM_PWM_Start(mot->RightHtim,mot->RightTimerChannel);
 8003dc0:	68e1      	ldr	r1, [r4, #12]
 8003dc2:	6860      	ldr	r0, [r4, #4]
 8003dc4:	f7ff fb8e 	bl	80034e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(mot->LeftHtim,mot->LeftTimerChannel);
 8003dc8:	68a1      	ldr	r1, [r4, #8]
 8003dca:	6820      	ldr	r0, [r4, #0]
}
 8003dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_PWM_Start(mot->LeftHtim,mot->LeftTimerChannel);
 8003dd0:	f7ff bb88 	b.w	80034e4 <HAL_TIM_PWM_Start>

08003dd4 <HAL_MOTOR_write>:
	MOTOR_SetChannelDuty(mot->RightHtim->Instance,mot->RightTimerChannel,0);
 8003dd4:	6843      	ldr	r3, [r0, #4]
{
 8003dd6:	b570      	push	{r4, r5, r6, lr}
 8003dd8:	4604      	mov	r4, r0
 8003dda:	4616      	mov	r6, r2
 8003ddc:	460d      	mov	r5, r1
	MOTOR_SetChannelDuty(mot->RightHtim->Instance,mot->RightTimerChannel,0);
 8003dde:	2200      	movs	r2, #0
 8003de0:	68c1      	ldr	r1, [r0, #12]
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	f7ff ffcb 	bl	8003d7e <MOTOR_SetChannelDuty>
	MOTOR_SetChannelDuty(mot->LeftHtim->Instance,mot->LeftTimerChannel,0);
 8003de8:	6823      	ldr	r3, [r4, #0]
 8003dea:	68a1      	ldr	r1, [r4, #8]
 8003dec:	6818      	ldr	r0, [r3, #0]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f7ff ffc5 	bl	8003d7e <MOTOR_SetChannelDuty>
	if(direction == HAL_MOTOR_DIRECTION_FORWARD)
 8003df4:	b93e      	cbnz	r6, 8003e06 <HAL_MOTOR_write+0x32>
		MOTOR_SetChannelDuty(mot->RightHtim->Instance,mot->RightTimerChannel,duty);
 8003df6:	6863      	ldr	r3, [r4, #4]
 8003df8:	68e1      	ldr	r1, [r4, #12]
 8003dfa:	b2ea      	uxtb	r2, r5
		MOTOR_SetChannelDuty(mot->LeftHtim->Instance,mot->LeftTimerChannel,duty);
 8003dfc:	6818      	ldr	r0, [r3, #0]
}
 8003dfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		MOTOR_SetChannelDuty(mot->LeftHtim->Instance,mot->LeftTimerChannel,duty);
 8003e02:	f7ff bfbc 	b.w	8003d7e <MOTOR_SetChannelDuty>
	else if(direction == HAL_MOTOR_DIRECTION_REVERSE)
 8003e06:	2e01      	cmp	r6, #1
 8003e08:	d103      	bne.n	8003e12 <HAL_MOTOR_write+0x3e>
		MOTOR_SetChannelDuty(mot->LeftHtim->Instance,mot->LeftTimerChannel,duty);
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	68a1      	ldr	r1, [r4, #8]
 8003e0e:	b2ea      	uxtb	r2, r5
 8003e10:	e7f4      	b.n	8003dfc <HAL_MOTOR_write+0x28>
 8003e12:	bd70      	pop	{r4, r5, r6, pc}

08003e14 <HAL_NUNCHUCK_ReadRaw>:
#include "nunchuck.h"

void HAL_NUNCHUCK_ReadRaw(NUNCHUCK_HandleTypeDef* nun)
{
 8003e14:	b570      	push	{r4, r5, r6, lr}
 8003e16:	b086      	sub	sp, #24
	uint8_t rxBuffer[6];
	uint8_t txBuffer[] = {0x00, 0x00};
	uint8_t n = 0;
	uint8_t nunchuckAddress = 0x52 << 1;

	txBuffer[0] = 0xF0;
 8003e18:	23f0      	movs	r3, #240	; 0xf0
	txBuffer[1] = 0x55;
	HAL_I2C_Master_Transmit(nun->HI2C,nunchuckAddress, txBuffer, 2, 100);
 8003e1a:	2664      	movs	r6, #100	; 0x64
	txBuffer[0] = 0xF0;
 8003e1c:	f88d 300c 	strb.w	r3, [sp, #12]
	HAL_I2C_Master_Transmit(nun->HI2C,nunchuckAddress, txBuffer, 2, 100);
 8003e20:	9600      	str	r6, [sp, #0]
	txBuffer[1] = 0x55;
 8003e22:	2355      	movs	r3, #85	; 0x55
{
 8003e24:	4604      	mov	r4, r0
	txBuffer[1] = 0x55;
 8003e26:	f88d 300d 	strb.w	r3, [sp, #13]
	HAL_I2C_Master_Transmit(nun->HI2C,nunchuckAddress, txBuffer, 2, 100);
 8003e2a:	aa03      	add	r2, sp, #12
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	21a4      	movs	r1, #164	; 0xa4
 8003e30:	6980      	ldr	r0, [r0, #24]
 8003e32:	f7fd fedb 	bl	8001bec <HAL_I2C_Master_Transmit>
	txBuffer[0] = 0xFB;
 8003e36:	23fb      	movs	r3, #251	; 0xfb
	txBuffer[1] = 0x00;
 8003e38:	2500      	movs	r5, #0
	txBuffer[0] = 0xFB;
 8003e3a:	f88d 300c 	strb.w	r3, [sp, #12]
	HAL_I2C_Master_Transmit(nun->HI2C,nunchuckAddress, txBuffer, 2, 100);
 8003e3e:	9600      	str	r6, [sp, #0]
 8003e40:	2302      	movs	r3, #2
 8003e42:	aa03      	add	r2, sp, #12
 8003e44:	21a4      	movs	r1, #164	; 0xa4
 8003e46:	69a0      	ldr	r0, [r4, #24]
	txBuffer[1] = 0x00;
 8003e48:	f88d 500d 	strb.w	r5, [sp, #13]
	HAL_I2C_Master_Transmit(nun->HI2C,nunchuckAddress, txBuffer, 2, 100);
 8003e4c:	f7fd fece 	bl	8001bec <HAL_I2C_Master_Transmit>
	txBuffer[0] = 0x00;
 8003e50:	f88d 500c 	strb.w	r5, [sp, #12]
	txBuffer[1] = 0x00;
 8003e54:	f88d 500d 	strb.w	r5, [sp, #13]

	while(HAL_I2C_Master_Transmit(nun->HI2C,nunchuckAddress,txBuffer,1,100) != HAL_OK)
 8003e58:	250c      	movs	r5, #12
 8003e5a:	9600      	str	r6, [sp, #0]
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	aa03      	add	r2, sp, #12
 8003e60:	21a4      	movs	r1, #164	; 0xa4
 8003e62:	69a0      	ldr	r0, [r4, #24]
 8003e64:	f7fd fec2 	bl	8001bec <HAL_I2C_Master_Transmit>
 8003e68:	bb88      	cbnz	r0, 8003ece <HAL_NUNCHUCK_ReadRaw+0xba>
			nun->Connected  = 0;
			return;
		}
	}

	HAL_I2C_Master_Receive(nun->HI2C,nunchuckAddress | 1,rxBuffer,6,200);
 8003e6a:	23c8      	movs	r3, #200	; 0xc8
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	aa04      	add	r2, sp, #16
 8003e70:	2306      	movs	r3, #6
 8003e72:	21a5      	movs	r1, #165	; 0xa5
 8003e74:	69a0      	ldr	r0, [r4, #24]
 8003e76:	f7fd ff87 	bl	8001d88 <HAL_I2C_Master_Receive>

	nun->xJoyRaw	= rxBuffer[0] - 128;
 8003e7a:	f89d 3010 	ldrb.w	r3, [sp, #16]
	nun->yJoyRaw	= rxBuffer[1] - 128;
	nun->cButton 	= !((rxBuffer[5] & (1 << 1)) >> 1);
	nun->zButton	= !(rxBuffer[5] & 1);
	nun->xAccel		= (rxBuffer[2] << 2) | ((rxBuffer[5] & 0x0C) >> 2);
 8003e7e:	f89d 1012 	ldrb.w	r1, [sp, #18]
	nun->xJoyRaw	= rxBuffer[0] - 128;
 8003e82:	3b80      	subs	r3, #128	; 0x80
 8003e84:	7223      	strb	r3, [r4, #8]
	nun->yJoyRaw	= rxBuffer[1] - 128;
 8003e86:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8003e8a:	3b80      	subs	r3, #128	; 0x80
 8003e8c:	7263      	strb	r3, [r4, #9]
	nun->cButton 	= !((rxBuffer[5] & (1 << 1)) >> 1);
 8003e8e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8003e92:	f083 0202 	eor.w	r2, r3, #2
 8003e96:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8003e9a:	74a2      	strb	r2, [r4, #18]
	nun->zButton	= !(rxBuffer[5] & 1);
 8003e9c:	43da      	mvns	r2, r3
 8003e9e:	f002 0201 	and.w	r2, r2, #1
 8003ea2:	74e2      	strb	r2, [r4, #19]
	nun->xAccel		= (rxBuffer[2] << 2) | ((rxBuffer[5] & 0x0C) >> 2);
 8003ea4:	f3c3 0281 	ubfx	r2, r3, #2, #2
 8003ea8:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
	nun->yAccel		= (rxBuffer[3] << 2) | ((rxBuffer[5] & 0x30) >> 4);
 8003eac:	f89d 1013 	ldrb.w	r1, [sp, #19]
	nun->xAccel		= (rxBuffer[2] << 2) | ((rxBuffer[5] & 0x0C) >> 2);
 8003eb0:	81a2      	strh	r2, [r4, #12]
	nun->yAccel		= (rxBuffer[3] << 2) | ((rxBuffer[5] & 0x30) >> 4);
 8003eb2:	f3c3 1201 	ubfx	r2, r3, #4, #2
 8003eb6:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8003eba:	81e2      	strh	r2, [r4, #14]
	nun->zAccel		= (rxBuffer[4] << 2) | ((rxBuffer[5] & 0xC0) >> 6);
 8003ebc:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8003ec0:	099b      	lsrs	r3, r3, #6
 8003ec2:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8003ec6:	8223      	strh	r3, [r4, #16]
	nun->Connected 	= 1;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	7523      	strb	r3, [r4, #20]
 8003ecc:	e004      	b.n	8003ed8 <HAL_NUNCHUCK_ReadRaw+0xc4>
 8003ece:	3d01      	subs	r5, #1
		if(n++ > 10)
 8003ed0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8003ed4:	d1c1      	bne.n	8003e5a <HAL_NUNCHUCK_ReadRaw+0x46>
			nun->Connected  = 0;
 8003ed6:	7525      	strb	r5, [r4, #20]

	return;
}
 8003ed8:	b006      	add	sp, #24
 8003eda:	bd70      	pop	{r4, r5, r6, pc}

08003edc <HAL_NUNCHUCK_Read>:

void HAL_NUNCHUCK_Read(NUNCHUCK_HandleTypeDef* nun)
{
 8003edc:	b510      	push	{r4, lr}
 8003ede:	4604      	mov	r4, r0
	HAL_NUNCHUCK_ReadRaw(nun);
 8003ee0:	f7ff ff98 	bl	8003e14 <HAL_NUNCHUCK_ReadRaw>

	nun->xJoy = (float)((nun->xJoyRaw+nun->xJoyOffset))/((float)(127+nun->xJoyOffset));
 8003ee4:	f994 300a 	ldrsb.w	r3, [r4, #10]
 8003ee8:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8003eec:	441a      	add	r2, r3
 8003eee:	ee07 2a90 	vmov	s15, r2
 8003ef2:	337f      	adds	r3, #127	; 0x7f
 8003ef4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ef8:	ee07 3a90 	vmov	s15, r3
 8003efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	nun->yJoy = (float)((nun->yJoyRaw+nun->yJoyOffset))/((float)(127+nun->yJoyOffset));
 8003f00:	f994 300b 	ldrsb.w	r3, [r4, #11]
 8003f04:	f994 2009 	ldrsb.w	r2, [r4, #9]
	nun->xJoy = (float)((nun->xJoyRaw+nun->xJoyOffset))/((float)(127+nun->xJoyOffset));
 8003f08:	eec7 6a27 	vdiv.f32	s13, s14, s15
	nun->yJoy = (float)((nun->yJoyRaw+nun->yJoyOffset))/((float)(127+nun->yJoyOffset));
 8003f0c:	441a      	add	r2, r3
 8003f0e:	337f      	adds	r3, #127	; 0x7f
 8003f10:	ee07 2a90 	vmov	s15, r2
 8003f14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f18:	ee07 3a90 	vmov	s15, r3
 8003f1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	nun->xJoy = (float)((nun->xJoyRaw+nun->xJoyOffset))/((float)(127+nun->xJoyOffset));
 8003f20:	edc4 6a00 	vstr	s13, [r4]
	nun->yJoy = (float)((nun->yJoyRaw+nun->yJoyOffset))/((float)(127+nun->yJoyOffset));
 8003f24:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003f28:	edc4 6a01 	vstr	s13, [r4, #4]
 8003f2c:	bd10      	pop	{r4, pc}

08003f2e <HAL_NUNCHUCK_Calibrate>:
}

void HAL_NUNCHUCK_Calibrate(NUNCHUCK_HandleTypeDef* nun)
{
 8003f2e:	b510      	push	{r4, lr}
 8003f30:	4604      	mov	r4, r0
	HAL_NUNCHUCK_ReadRaw(nun);
 8003f32:	f7ff ff6f 	bl	8003e14 <HAL_NUNCHUCK_ReadRaw>

	nun->xJoyOffset = -nun->xJoyRaw;
 8003f36:	7a23      	ldrb	r3, [r4, #8]
 8003f38:	425b      	negs	r3, r3
 8003f3a:	72a3      	strb	r3, [r4, #10]
	nun->yJoyOffset = -nun->yJoyRaw;
 8003f3c:	7a63      	ldrb	r3, [r4, #9]
 8003f3e:	425b      	negs	r3, r3
 8003f40:	72e3      	strb	r3, [r4, #11]

	nun->Calibrated = 1;
 8003f42:	2301      	movs	r3, #1
 8003f44:	7563      	strb	r3, [r4, #21]
 8003f46:	bd10      	pop	{r4, pc}

08003f48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f48:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f4a:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <HAL_MspInit+0x34>)
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	9100      	str	r1, [sp, #0]
 8003f50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f56:	645a      	str	r2, [r3, #68]	; 0x44
 8003f58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f5a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003f5e:	9200      	str	r2, [sp, #0]
 8003f60:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f62:	9101      	str	r1, [sp, #4]
 8003f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f6a:	641a      	str	r2, [r3, #64]	; 0x40
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f76:	b002      	add	sp, #8
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40023800 	.word	0x40023800

08003f80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f80:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f82:	2214      	movs	r2, #20
{
 8003f84:	b08a      	sub	sp, #40	; 0x28
 8003f86:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f88:	2100      	movs	r1, #0
 8003f8a:	eb0d 0002 	add.w	r0, sp, r2
 8003f8e:	f000 fa45 	bl	800441c <memset>
  if(hadc->Instance==ADC1)
 8003f92:	6832      	ldr	r2, [r6, #0]
 8003f94:	4b36      	ldr	r3, [pc, #216]	; (8004070 <HAL_ADC_MspInit+0xf0>)
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d167      	bne.n	800406a <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f9a:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8003f9e:	2500      	movs	r5, #0
 8003fa0:	9501      	str	r5, [sp, #4]
 8003fa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    */
    GPIO_InitStruct.Pin = L_IS_4_Pin|R_IS_4_Pin|L_IS_3_Pin|R_IS_3_Pin 
                          |R_IS_2_Pin|L_IS_2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fa4:	4833      	ldr	r0, [pc, #204]	; (8004074 <HAL_ADC_MspInit+0xf4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003fa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003faa:	645a      	str	r2, [r3, #68]	; 0x44
 8003fac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fae:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003fb2:	9201      	str	r2, [sp, #4]
 8003fb4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fb6:	9502      	str	r5, [sp, #8]
 8003fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fba:	f042 0204 	orr.w	r2, r2, #4
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
 8003fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fc2:	f002 0204 	and.w	r2, r2, #4
 8003fc6:	9202      	str	r2, [sp, #8]
 8003fc8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fca:	9503      	str	r5, [sp, #12]
 8003fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fce:	f042 0201 	orr.w	r2, r2, #1
 8003fd2:	631a      	str	r2, [r3, #48]	; 0x30
 8003fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fd6:	f002 0201 	and.w	r2, r2, #1
 8003fda:	9203      	str	r2, [sp, #12]
 8003fdc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fde:	9504      	str	r5, [sp, #16]
 8003fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fe2:	f042 0202 	orr.w	r2, r2, #2
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ff0:	2403      	movs	r4, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ff2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ff4:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = L_IS_4_Pin|R_IS_4_Pin|L_IS_3_Pin|R_IS_3_Pin 
 8003ff6:	233f      	movs	r3, #63	; 0x3f
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ff8:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = L_IS_4_Pin|R_IS_4_Pin|L_IS_3_Pin|R_IS_3_Pin 
 8003ffa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ffc:	f7fd fb6a 	bl	80016d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B_READ_Pin;
 8004000:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(B_READ_GPIO_Port, &GPIO_InitStruct);
 8004002:	a905      	add	r1, sp, #20
 8004004:	481c      	ldr	r0, [pc, #112]	; (8004078 <HAL_ADC_MspInit+0xf8>)
    GPIO_InitStruct.Pin = B_READ_Pin;
 8004006:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004008:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(B_READ_GPIO_Port, &GPIO_InitStruct);
 800400c:	f7fd fb62 	bl	80016d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R_IS_1_Pin|L_IS_1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004010:	481a      	ldr	r0, [pc, #104]	; (800407c <HAL_ADC_MspInit+0xfc>)
    GPIO_InitStruct.Pin = R_IS_1_Pin|L_IS_1_Pin;
 8004012:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004014:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004016:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004018:	9507      	str	r5, [sp, #28]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800401a:	4c19      	ldr	r4, [pc, #100]	; (8004080 <HAL_ADC_MspInit+0x100>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800401c:	f7fd fb5a 	bl	80016d4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8004020:	4b18      	ldr	r3, [pc, #96]	; (8004084 <HAL_ADC_MspInit+0x104>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004022:	60a5      	str	r5, [r4, #8]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004024:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800402c:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800402e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004032:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004034:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004038:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800403a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800403e:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004040:	4620      	mov	r0, r4
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8004042:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004046:	60e5      	str	r5, [r4, #12]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8004048:	6223      	str	r3, [r4, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800404a:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800404c:	f7fd f9b6 	bl	80013bc <HAL_DMA_Init>
 8004050:	b108      	cbz	r0, 8004056 <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 8004052:	f7ff fe93 	bl	8003d7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8004056:	2200      	movs	r2, #0
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004058:	63b4      	str	r4, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800405a:	2012      	movs	r0, #18
 800405c:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800405e:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8004060:	f7fd f93e 	bl	80012e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004064:	2012      	movs	r0, #18
 8004066:	f7fd f96f 	bl	8001348 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800406a:	b00a      	add	sp, #40	; 0x28
 800406c:	bd70      	pop	{r4, r5, r6, pc}
 800406e:	bf00      	nop
 8004070:	40012000 	.word	0x40012000
 8004074:	40020800 	.word	0x40020800
 8004078:	40020000 	.word	0x40020000
 800407c:	40020400 	.word	0x40020400
 8004080:	2000019c 	.word	0x2000019c
 8004084:	40026410 	.word	0x40026410

08004088 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800408c:	4604      	mov	r4, r0
 800408e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004090:	2214      	movs	r2, #20
 8004092:	2100      	movs	r1, #0
 8004094:	a803      	add	r0, sp, #12
 8004096:	f000 f9c1 	bl	800441c <memset>
  if(hi2c->Instance==I2C3)
 800409a:	6822      	ldr	r2, [r4, #0]
 800409c:	4b29      	ldr	r3, [pc, #164]	; (8004144 <HAL_I2C_MspInit+0xbc>)
 800409e:	429a      	cmp	r2, r3
 80040a0:	d14c      	bne.n	800413c <HAL_I2C_MspInit+0xb4>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040a2:	4c29      	ldr	r4, [pc, #164]	; (8004148 <HAL_I2C_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040a4:	4829      	ldr	r0, [pc, #164]	; (800414c <HAL_I2C_MspInit+0xc4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040a6:	2500      	movs	r5, #0
 80040a8:	9500      	str	r5, [sp, #0]
 80040aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80040ac:	f043 0301 	orr.w	r3, r3, #1
 80040b0:	6323      	str	r3, [r4, #48]	; 0x30
 80040b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040bc:	9501      	str	r5, [sp, #4]
 80040be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80040c0:	f043 0302 	orr.w	r3, r3, #2
 80040c4:	6323      	str	r3, [r4, #48]	; 0x30
 80040c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	9301      	str	r3, [sp, #4]
 80040ce:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80040d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040d4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040d6:	f04f 0812 	mov.w	r8, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80040da:	2304      	movs	r3, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040dc:	2701      	movs	r7, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040de:	2603      	movs	r6, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040e0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80040e2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040e4:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040e8:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ea:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ec:	f7fd faf2 	bl	80016d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80040f0:	2310      	movs	r3, #16
 80040f2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040f4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80040f6:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040f8:	4815      	ldr	r0, [pc, #84]	; (8004150 <HAL_I2C_MspInit+0xc8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80040fa:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040fc:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004100:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004102:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004104:	f7fd fae6 	bl	80016d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004108:	9502      	str	r5, [sp, #8]
 800410a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800410c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004110:	6423      	str	r3, [r4, #64]	; 0x40
 8004112:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004114:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8004118:	462a      	mov	r2, r5
 800411a:	4629      	mov	r1, r5
    __HAL_RCC_I2C3_CLK_ENABLE();
 800411c:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 800411e:	2048      	movs	r0, #72	; 0x48
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004120:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8004122:	f7fd f8dd 	bl	80012e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8004126:	2048      	movs	r0, #72	; 0x48
 8004128:	f7fd f90e 	bl	8001348 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 800412c:	2049      	movs	r0, #73	; 0x49
 800412e:	462a      	mov	r2, r5
 8004130:	4629      	mov	r1, r5
 8004132:	f7fd f8d5 	bl	80012e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8004136:	2049      	movs	r0, #73	; 0x49
 8004138:	f7fd f906 	bl	8001348 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800413c:	b008      	add	sp, #32
 800413e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004142:	bf00      	nop
 8004144:	40005c00 	.word	0x40005c00
 8004148:	40023800 	.word	0x40023800
 800414c:	40020000 	.word	0x40020000
 8004150:	40020400 	.word	0x40020400

08004154 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8004154:	6803      	ldr	r3, [r0, #0]
 8004156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800415a:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM2)
 800415c:	d10d      	bne.n	800417a <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800415e:	2300      	movs	r3, #0
 8004160:	9301      	str	r3, [sp, #4]
 8004162:	4b16      	ldr	r3, [pc, #88]	; (80041bc <HAL_TIM_Base_MspInit+0x68>)
 8004164:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	641a      	str	r2, [r3, #64]	; 0x40
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	9301      	str	r3, [sp, #4]
 8004174:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004176:	b004      	add	sp, #16
 8004178:	4770      	bx	lr
  else if(htim_base->Instance==TIM3)
 800417a:	4a11      	ldr	r2, [pc, #68]	; (80041c0 <HAL_TIM_Base_MspInit+0x6c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d10c      	bne.n	800419a <HAL_TIM_Base_MspInit+0x46>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004180:	2300      	movs	r3, #0
 8004182:	9302      	str	r3, [sp, #8]
 8004184:	4b0d      	ldr	r3, [pc, #52]	; (80041bc <HAL_TIM_Base_MspInit+0x68>)
 8004186:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004188:	f042 0202 	orr.w	r2, r2, #2
 800418c:	641a      	str	r2, [r3, #64]	; 0x40
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	9302      	str	r3, [sp, #8]
 8004196:	9b02      	ldr	r3, [sp, #8]
 8004198:	e7ed      	b.n	8004176 <HAL_TIM_Base_MspInit+0x22>
  else if(htim_base->Instance==TIM4)
 800419a:	4a0a      	ldr	r2, [pc, #40]	; (80041c4 <HAL_TIM_Base_MspInit+0x70>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d1ea      	bne.n	8004176 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80041a0:	2300      	movs	r3, #0
 80041a2:	9303      	str	r3, [sp, #12]
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_TIM_Base_MspInit+0x68>)
 80041a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041a8:	f042 0204 	orr.w	r2, r2, #4
 80041ac:	641a      	str	r2, [r3, #64]	; 0x40
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	9303      	str	r3, [sp, #12]
 80041b6:	9b03      	ldr	r3, [sp, #12]
}
 80041b8:	e7dd      	b.n	8004176 <HAL_TIM_Base_MspInit+0x22>
 80041ba:	bf00      	nop
 80041bc:	40023800 	.word	0x40023800
 80041c0:	40000400 	.word	0x40000400
 80041c4:	40000800 	.word	0x40000800

080041c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80041c8:	b510      	push	{r4, lr}
 80041ca:	4604      	mov	r4, r0
 80041cc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ce:	2214      	movs	r2, #20
 80041d0:	2100      	movs	r1, #0
 80041d2:	a803      	add	r0, sp, #12
 80041d4:	f000 f922 	bl	800441c <memset>
  if(htim->Instance==TIM2)
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041de:	d115      	bne.n	800420c <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041e0:	2300      	movs	r3, #0
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	4b21      	ldr	r3, [pc, #132]	; (800426c <HAL_TIM_MspPostInit+0xa4>)
 80041e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041e8:	f042 0202 	orr.w	r2, r2, #2
 80041ec:	631a      	str	r2, [r3, #48]	; 0x30
 80041ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	9b00      	ldr	r3, [sp, #0]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = PIEZO_Pin;
 80041f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041fe:	2302      	movs	r3, #2
 8004200:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004202:	2301      	movs	r3, #1
    */
    GPIO_InitStruct.Pin = RPWM_1_Pin|LPWM_1_Pin|RPWM_2_Pin|LPWM_2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004204:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004206:	a903      	add	r1, sp, #12
 8004208:	4819      	ldr	r0, [pc, #100]	; (8004270 <HAL_TIM_MspPostInit+0xa8>)
 800420a:	e016      	b.n	800423a <HAL_TIM_MspPostInit+0x72>
  else if(htim->Instance==TIM3)
 800420c:	4a19      	ldr	r2, [pc, #100]	; (8004274 <HAL_TIM_MspPostInit+0xac>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d117      	bne.n	8004242 <HAL_TIM_MspPostInit+0x7a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004212:	2300      	movs	r3, #0
 8004214:	9301      	str	r3, [sp, #4]
 8004216:	4b15      	ldr	r3, [pc, #84]	; (800426c <HAL_TIM_MspPostInit+0xa4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004218:	4817      	ldr	r0, [pc, #92]	; (8004278 <HAL_TIM_MspPostInit+0xb0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800421a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800421c:	f042 0204 	orr.w	r2, r2, #4
 8004220:	631a      	str	r2, [r3, #48]	; 0x30
 8004222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	9301      	str	r3, [sp, #4]
 800422a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = RPWM_3_Pin|LPWM_3_Pin|RPWM_4_Pin|LPWM_4_Pin;
 800422c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004230:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004232:	2302      	movs	r3, #2
 8004234:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004236:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004238:	a903      	add	r1, sp, #12
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800423a:	f7fd fa4b 	bl	80016d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800423e:	b008      	add	sp, #32
 8004240:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM4)
 8004242:	4a0e      	ldr	r2, [pc, #56]	; (800427c <HAL_TIM_MspPostInit+0xb4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d1fa      	bne.n	800423e <HAL_TIM_MspPostInit+0x76>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004248:	2300      	movs	r3, #0
 800424a:	9302      	str	r3, [sp, #8]
 800424c:	4b07      	ldr	r3, [pc, #28]	; (800426c <HAL_TIM_MspPostInit+0xa4>)
 800424e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004250:	f042 0202 	orr.w	r2, r2, #2
 8004254:	631a      	str	r2, [r3, #48]	; 0x30
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	9302      	str	r3, [sp, #8]
 800425e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = RPWM_1_Pin|LPWM_1_Pin|RPWM_2_Pin|LPWM_2_Pin;
 8004260:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004264:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004266:	2302      	movs	r3, #2
 8004268:	9304      	str	r3, [sp, #16]
 800426a:	e7cb      	b.n	8004204 <HAL_TIM_MspPostInit+0x3c>
 800426c:	40023800 	.word	0x40023800
 8004270:	40020400 	.word	0x40020400
 8004274:	40000400 	.word	0x40000400
 8004278:	40020800 	.word	0x40020800
 800427c:	40000800 	.word	0x40000800

08004280 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004280:	b510      	push	{r4, lr}
 8004282:	4604      	mov	r4, r0
 8004284:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004286:	2214      	movs	r2, #20
 8004288:	2100      	movs	r1, #0
 800428a:	a803      	add	r0, sp, #12
 800428c:	f000 f8c6 	bl	800441c <memset>
  if(huart->Instance==USART2)
 8004290:	6822      	ldr	r2, [r4, #0]
 8004292:	4b15      	ldr	r3, [pc, #84]	; (80042e8 <HAL_UART_MspInit+0x68>)
 8004294:	429a      	cmp	r2, r3
 8004296:	d124      	bne.n	80042e2 <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004298:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800429c:	2100      	movs	r1, #0
 800429e:	9101      	str	r1, [sp, #4]
 80042a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a2:	4812      	ldr	r0, [pc, #72]	; (80042ec <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80042a4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80042a8:	641a      	str	r2, [r3, #64]	; 0x40
 80042aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ac:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80042b0:	9201      	str	r2, [sp, #4]
 80042b2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042b4:	9102      	str	r1, [sp, #8]
 80042b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042b8:	f042 0201 	orr.w	r2, r2, #1
 80042bc:	631a      	str	r2, [r3, #48]	; 0x30
 80042be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	9302      	str	r3, [sp, #8]
 80042c6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80042c8:	230c      	movs	r3, #12
 80042ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042cc:	2302      	movs	r3, #2
 80042ce:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042d0:	2301      	movs	r3, #1
 80042d2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042d4:	2303      	movs	r3, #3
 80042d6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042d8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80042da:	2307      	movs	r3, #7
 80042dc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042de:	f7fd f9f9 	bl	80016d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80042e2:	b008      	add	sp, #32
 80042e4:	bd10      	pop	{r4, pc}
 80042e6:	bf00      	nop
 80042e8:	40004400 	.word	0x40004400
 80042ec:	40020000 	.word	0x40020000

080042f0 <NMI_Handler>:
 80042f0:	4770      	bx	lr

080042f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042f2:	e7fe      	b.n	80042f2 <HardFault_Handler>

080042f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042f4:	e7fe      	b.n	80042f4 <MemManage_Handler>

080042f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042f6:	e7fe      	b.n	80042f6 <BusFault_Handler>

080042f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042f8:	e7fe      	b.n	80042f8 <UsageFault_Handler>

080042fa <SVC_Handler>:
 80042fa:	4770      	bx	lr

080042fc <DebugMon_Handler>:
 80042fc:	4770      	bx	lr

080042fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042fe:	4770      	bx	lr

08004300 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004300:	f7fc bd1a 	b.w	8000d38 <HAL_IncTick>

08004304 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004304:	4801      	ldr	r0, [pc, #4]	; (800430c <ADC_IRQHandler+0x8>)
 8004306:	f7fc be6c 	b.w	8000fe2 <HAL_ADC_IRQHandler>
 800430a:	bf00      	nop
 800430c:	20000130 	.word	0x20000130

08004310 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004310:	4801      	ldr	r0, [pc, #4]	; (8004318 <DMA2_Stream0_IRQHandler+0x8>)
 8004312:	f7fd b921 	b.w	8001558 <HAL_DMA_IRQHandler>
 8004316:	bf00      	nop
 8004318:	2000019c 	.word	0x2000019c

0800431c <I2C3_EV_IRQHandler>:
void I2C3_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 800431c:	4801      	ldr	r0, [pc, #4]	; (8004324 <I2C3_EV_IRQHandler+0x8>)
 800431e:	f7fd bf89 	b.w	8002234 <HAL_I2C_EV_IRQHandler>
 8004322:	bf00      	nop
 8004324:	20000048 	.word	0x20000048

08004328 <I2C3_ER_IRQHandler>:
void I2C3_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8004328:	4801      	ldr	r0, [pc, #4]	; (8004330 <I2C3_ER_IRQHandler+0x8>)
 800432a:	f7fe bba9 	b.w	8002a80 <HAL_I2C_ER_IRQHandler>
 800432e:	bf00      	nop
 8004330:	20000048 	.word	0x20000048

08004334 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004334:	490f      	ldr	r1, [pc, #60]	; (8004374 <SystemInit+0x40>)
 8004336:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800433a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800433e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004342:	4b0d      	ldr	r3, [pc, #52]	; (8004378 <SystemInit+0x44>)
 8004344:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004346:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8004348:	f042 0201 	orr.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800434e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004356:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800435a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800435c:	4a07      	ldr	r2, [pc, #28]	; (800437c <SystemInit+0x48>)
 800435e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004366:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004368:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800436a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800436e:	608b      	str	r3, [r1, #8]
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	e000ed00 	.word	0xe000ed00
 8004378:	40023800 	.word	0x40023800
 800437c:	24003010 	.word	0x24003010

08004380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004384:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004386:	e003      	b.n	8004390 <LoopCopyDataInit>

08004388 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004388:	4b0c      	ldr	r3, [pc, #48]	; (80043bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800438a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800438c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800438e:	3104      	adds	r1, #4

08004390 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004390:	480b      	ldr	r0, [pc, #44]	; (80043c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004392:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004394:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004396:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004398:	d3f6      	bcc.n	8004388 <CopyDataInit>
  ldr  r2, =_sbss
 800439a:	4a0b      	ldr	r2, [pc, #44]	; (80043c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800439c:	e002      	b.n	80043a4 <LoopFillZerobss>

0800439e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800439e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80043a0:	f842 3b04 	str.w	r3, [r2], #4

080043a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80043a4:	4b09      	ldr	r3, [pc, #36]	; (80043cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80043a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80043a8:	d3f9      	bcc.n	800439e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80043aa:	f7ff ffc3 	bl	8004334 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043ae:	f000 f811 	bl	80043d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043b2:	f7ff faa5 	bl	8003900 <main>
  bx  lr    
 80043b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80043b8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80043bc:	08004474 	.word	0x08004474
  ldr  r0, =_sdata
 80043c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80043c4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80043c8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80043cc:	20000304 	.word	0x20000304

080043d0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043d0:	e7fe      	b.n	80043d0 <DMA1_Stream0_IRQHandler>
	...

080043d4 <__libc_init_array>:
 80043d4:	b570      	push	{r4, r5, r6, lr}
 80043d6:	4e0d      	ldr	r6, [pc, #52]	; (800440c <__libc_init_array+0x38>)
 80043d8:	4c0d      	ldr	r4, [pc, #52]	; (8004410 <__libc_init_array+0x3c>)
 80043da:	1ba4      	subs	r4, r4, r6
 80043dc:	10a4      	asrs	r4, r4, #2
 80043de:	2500      	movs	r5, #0
 80043e0:	42a5      	cmp	r5, r4
 80043e2:	d109      	bne.n	80043f8 <__libc_init_array+0x24>
 80043e4:	4e0b      	ldr	r6, [pc, #44]	; (8004414 <__libc_init_array+0x40>)
 80043e6:	4c0c      	ldr	r4, [pc, #48]	; (8004418 <__libc_init_array+0x44>)
 80043e8:	f000 f820 	bl	800442c <_init>
 80043ec:	1ba4      	subs	r4, r4, r6
 80043ee:	10a4      	asrs	r4, r4, #2
 80043f0:	2500      	movs	r5, #0
 80043f2:	42a5      	cmp	r5, r4
 80043f4:	d105      	bne.n	8004402 <__libc_init_array+0x2e>
 80043f6:	bd70      	pop	{r4, r5, r6, pc}
 80043f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043fc:	4798      	blx	r3
 80043fe:	3501      	adds	r5, #1
 8004400:	e7ee      	b.n	80043e0 <__libc_init_array+0xc>
 8004402:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004406:	4798      	blx	r3
 8004408:	3501      	adds	r5, #1
 800440a:	e7f2      	b.n	80043f2 <__libc_init_array+0x1e>
 800440c:	0800446c 	.word	0x0800446c
 8004410:	0800446c 	.word	0x0800446c
 8004414:	0800446c 	.word	0x0800446c
 8004418:	08004470 	.word	0x08004470

0800441c <memset>:
 800441c:	4402      	add	r2, r0
 800441e:	4603      	mov	r3, r0
 8004420:	4293      	cmp	r3, r2
 8004422:	d100      	bne.n	8004426 <memset+0xa>
 8004424:	4770      	bx	lr
 8004426:	f803 1b01 	strb.w	r1, [r3], #1
 800442a:	e7f9      	b.n	8004420 <memset+0x4>

0800442c <_init>:
 800442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442e:	bf00      	nop
 8004430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004432:	bc08      	pop	{r3}
 8004434:	469e      	mov	lr, r3
 8004436:	4770      	bx	lr

08004438 <_fini>:
 8004438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443a:	bf00      	nop
 800443c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800443e:	bc08      	pop	{r3}
 8004440:	469e      	mov	lr, r3
 8004442:	4770      	bx	lr
